{
  "address": "0x0645648D171382c7e7f02EBE484CB115e673AF70",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256[2]",
          "name": "commitmentMapperEdDSAPubKey",
          "type": "uint256[2]"
        },
        {
          "internalType": "address",
          "name": "commitmentMapperAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "pubKey",
          "type": "uint256[2]"
        }
      ],
      "name": "PubKeyNotValid",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "UpdatedCommitmentMapperAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "newEdDSAPubKey",
          "type": "uint256[2]"
        }
      ],
      "name": "UpdatedCommitmentMapperEdDSAPubKey",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IMPLEMENTATION_VERSION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEdDSAPubKey",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[2]",
          "name": "commitmentMapperEdDSAPubKey",
          "type": "uint256[2]"
        },
        {
          "internalType": "address",
          "name": "commitmentMapperAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updateCommitmentMapperAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "newEdDSAPubKey",
          "type": "uint256[2]"
        }
      ],
      "name": "updateCommitmentMapperEdDSAPubKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc39d3a4904c939fa51d22e0bd7ffe266e8ddf9c6218e3635f571164ab8a16092",
  "receipt": {
    "to": null,
    "from": "0x2D11715220786490C8dA6CAC15444f250E838Eff",
    "contractAddress": "0x0645648D171382c7e7f02EBE484CB115e673AF70",
    "transactionIndex": 0,
    "gasUsed": "520404",
    "logsBloom": "0x
    "blockHash": "0x1d7e1065585149cf1aea8c87e21ae11e10cd154dc6b9f93ea4bcb510e8d35005",
    "transactionHash": "0xc39d3a4904c939fa51d22e0bd7ffe266e8ddf9c6218e3635f571164ab8a16092",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 25530285,
        "transactionHash": "0xc39d3a4904c939fa51d22e0bd7ffe266e8ddf9c6218e3635f571164ab8a16092",
        "address": "0x0645648D171382c7e7f02EBE484CB115e673AF70",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d11715220786490c8da6cac15444f250e838eff"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1d7e1065585149cf1aea8c87e21ae11e10cd154dc6b9f93ea4bcb510e8d35005"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25530285,
        "transactionHash": "0xc39d3a4904c939fa51d22e0bd7ffe266e8ddf9c6218e3635f571164ab8a16092",
        "address": "0x0645648D171382c7e7f02EBE484CB115e673AF70",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000002d11715220786490c8da6cac15444f250e838eff",
          "0x0000000000000000000000002d11715220786490c8da6cac15444f250e838eff"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x1d7e1065585149cf1aea8c87e21ae11e10cd154dc6b9f93ea4bcb510e8d35005"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25530285,
        "transactionHash": "0xc39d3a4904c939fa51d22e0bd7ffe266e8ddf9c6218e3635f571164ab8a16092",
        "address": "0x0645648D171382c7e7f02EBE484CB115e673AF70",
        "topics": [
          "0x9d99ec80e15298d9dae698493e9c61daaae3977b0f131ded44fc6b0f7766ab15"
        ],
        "data": "0x0c6c16efc72c198f4549bd069f1e57f091885234b9c140286d80ef431151d64412c54731563d974ead25d469d2263fdf0e230d5a09f6cd40a06e60210610d642",
        "logIndex": 2,
        "blockHash": "0x1d7e1065585149cf1aea8c87e21ae11e10cd154dc6b9f93ea4bcb510e8d35005"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25530285,
        "transactionHash": "0xc39d3a4904c939fa51d22e0bd7ffe266e8ddf9c6218e3635f571164ab8a16092",
        "address": "0x0645648D171382c7e7f02EBE484CB115e673AF70",
        "topics": [
          "0xa37a473be736ea014730a555941f412164222d9d1b07f5a0a61932a1b3c3f2f4"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x1d7e1065585149cf1aea8c87e21ae11e10cd154dc6b9f93ea4bcb510e8d35005"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25530285,
        "transactionHash": "0xc39d3a4904c939fa51d22e0bd7ffe266e8ddf9c6218e3635f571164ab8a16092",
        "address": "0x0645648D171382c7e7f02EBE484CB115e673AF70",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 4,
        "blockHash": "0x1d7e1065585149cf1aea8c87e21ae11e10cd154dc6b9f93ea4bcb510e8d35005"
      }
    ],
    "blockNumber": 25530285,
    "cumulativeGasUsed": "520404",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2D11715220786490C8dA6CAC15444f250E838Eff",
    [
      "0x0c6c16efc72c198f4549bd069f1e57f091885234b9c140286d80ef431151d644",
      "0x12c54731563d974ead25d469d2263fdf0e230d5a09f6cd40a06e60210610d642"
    ],
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "61c38ae61d36c4e0fe74ede913f00b14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentMapperEdDSAPubKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"commitmentMapperAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"pubKey\",\"type\":\"uint256[2]\"}],\"name\":\"PubKeyNotValid\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdatedCommitmentMapperAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"newEdDSAPubKey\",\"type\":\"uint256[2]\"}],\"name\":\"UpdatedCommitmentMapperEdDSAPubKey\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IMPLEMENTATION_VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEdDSAPubKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentMapperEdDSAPubKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"commitmentMapperAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateCommitmentMapperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"newEdDSAPubKey\",\"type\":\"uint256[2]\"}],\"name\":\"updateCommitmentMapperEdDSAPubKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sismo\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor\",\"params\":{\"commitmentMapperAddress\":\"Address of the commitment mapper\",\"commitmentMapperEdDSAPubKey\":\"EdDSA public key of the commitment mapper\",\"owner\":\"Owner of the contract, can update public key and address\"}},\"getAddress()\":{\"details\":\"Getter of the address of the commitment mapper\"},\"getEdDSAPubKey()\":{\"details\":\"Getter of the EdDSA public key of the commitment mapper\"},\"initialize(address,uint256[2],address)\":{\"details\":\"Initializes the contract, to be called by the proxy delegating calls to this implementation\",\"params\":{\"commitmentMapperAddress\":\"Address of the commitment mapper\",\"commitmentMapperEdDSAPubKey\":\"EdDSA public key of the commitment mapper\",\"ownerAddress\":\"Owner of the contract, can update public key and address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCommitmentMapperAddress(address)\":{\"details\":\"Updates the address\",\"params\":{\"newAddress\":\"new address\"}},\"updateCommitmentMapperEdDSAPubKey(uint256[2])\":{\"details\":\"Updates the EdDSA public key\",\"params\":{\"newEdDSAPubKey\":\"new EdDSA pubic key\"}}},\"title\":\"Commitment Mapper Registry Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,uint256[2],address)\":{\"notice\":\"The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization.\"}},\"notice\":\"This contract stores information about the commitment mapper. Its ethereum address and its EdDSA public key For more information: https://commitment-mapper.docs.sismo.io*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/utils/CommitmentMapperRegistry.sol\":\"CommitmentMapperRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xcee5467d5d873fb75dae6f98c01a8d25dd609f9d0374c7d39217bd5f9539a2d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/periphery/utils/CommitmentMapperRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {Initializable} from '@openzeppelin/contracts/proxy/utils/Initializable.sol';\\nimport {ICommitmentMapperRegistry} from './interfaces/ICommitmentMapperRegistry.sol';\\n\\n/**\\n * @title Commitment Mapper Registry Contract\\n * @author Sismo\\n * @notice This contract stores information about the commitment mapper.\\n * Its ethereum address and its EdDSA public key\\n * For more information: https://commitment-mapper.docs.sismo.io\\n *\\n **/\\ncontract CommitmentMapperRegistry is ICommitmentMapperRegistry, Initializable, Ownable {\\n  uint8 public constant IMPLEMENTATION_VERSION = 2;\\n\\n  uint256[2] internal _commitmentMapperPubKey;\\n  address _commitmentMapperAddress;\\n\\n  /**\\n   * @dev Constructor\\n   * @param owner Owner of the contract, can update public key and address\\n   * @param commitmentMapperEdDSAPubKey EdDSA public key of the commitment mapper\\n   * @param commitmentMapperAddress Address of the commitment mapper\\n   */\\n  constructor(\\n    address owner,\\n    uint256[2] memory commitmentMapperEdDSAPubKey,\\n    address commitmentMapperAddress\\n  ) {\\n    initialize(owner, commitmentMapperEdDSAPubKey, commitmentMapperAddress);\\n  }\\n\\n  /**\\n   * @dev Initializes the contract, to be called by the proxy delegating calls to this implementation\\n   * @param ownerAddress Owner of the contract, can update public key and address\\n   * @param commitmentMapperEdDSAPubKey EdDSA public key of the commitment mapper\\n   * @param commitmentMapperAddress Address of the commitment mapper\\n   * @notice The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization.\\n   */\\n  function initialize(\\n    address ownerAddress,\\n    uint256[2] memory commitmentMapperEdDSAPubKey,\\n    address commitmentMapperAddress\\n  ) public reinitializer(IMPLEMENTATION_VERSION) {\\n    // if proxy did not setup owner yet or if called by constructor (for implem setup)\\n    if (owner() == address(0) || address(this).code.length == 0) {\\n      _transferOwnership(ownerAddress);\\n      _updateCommitmentMapperEdDSAPubKey(commitmentMapperEdDSAPubKey);\\n      _updateCommitmentMapperAddress(commitmentMapperAddress);\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the EdDSA public key\\n   * @param newEdDSAPubKey new EdDSA pubic key\\n   */\\n  function updateCommitmentMapperEdDSAPubKey(uint256[2] memory newEdDSAPubKey) external onlyOwner {\\n    _updateCommitmentMapperEdDSAPubKey(newEdDSAPubKey);\\n  }\\n\\n  /**\\n   * @dev Updates the address\\n   * @param newAddress new address\\n   */\\n  function updateCommitmentMapperAddress(address newAddress) external onlyOwner {\\n    _updateCommitmentMapperAddress(newAddress);\\n  }\\n\\n  /**\\n   * @dev Getter of the EdDSA public key of the commitment mapper\\n   */\\n  function getEdDSAPubKey() external view override returns (uint256[2] memory) {\\n    return _commitmentMapperPubKey;\\n  }\\n\\n  /**\\n   * @dev Getter of the address of the commitment mapper\\n   */\\n  function getAddress() external view override returns (address) {\\n    return _commitmentMapperAddress;\\n  }\\n\\n  function _updateCommitmentMapperAddress(address newAddress) internal {\\n    _commitmentMapperAddress = newAddress;\\n    emit UpdatedCommitmentMapperAddress(newAddress);\\n  }\\n\\n  function _updateCommitmentMapperEdDSAPubKey(uint256[2] memory pubKey) internal {\\n    _commitmentMapperPubKey = pubKey;\\n    emit UpdatedCommitmentMapperEdDSAPubKey(pubKey);\\n  }\\n}\\n\",\"keccak256\":\"0x1b6ab7a4ba266f3da2c7f6ba3de93e3ab89f389dbd6db14514b43cbdcbe9fe09\",\"license\":\"MIT\"},\"contracts/periphery/utils/interfaces/ICommitmentMapperRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\ninterface ICommitmentMapperRegistry {\\n  event UpdatedCommitmentMapperEdDSAPubKey(uint256[2] newEdDSAPubKey);\\n  event UpdatedCommitmentMapperAddress(address newAddress);\\n  error PubKeyNotValid(uint256[2] pubKey);\\n\\n  /**\\n   * @dev Initializes the contract, to be called by the proxy delegating calls to this implementation\\n   * @param owner Owner of the contract, can update public key and address\\n   * @param commitmentMapperEdDSAPubKey EdDSA public key of the commitment mapper\\n   * @param commitmentMapperAddress Address of the commitment mapper\\n   * @notice The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization.\\n   */\\n  function initialize(\\n    address owner,\\n    uint256[2] memory commitmentMapperEdDSAPubKey,\\n    address commitmentMapperAddress\\n  ) external;\\n\\n  /**\\n   * @dev Updates the EdDSA public key\\n   * @param newEdDSAPubKey new EdDSA pubic key\\n   */\\n  function updateCommitmentMapperEdDSAPubKey(uint256[2] memory newEdDSAPubKey) external;\\n\\n  /**\\n   * @dev Updates the address\\n   * @param newAddress new address\\n   */\\n  function updateCommitmentMapperAddress(address newAddress) external;\\n\\n  /**\\n   * @dev Getter of the address of the commitment mapper\\n   */\\n  function getEdDSAPubKey() external view returns (uint256[2] memory);\\n\\n  /**\\n   * @dev Getter of the address of the commitment mapper\\n   */\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcb419cf389baad6f38de28625718f64f551d2669339c1b4e1887e11d62484469\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000abe38038062000abe833981016040819052620000349162000313565b6200003f3362000055565b6200004c838383620000b0565b505050620003ef565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600054600290610100900460ff16158015620000d3575060005460ff8083169116105b6200013b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805461ffff191660ff831617610100178155620001686000546201000090046001600160a01b031690565b6001600160a01b031614806200017d5750303b155b15620001a4576200018e8462000055565b6200019983620001eb565b620001a48262000237565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b620001fa600182600262000286565b507f9d99ec80e15298d9dae698493e9c61daaae3977b0f131ded44fc6b0f7766ab15816040516200022c9190620003bc565b60405180910390a150565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fa37a473be736ea014730a555941f412164222d9d1b07f5a0a61932a1b3c3f2f4906020016200022c565b8260028101928215620002b7579160200282015b82811115620002b75782518255916020019190600101906200029a565b50620002c5929150620002c9565b5090565b5b80821115620002c55760008155600101620002ca565b80516001600160a01b0381168114620002f857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000608084860312156200032957600080fd5b6200033484620002e0565b9250602085603f8601126200034857600080fd5b604080519081016001600160401b03811182821017156200036d576200036d620002fd565b6040528060608701888111156200038357600080fd5b8388015b81811015620003a0578051835291840191840162000387565b50829550620003af81620002e0565b9450505050509250925092565b60408101818360005b6002811015620003e6578151835260209283019290910190600101620003c5565b50505092915050565b6106bf80620003ff6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063727b2d5c11610066578063727b2d5c146100f4578063754b377c1461010757806378cf75d7146101215780638da5cb5b14610134578063f2fde38b1461014b57600080fd5b806338cc48311461009857806359a80d0d146100c25780637098a5f4146100d7578063715018a6146100ec575b600080fd5b6003546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100ca61015e565b6040516100b9919061053c565b6100ea6100e53660046105eb565b610198565b005b6100ea6101ac565b6100ea61010236600461062a565b6101c0565b61010f600281565b60405160ff90911681526020016100b9565b6100ea61012f366004610645565b6101d1565b6000546201000090046001600160a01b03166100a5565b6100ea61015936600461062a565b610303565b6101666104cb565b60408051808201918290529060019060029082845b81548152602001906001019080831161017b575050505050905090565b6101a0610379565b6101a9816103da565b50565b6101b4610379565b6101be6000610422565b565b6101c8610379565b6101a98161047d565b600054600290610100900460ff161580156101f3575060005460ff8083169116105b61025b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805461ffff191660ff8316176101001781556102886000546001600160a01b03620100009091041690565b6001600160a01b0316148061029c5750303b155b156102bc576102aa84610422565b6102b3836103da565b6102bc8261047d565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b61030b610379565b6001600160a01b0381166103705760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610252565b6101a981610422565b6000546001600160a01b03620100009091041633146101be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610252565b6103e760018260026104e9565b507f9d99ec80e15298d9dae698493e9c61daaae3977b0f131ded44fc6b0f7766ab1581604051610417919061053c565b60405180910390a150565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fa37a473be736ea014730a555941f412164222d9d1b07f5a0a61932a1b3c3f2f490602001610417565b60405180604001604052806002906020820280368337509192915050565b8260028101928215610517579160200282015b828111156105175782518255916020019190600101906104fc565b50610523929150610527565b5090565b5b808211156105235760008155600101610528565b60408101818360005b6002811015610564578151835260209283019290910190600101610545565b50505092915050565b600082601f83011261057e57600080fd5b6040516040810181811067ffffffffffffffff821117156105af57634e487b7160e01b600052604160045260246000fd5b80604052508060408401858111156105c657600080fd5b845b818110156105e05780358352602092830192016105c8565b509195945050505050565b6000604082840312156105fd57600080fd5b610607838361056d565b9392505050565b80356001600160a01b038116811461062557600080fd5b919050565b60006020828403121561063c57600080fd5b6106078261060e565b60008060006080848603121561065a57600080fd5b6106638461060e565b9250610672856020860161056d565b91506106806060850161060e565b9050925092509256fea2646970667358221220d4b69e1f79868deff972c669c62c01ccfa63a6b030214293debea10ed567f04f64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063727b2d5c11610066578063727b2d5c146100f4578063754b377c1461010757806378cf75d7146101215780638da5cb5b14610134578063f2fde38b1461014b57600080fd5b806338cc48311461009857806359a80d0d146100c25780637098a5f4146100d7578063715018a6146100ec575b600080fd5b6003546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100ca61015e565b6040516100b9919061053c565b6100ea6100e53660046105eb565b610198565b005b6100ea6101ac565b6100ea61010236600461062a565b6101c0565b61010f600281565b60405160ff90911681526020016100b9565b6100ea61012f366004610645565b6101d1565b6000546201000090046001600160a01b03166100a5565b6100ea61015936600461062a565b610303565b6101666104cb565b60408051808201918290529060019060029082845b81548152602001906001019080831161017b575050505050905090565b6101a0610379565b6101a9816103da565b50565b6101b4610379565b6101be6000610422565b565b6101c8610379565b6101a98161047d565b600054600290610100900460ff161580156101f3575060005460ff8083169116105b61025b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805461ffff191660ff8316176101001781556102886000546001600160a01b03620100009091041690565b6001600160a01b0316148061029c5750303b155b156102bc576102aa84610422565b6102b3836103da565b6102bc8261047d565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b61030b610379565b6001600160a01b0381166103705760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610252565b6101a981610422565b6000546001600160a01b03620100009091041633146101be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610252565b6103e760018260026104e9565b507f9d99ec80e15298d9dae698493e9c61daaae3977b0f131ded44fc6b0f7766ab1581604051610417919061053c565b60405180910390a150565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fa37a473be736ea014730a555941f412164222d9d1b07f5a0a61932a1b3c3f2f490602001610417565b60405180604001604052806002906020820280368337509192915050565b8260028101928215610517579160200282015b828111156105175782518255916020019190600101906104fc565b50610523929150610527565b5090565b5b808211156105235760008155600101610528565b60408101818360005b6002811015610564578151835260209283019290910190600101610545565b50505092915050565b600082601f83011261057e57600080fd5b6040516040810181811067ffffffffffffffff821117156105af57634e487b7160e01b600052604160045260246000fd5b80604052508060408401858111156105c657600080fd5b845b818110156105e05780358352602092830192016105c8565b509195945050505050565b6000604082840312156105fd57600080fd5b610607838361056d565b9392505050565b80356001600160a01b038116811461062557600080fd5b919050565b60006020828403121561063c57600080fd5b6106078261060e565b60008060006080848603121561065a57600080fd5b6106638461060e565b9250610672856020860161056d565b91506106806060850161060e565b9050925092509256fea2646970667358221220d4b69e1f79868deff972c669c62c01ccfa63a6b030214293debea10ed567f04f64736f6c634300080e0033",
  "devdoc": {
    "author": "Sismo",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor",
        "params": {
          "commitmentMapperAddress": "Address of the commitment mapper",
          "commitmentMapperEdDSAPubKey": "EdDSA public key of the commitment mapper",
          "owner": "Owner of the contract, can update public key and address"
        }
      },
      "getAddress()": {
        "details": "Getter of the address of the commitment mapper"
      },
      "getEdDSAPubKey()": {
        "details": "Getter of the EdDSA public key of the commitment mapper"
      },
      "initialize(address,uint256[2],address)": {
        "details": "Initializes the contract, to be called by the proxy delegating calls to this implementation",
        "params": {
          "commitmentMapperAddress": "Address of the commitment mapper",
          "commitmentMapperEdDSAPubKey": "EdDSA public key of the commitment mapper",
          "ownerAddress": "Owner of the contract, can update public key and address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCommitmentMapperAddress(address)": {
        "details": "Updates the address",
        "params": {
          "newAddress": "new address"
        }
      },
      "updateCommitmentMapperEdDSAPubKey(uint256[2])": {
        "details": "Updates the EdDSA public key",
        "params": {
          "newEdDSAPubKey": "new EdDSA pubic key"
        }
      }
    },
    "title": "Commitment Mapper Registry Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,uint256[2],address)": {
        "notice": "The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization."
      }
    },
    "notice": "This contract stores information about the commitment mapper. Its ethereum address and its EdDSA public key For more information: https://commitment-mapper.docs.sismo.io*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 935,
        "contract": "contracts/periphery/utils/CommitmentMapperRegistry.sol:CommitmentMapperRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 938,
        "contract": "contracts/periphery/utils/CommitmentMapperRegistry.sol:CommitmentMapperRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 396,
        "contract": "contracts/periphery/utils/CommitmentMapperRegistry.sol:CommitmentMapperRegistry",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15766,
        "contract": "contracts/periphery/utils/CommitmentMapperRegistry.sol:CommitmentMapperRegistry",
        "label": "_commitmentMapperPubKey",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)2_storage"
      },
      {
        "astId": 15768,
        "contract": "contracts/periphery/utils/CommitmentMapperRegistry.sol:CommitmentMapperRegistry",
        "label": "_commitmentMapperAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}