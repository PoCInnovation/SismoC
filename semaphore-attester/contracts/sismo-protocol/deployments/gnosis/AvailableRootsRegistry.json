{
  "address": "0x453bF14103CC941A96721de9A32d5E3d3095e049",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotRegisterForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotUnregisterForZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "RegisteredRootForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "RegisteredRootForAttester",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "UnregisteredRootForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "UnregisteredRootForAttester",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IMPLEMENTATION_VERSION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_roots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "isRootAvailableForAttester",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "isRootAvailableForMe",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "registerRootForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "registerRootForAttester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "unregisterRootForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "unregisterRootForAttester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3185ac9b8de776e58f1e99cec1f8a945ea69d7c4f269a5ebbd5a6515cb912ab6",
  "receipt": {
    "to": null,
    "from": "0x2D11715220786490C8dA6CAC15444f250E838Eff",
    "contractAddress": "0xe1f2a10Ea49572E9F3E79c8F52B33563b50994a5",
    "transactionIndex": 0,
    "gasUsed": "508612",
    "logsBloom": "0x
    "blockHash": "0xefb410057522d44b4753cfc6666df2911476391e7a9eafb3803fff812b7e88eb",
    "transactionHash": "0x3185ac9b8de776e58f1e99cec1f8a945ea69d7c4f269a5ebbd5a6515cb912ab6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 25530281,
        "transactionHash": "0x3185ac9b8de776e58f1e99cec1f8a945ea69d7c4f269a5ebbd5a6515cb912ab6",
        "address": "0xe1f2a10Ea49572E9F3E79c8F52B33563b50994a5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d11715220786490c8da6cac15444f250e838eff"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xefb410057522d44b4753cfc6666df2911476391e7a9eafb3803fff812b7e88eb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25530281,
        "transactionHash": "0x3185ac9b8de776e58f1e99cec1f8a945ea69d7c4f269a5ebbd5a6515cb912ab6",
        "address": "0xe1f2a10Ea49572E9F3E79c8F52B33563b50994a5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000002d11715220786490c8da6cac15444f250e838eff",
          "0x0000000000000000000000002d11715220786490c8da6cac15444f250e838eff"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xefb410057522d44b4753cfc6666df2911476391e7a9eafb3803fff812b7e88eb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25530281,
        "transactionHash": "0x3185ac9b8de776e58f1e99cec1f8a945ea69d7c4f269a5ebbd5a6515cb912ab6",
        "address": "0xe1f2a10Ea49572E9F3E79c8F52B33563b50994a5",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 2,
        "blockHash": "0xefb410057522d44b4753cfc6666df2911476391e7a9eafb3803fff812b7e88eb"
      }
    ],
    "blockNumber": 25530281,
    "cumulativeGasUsed": "508612",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2D11715220786490C8dA6CAC15444f250E838Eff"
  ],
  "numDeployments": 2,
  "solcInputHash": "61c38ae61d36c4e0fe74ede913f00b14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotRegisterForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUnregisterForZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"RegisteredRootForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"RegisteredRootForAttester\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"UnregisteredRootForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"UnregisteredRootForAttester\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IMPLEMENTATION_VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_roots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"isRootAvailableForAttester\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"isRootAvailableForMe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"registerRootForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"registerRootForAttester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"unregisterRootForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"unregisterRootForAttester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sismo\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor\",\"params\":{\"owner\":\"Owner of the contract, can register/ unregister roots\"}},\"initialize(address)\":{\"details\":\"Initializes the contract, to be called by the proxy delegating calls to this implementation\",\"params\":{\"ownerAddress\":\"Owner of the contract, can update public key and address\"}},\"isRootAvailableForAttester(address,uint256)\":{\"details\":\"Initializes the contract, to be called by the proxy delegating calls to this implementation\",\"params\":{\"attester\":\"Owner of the contract, can update public key and address\",\"root\":\"Owner of the contract, can update public key and address\"}},\"isRootAvailableForMe(uint256)\":{\"details\":\"returns whether a root is available for a caller (msg.sender)\",\"params\":{\"root\":\"root to check whether it is registered for me or not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerRootForAll(uint256)\":{\"details\":\"Registers a root, available for all contracts\",\"params\":{\"root\":\"Root to register\"}},\"registerRootForAttester(address,uint256)\":{\"details\":\"Register a root available for an attester\",\"params\":{\"attester\":\"Attester which will have the root available\",\"root\":\"Root to register\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unregisterRootForAll(uint256)\":{\"details\":\"Unregister a root, available for all contracts\",\"params\":{\"root\":\"Root to unregister\"}},\"unregisterRootForAttester(address,uint256)\":{\"details\":\"Unregister a root for an attester\",\"params\":{\"attester\":\"Attester which will no longer have the root available\",\"root\":\"Root to unregister\"}}},\"title\":\"Attesters Groups Registry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address)\":{\"notice\":\"The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization.\"}},\"notice\":\"This contract stores that data required by attesters to be available so they can verify user claims This contract is deployed behind a proxy and this implementation is focused on storing merkle roots For more information: https://available-roots-registry.docs.sismo.io*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/utils/AvailableRootsRegistry.sol\":\"AvailableRootsRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xcee5467d5d873fb75dae6f98c01a8d25dd609f9d0374c7d39217bd5f9539a2d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/periphery/utils/AvailableRootsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {IAvailableRootsRegistry} from './interfaces/IAvailableRootsRegistry.sol';\\nimport {Initializable} from '@openzeppelin/contracts/proxy/utils/Initializable.sol';\\n\\n/**\\n * @title Attesters Groups Registry\\n * @author Sismo\\n * @notice This contract stores that data required by attesters to be available so they can verify user claims\\n * This contract is deployed behind a proxy and this implementation is focused on storing merkle roots\\n * For more information: https://available-roots-registry.docs.sismo.io\\n *\\n **/\\ncontract AvailableRootsRegistry is IAvailableRootsRegistry, Initializable, Ownable {\\n  uint8 public constant IMPLEMENTATION_VERSION = 2;\\n\\n  mapping(address => mapping(uint256 => bool)) public _roots;\\n\\n  /**\\n   * @dev Constructor\\n   * @param owner Owner of the contract, can register/ unregister roots\\n   */\\n  constructor(address owner) {\\n    initialize(owner);\\n  }\\n\\n  /**\\n   * @dev Initializes the contract, to be called by the proxy delegating calls to this implementation\\n   * @param ownerAddress Owner of the contract, can update public key and address\\n   * @notice The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization.\\n   */\\n  function initialize(address ownerAddress) public reinitializer(IMPLEMENTATION_VERSION) {\\n    // if proxy did not setup owner yet or if called by constructor (for implem setup)\\n    if (owner() == address(0) || address(this).code.length == 0) {\\n      _transferOwnership(ownerAddress);\\n    }\\n  }\\n\\n  /**\\n   * @dev Register a root available for an attester\\n   * @param attester Attester which will have the root available\\n   * @param root Root to register\\n   */\\n  function registerRootForAttester(address attester, uint256 root) external onlyOwner {\\n    if (attester == address(0)) revert CannotRegisterForZeroAddress();\\n    _registerRootForAttester(attester, root);\\n  }\\n\\n  /**\\n   * @dev Unregister a root for an attester\\n   * @param attester Attester which will no longer have the root available\\n   * @param root Root to unregister\\n   */\\n  function unregisterRootForAttester(address attester, uint256 root) external onlyOwner {\\n    if (attester == address(0)) revert CannotUnregisterForZeroAddress();\\n    _unregisterRootForAttester(attester, root);\\n  }\\n\\n  /**\\n   * @dev Registers a root, available for all contracts\\n   * @param root Root to register\\n   */\\n  function registerRootForAll(uint256 root) external onlyOwner {\\n    _registerRootForAttester(address(0), root);\\n  }\\n\\n  /**\\n   * @dev Unregister a root, available for all contracts\\n   * @param root Root to unregister\\n   */\\n  function unregisterRootForAll(uint256 root) external onlyOwner {\\n    _unregisterRootForAttester(address(0), root);\\n  }\\n\\n  /**\\n   * @dev returns whether a root is available for a caller (msg.sender)\\n   * @param root root to check whether it is registered for me or not\\n   */\\n  function isRootAvailableForMe(uint256 root) external view returns (bool) {\\n    return _roots[_msgSender()][root] || _roots[address(0)][root];\\n  }\\n\\n  /**\\n   * @dev Initializes the contract, to be called by the proxy delegating calls to this implementation\\n   * @param attester Owner of the contract, can update public key and address\\n   * @param root Owner of the contract, can update public key and address\\n   */\\n  function isRootAvailableForAttester(address attester, uint256 root) external view returns (bool) {\\n    return _roots[attester][root] || _roots[address(0)][root];\\n  }\\n\\n  function _registerRootForAttester(address attester, uint256 root) internal {\\n    _roots[attester][root] = true;\\n    if (attester == address(0)) {\\n      emit RegisteredRootForAll(root);\\n    } else {\\n      emit RegisteredRootForAttester(attester, root);\\n    }\\n  }\\n\\n  function _unregisterRootForAttester(address attester, uint256 root) internal {\\n    _roots[attester][root] = false;\\n    if (attester == address(0)) {\\n      emit UnregisteredRootForAll(root);\\n    } else {\\n      emit UnregisteredRootForAttester(attester, root);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3467998cbdb82b0c64aa8627efc5893d2b369f73e66e5d1095305e4609593cc5\",\"license\":\"MIT\"},\"contracts/periphery/utils/interfaces/IAvailableRootsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title IAvailableRootsRegistry\\n * @author Sismo\\n * @notice Interface for (Merkle) Roots Registry\\n */\\ninterface IAvailableRootsRegistry {\\n  event RegisteredRootForAttester(address attester, uint256 root);\\n  event RegisteredRootForAll(uint256 root);\\n  event UnregisteredRootForAttester(address attester, uint256 root);\\n  event UnregisteredRootForAll(uint256 root);\\n\\n  error CannotRegisterForZeroAddress();\\n  error CannotUnregisterForZeroAddress();\\n\\n  /**\\n   * @dev Initializes the contract, to be called by the proxy delegating calls to this implementation\\n   * @param owner Owner of the contract, can update public key and address\\n   * @notice The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization.\\n   */\\n  function initialize(address owner) external;\\n\\n  /**\\n   * @dev Register a root available for an attester\\n   * @param attester Attester which will have the root available\\n   * @param root Root to register\\n   */\\n  function registerRootForAttester(address attester, uint256 root) external;\\n\\n  /**\\n   * @dev Unregister a root for an attester\\n   * @param attester Attester which will no longer have the root available\\n   * @param root Root to unregister\\n   */\\n  function unregisterRootForAttester(address attester, uint256 root) external;\\n\\n  /**\\n   * @dev Registers a root, available for all contracts\\n   * @param root Root to register\\n   */\\n  function registerRootForAll(uint256 root) external;\\n\\n  /**\\n   * @dev Unregister a root, available for all contracts\\n   * @param root Root to unregister\\n   */\\n  function unregisterRootForAll(uint256 root) external;\\n\\n  /**\\n   * @dev returns whether a root is available for a caller (msg.sender)\\n   * @param root root to check whether it is registered for me or not\\n   */\\n  function isRootAvailableForMe(uint256 root) external view returns (bool);\\n\\n  /**\\n   * @dev Initializes the contract, to be called by the proxy delegating calls to this implementation\\n   * @param attester Owner of the contract, can update public key and address\\n   * @param root Owner of the contract, can update public key and address\\n   */\\n  function isRootAvailableForAttester(address attester, uint256 root) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5e882d3091e816f1286837eef92ae17737abf66fdeece1282b752f27ba18492b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161099538038061099583398101604081905261002f916101be565b61003833610047565b610041816100a2565b506101ee565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600054600290610100900460ff161580156100c4575060005460ff8083169116105b61012b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805461ffff191660ff8316176101001781556101576000546201000090046001600160a01b031690565b6001600160a01b0316148061016b5750303b155b156101795761017982610047565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6000602082840312156101d057600080fd5b81516001600160a01b03811681146101e757600080fd5b9392505050565b610798806101fd6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063be4a605611610071578063be4a605614610170578063c4d66de814610183578063e5e477a014610196578063ebea45cb146101a9578063f2fde38b146101bc578063fe7e7750146101cf57600080fd5b80632f56be56146100b95780634e473f8f146100ce578063715018a6146100f6578063754b377c146100fe57806380b404ce146101185780638da5cb5b14610146575b600080fd5b6100cc6100c7366004610704565b6101e2565b005b6100e16100dc366004610704565b61021f565b60405190151581526020015b60405180910390f35b6100cc610285565b610106600281565b60405160ff90911681526020016100ed565b6100e1610126366004610704565b600160209081526000928352604080842090915290825290205460ff1681565b6000546201000090046001600160a01b03166040516001600160a01b0390911681526020016100ed565b6100cc61017e36600461072e565b610299565b6100cc610191366004610747565b6102af565b6100e16101a436600461072e565b6103ce565b6100cc6101b7366004610704565b61042a565b6100cc6101ca366004610747565b610463565b6100cc6101dd36600461072e565b6104d9565b6101ea6104ec565b6001600160a01b03821661021157604051639e95e88b60e01b815260040160405180910390fd5b61021b828261054d565b5050565b6001600160a01b038216600090815260016020908152604080832084845290915281205460ff168061027e575060008281527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff165b9392505050565b61028d6104ec565b61029760006105ef565b565b6102a16104ec565b6102ac60008261054d565b50565b600054600290610100900460ff161580156102d1575060005460ff8083169116105b6103395760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805461ffff191660ff8316176101001781556103666000546001600160a01b03620100009091041690565b6001600160a01b0316148061037a5750303b155b1561038857610388826105ef565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b33600090815260016020908152604080832084845290915281205460ff1680610424575060008281527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff165b92915050565b6104326104ec565b6001600160a01b03821661045957604051631b25a00160e31b815260040160405180910390fd5b61021b828261064a565b61046b6104ec565b6001600160a01b0381166104d05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610330565b6102ac816105ef565b6104e16104ec565b6102ac60008261064a565b6000546001600160a01b03620100009091041633146102975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610330565b6001600160a01b0382166000818152600160208181526040808420868552909152909120805460ff191690911790556105b0576040518181527f22f0a171f00eeea3af5276d1f77587471dcc3bde32d62560046549b34bacd38a906020016103c2565b604080516001600160a01b0384168152602081018390527f21cdff046578afe71b78f95ac4891306af3a9b9eb71e2f0ef380b35b487d2f1291016103c2565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6001600160a01b03821660008181526001602090815260408083208584529091529020805460ff191690556106a9576040518181527f7261c2abe5e576aac50024de639315f10783f67935bf118bbb49b33c20ef70ef906020016103c2565b604080516001600160a01b0384168152602081018390527fba8195cc62a4086b7cd93d22db90e43ae42d8b5febd8c66b3453771e455b7a3391016103c2565b80356001600160a01b03811681146106ff57600080fd5b919050565b6000806040838503121561071757600080fd5b610720836106e8565b946020939093013593505050565b60006020828403121561074057600080fd5b5035919050565b60006020828403121561075957600080fd5b61027e826106e856fea264697066735822122096da5c8d33677e6203057d911bba2c609059e50119bb896ec169d0349a48641d64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063be4a605611610071578063be4a605614610170578063c4d66de814610183578063e5e477a014610196578063ebea45cb146101a9578063f2fde38b146101bc578063fe7e7750146101cf57600080fd5b80632f56be56146100b95780634e473f8f146100ce578063715018a6146100f6578063754b377c146100fe57806380b404ce146101185780638da5cb5b14610146575b600080fd5b6100cc6100c7366004610704565b6101e2565b005b6100e16100dc366004610704565b61021f565b60405190151581526020015b60405180910390f35b6100cc610285565b610106600281565b60405160ff90911681526020016100ed565b6100e1610126366004610704565b600160209081526000928352604080842090915290825290205460ff1681565b6000546201000090046001600160a01b03166040516001600160a01b0390911681526020016100ed565b6100cc61017e36600461072e565b610299565b6100cc610191366004610747565b6102af565b6100e16101a436600461072e565b6103ce565b6100cc6101b7366004610704565b61042a565b6100cc6101ca366004610747565b610463565b6100cc6101dd36600461072e565b6104d9565b6101ea6104ec565b6001600160a01b03821661021157604051639e95e88b60e01b815260040160405180910390fd5b61021b828261054d565b5050565b6001600160a01b038216600090815260016020908152604080832084845290915281205460ff168061027e575060008281527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff165b9392505050565b61028d6104ec565b61029760006105ef565b565b6102a16104ec565b6102ac60008261054d565b50565b600054600290610100900460ff161580156102d1575060005460ff8083169116105b6103395760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805461ffff191660ff8316176101001781556103666000546001600160a01b03620100009091041690565b6001600160a01b0316148061037a5750303b155b1561038857610388826105ef565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b33600090815260016020908152604080832084845290915281205460ff1680610424575060008281527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff165b92915050565b6104326104ec565b6001600160a01b03821661045957604051631b25a00160e31b815260040160405180910390fd5b61021b828261064a565b61046b6104ec565b6001600160a01b0381166104d05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610330565b6102ac816105ef565b6104e16104ec565b6102ac60008261064a565b6000546001600160a01b03620100009091041633146102975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610330565b6001600160a01b0382166000818152600160208181526040808420868552909152909120805460ff191690911790556105b0576040518181527f22f0a171f00eeea3af5276d1f77587471dcc3bde32d62560046549b34bacd38a906020016103c2565b604080516001600160a01b0384168152602081018390527f21cdff046578afe71b78f95ac4891306af3a9b9eb71e2f0ef380b35b487d2f1291016103c2565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6001600160a01b03821660008181526001602090815260408083208584529091529020805460ff191690556106a9576040518181527f7261c2abe5e576aac50024de639315f10783f67935bf118bbb49b33c20ef70ef906020016103c2565b604080516001600160a01b0384168152602081018390527fba8195cc62a4086b7cd93d22db90e43ae42d8b5febd8c66b3453771e455b7a3391016103c2565b80356001600160a01b03811681146106ff57600080fd5b919050565b6000806040838503121561071757600080fd5b610720836106e8565b946020939093013593505050565b60006020828403121561074057600080fd5b5035919050565b60006020828403121561075957600080fd5b61027e826106e856fea264697066735822122096da5c8d33677e6203057d911bba2c609059e50119bb896ec169d0349a48641d64736f6c634300080e0033",
  "devdoc": {
    "author": "Sismo",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor",
        "params": {
          "owner": "Owner of the contract, can register/ unregister roots"
        }
      },
      "initialize(address)": {
        "details": "Initializes the contract, to be called by the proxy delegating calls to this implementation",
        "params": {
          "ownerAddress": "Owner of the contract, can update public key and address"
        }
      },
      "isRootAvailableForAttester(address,uint256)": {
        "details": "Initializes the contract, to be called by the proxy delegating calls to this implementation",
        "params": {
          "attester": "Owner of the contract, can update public key and address",
          "root": "Owner of the contract, can update public key and address"
        }
      },
      "isRootAvailableForMe(uint256)": {
        "details": "returns whether a root is available for a caller (msg.sender)",
        "params": {
          "root": "root to check whether it is registered for me or not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerRootForAll(uint256)": {
        "details": "Registers a root, available for all contracts",
        "params": {
          "root": "Root to register"
        }
      },
      "registerRootForAttester(address,uint256)": {
        "details": "Register a root available for an attester",
        "params": {
          "attester": "Attester which will have the root available",
          "root": "Root to register"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unregisterRootForAll(uint256)": {
        "details": "Unregister a root, available for all contracts",
        "params": {
          "root": "Root to unregister"
        }
      },
      "unregisterRootForAttester(address,uint256)": {
        "details": "Unregister a root for an attester",
        "params": {
          "attester": "Attester which will no longer have the root available",
          "root": "Root to unregister"
        }
      }
    },
    "title": "Attesters Groups Registry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address)": {
        "notice": "The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization."
      }
    },
    "notice": "This contract stores that data required by attesters to be available so they can verify user claims This contract is deployed behind a proxy and this implementation is focused on storing merkle roots For more information: https://available-roots-registry.docs.sismo.io*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 935,
        "contract": "contracts/periphery/utils/AvailableRootsRegistry.sol:AvailableRootsRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 938,
        "contract": "contracts/periphery/utils/AvailableRootsRegistry.sol:AvailableRootsRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 396,
        "contract": "contracts/periphery/utils/AvailableRootsRegistry.sol:AvailableRootsRegistry",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15495,
        "contract": "contracts/periphery/utils/AvailableRootsRegistry.sol:AvailableRootsRegistry",
        "label": "_roots",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}