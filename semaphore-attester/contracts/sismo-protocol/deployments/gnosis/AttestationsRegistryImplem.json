{
  "address": "0xFf603d3a6D767bA0b8FD958a690Cc42c6181E358",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "badgesAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ArgsLengthDoesNotMatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "AttesterNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "attributeIndex",
          "type": "uint8"
        }
      ],
      "name": "AttributeAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "attributeIndex",
          "type": "uint8"
        }
      ],
      "name": "AttributeDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedFirstId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedLastId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "FirstId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastCollectionId",
          "type": "uint256"
        }
      ],
      "name": "IdsMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        }
      ],
      "name": "IssuerNotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "collectionIds",
          "type": "uint256[]"
        }
      ],
      "name": "OwnersAndCollectionIdsLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expectedArrayLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "RangeIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "ValueOutOfBounds",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "AttestationDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "AttestationRecorded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "attributeIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "attributeValue",
          "type": "uint8"
        }
      ],
      "name": "AttestationsCollectionAttributeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "attributeIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "deletedAttributeName",
          "type": "bytes32"
        }
      ],
      "name": "AttributeDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "attributeIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newAttributeName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "previousAttributeName",
          "type": "bytes32"
        }
      ],
      "name": "AttributeNameUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstCollectionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastCollectionId",
          "type": "uint256"
        }
      ],
      "name": "IssuerAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstCollectionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastCollectionId",
          "type": "uint256"
        }
      ],
      "name": "IssuerUnauthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "attributeIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "attributeName",
          "type": "bytes32"
        }
      ],
      "name": "NewAttributeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IMPLEMENTATION_VERSION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "attestationsCollectionHasAttribute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "indices",
          "type": "uint8[]"
        }
      ],
      "name": "attestationsCollectionHasAttributes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "firstCollectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastCollectionId",
          "type": "uint256"
        }
      ],
      "name": "authorizeRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct Range[]",
          "name": "ranges",
          "type": "tuple[]"
        }
      ],
      "name": "authorizeRanges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        }
      ],
      "name": "createNewAttribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "indices",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "names",
          "type": "bytes32[]"
        }
      ],
      "name": "createNewAttributes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "collectionIds",
          "type": "uint256[]"
        }
      ],
      "name": "deleteAttestations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "deleteAttribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "indices",
          "type": "uint8[]"
        }
      ],
      "name": "deleteAttributes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAttestationData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct AttestationData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "collectionIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        }
      ],
      "name": "getAttestationDataBatch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct AttestationData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAttestationDataTuple",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAttestationExtraData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAttestationIssuer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAttestationTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAttestationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "collectionIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        }
      ],
      "name": "getAttestationValueBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getAttributeValueForAttestationsCollection",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        }
      ],
      "name": "getAttributesNamesAndValuesForAttestationsCollection",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "indices",
          "type": "uint8[]"
        }
      ],
      "name": "getAttributesValuesForAttestationsCollection",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "hasAttestation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "attestations",
          "type": "tuple[]"
        }
      ],
      "name": "recordAttestations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "setAttributeValueForAttestationsCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "collectionIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "indices",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "values",
          "type": "uint8[]"
        }
      ],
      "name": "setAttributesValuesForAttestationsCollections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstCollectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastCollectionId",
          "type": "uint256"
        }
      ],
      "name": "unauthorizeRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct Range[]",
          "name": "ranges",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rangeIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "unauthorizeRanges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "newName",
          "type": "bytes32"
        }
      ],
      "name": "updateAttributeName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "indices",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "newNames",
          "type": "bytes32[]"
        }
      ],
      "name": "updateAttributesName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x70218360c78433e9057163b2a6fca4ad0df6a7762b72c07845d373d08f4df930",
  "receipt": {
    "to": null,
    "from": "0x2D11715220786490C8dA6CAC15444f250E838Eff",
    "contractAddress": "0xFf603d3a6D767bA0b8FD958a690Cc42c6181E358",
    "transactionIndex": 4,
    "gasUsed": "3121566",
    "logsBloom": "0x
    "blockHash": "0x4e1d45d4ad0c7967d786e3574f0579d665dd785496699d79a89dbdae0750504a",
    "transactionHash": "0x70218360c78433e9057163b2a6fca4ad0df6a7762b72c07845d373d08f4df930",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 25530272,
        "transactionHash": "0x70218360c78433e9057163b2a6fca4ad0df6a7762b72c07845d373d08f4df930",
        "address": "0xFf603d3a6D767bA0b8FD958a690Cc42c6181E358",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d11715220786490c8da6cac15444f250e838eff"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x4e1d45d4ad0c7967d786e3574f0579d665dd785496699d79a89dbdae0750504a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 25530272,
        "transactionHash": "0x70218360c78433e9057163b2a6fca4ad0df6a7762b72c07845d373d08f4df930",
        "address": "0xFf603d3a6D767bA0b8FD958a690Cc42c6181E358",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000002d11715220786490c8da6cac15444f250e838eff",
          "0x0000000000000000000000002d11715220786490c8da6cac15444f250e838eff"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x4e1d45d4ad0c7967d786e3574f0579d665dd785496699d79a89dbdae0750504a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 25530272,
        "transactionHash": "0x70218360c78433e9057163b2a6fca4ad0df6a7762b72c07845d373d08f4df930",
        "address": "0xFf603d3a6D767bA0b8FD958a690Cc42c6181E358",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000003",
        "logIndex": 15,
        "blockHash": "0x4e1d45d4ad0c7967d786e3574f0579d665dd785496699d79a89dbdae0750504a"
      }
    ],
    "blockNumber": 25530272,
    "cumulativeGasUsed": "3529357",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2D11715220786490C8dA6CAC15444f250E838Eff",
    "0xa67f1C6c96CB5dD6eF24B07A77893693C210d846"
  ],
  "numDeployments": 1,
  "solcInputHash": "61c38ae61d36c4e0fe74ede913f00b14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"badgesAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArgsLengthDoesNotMatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"AttesterNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"attributeIndex\",\"type\":\"uint8\"}],\"name\":\"AttributeAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"attributeIndex\",\"type\":\"uint8\"}],\"name\":\"AttributeDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedFirstId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedLastId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FirstId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCollectionId\",\"type\":\"uint256\"}],\"name\":\"IdsMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"IssuerNotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"}],\"name\":\"OwnersAndCollectionIdsLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedArrayLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"RangeIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"ValueOutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"AttestationDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"AttestationRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"attributeIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"attributeValue\",\"type\":\"uint8\"}],\"name\":\"AttestationsCollectionAttributeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"attributeIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deletedAttributeName\",\"type\":\"bytes32\"}],\"name\":\"AttributeDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"attributeIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newAttributeName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"previousAttributeName\",\"type\":\"bytes32\"}],\"name\":\"AttributeNameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstCollectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastCollectionId\",\"type\":\"uint256\"}],\"name\":\"IssuerAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstCollectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastCollectionId\",\"type\":\"uint256\"}],\"name\":\"IssuerUnauthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"attributeIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"attributeName\",\"type\":\"bytes32\"}],\"name\":\"NewAttributeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IMPLEMENTATION_VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"attestationsCollectionHasAttribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"indices\",\"type\":\"uint8[]\"}],\"name\":\"attestationsCollectionHasAttributes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstCollectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCollectionId\",\"type\":\"uint256\"}],\"name\":\"authorizeRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct Range[]\",\"name\":\"ranges\",\"type\":\"tuple[]\"}],\"name\":\"authorizeRanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"createNewAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"indices\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"names\",\"type\":\"bytes32[]\"}],\"name\":\"createNewAttributes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"}],\"name\":\"deleteAttestations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"deleteAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"indices\",\"type\":\"uint8[]\"}],\"name\":\"deleteAttributes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAttestationData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct AttestationData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"getAttestationDataBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct AttestationData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAttestationDataTuple\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAttestationExtraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAttestationIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAttestationTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAttestationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"getAttestationValueBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getAttributeValueForAttestationsCollection\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"getAttributesNamesAndValuesForAttestationsCollection\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"indices\",\"type\":\"uint8[]\"}],\"name\":\"getAttributesValuesForAttestationsCollection\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hasAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"}],\"name\":\"recordAttestations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setAttributeValueForAttestationsCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"indices\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"values\",\"type\":\"uint8[]\"}],\"name\":\"setAttributesValuesForAttestationsCollections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstCollectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCollectionId\",\"type\":\"uint256\"}],\"name\":\"unauthorizeRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct Range[]\",\"name\":\"ranges\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rangeIndexes\",\"type\":\"uint256[]\"}],\"name\":\"unauthorizeRanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"newName\",\"type\":\"bytes32\"}],\"name\":\"updateAttributeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"indices\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"newNames\",\"type\":\"bytes32[]\"}],\"name\":\"updateAttributesName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sismo\",\"kind\":\"dev\",\"methods\":{\"attestationsCollectionHasAttribute(uint256,uint8)\":{\"details\":\"Returns whether an attestationsCollection has a specific attribute referenced by its index\",\"params\":{\"collectionId\":\"Collection Id of the targeted attestationsCollection\",\"index\":\"Index of the attribute. Can go from 0 to 63.\"}},\"authorizeRange(address,uint256,uint256)\":{\"details\":\"Authorize an issuer for a specific range\",\"params\":{\"firstCollectionId\":\"First collection Id of the range for which the issuer will be authorized\",\"issuer\":\"Issuer that will be authorized\",\"lastCollectionId\":\"Last collection Id of the range for which the issuer will be authorized\"}},\"authorizeRanges(address,(uint256,uint256)[])\":{\"details\":\"Authorize an issuer for specific ranges\",\"params\":{\"issuer\":\"Issuer that will be authorized\",\"ranges\":\"Ranges for which the issuer will be authorized\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"badgesAddress\":\"Stateless ERC1155 Badges contract\",\"owner\":\"Owner of the contract, has the right to authorize/unauthorize attestations issuers\"}},\"createNewAttribute(uint8,bytes32)\":{\"details\":\"Create a new attribute.\",\"params\":{\"index\":\"Index of the attribute. Can go from 0 to 63.\",\"name\":\"Name in bytes32 of the attribute\"}},\"deleteAttestations(address[],uint256[])\":{\"details\":\"Delete function to be called by authorized issuers\",\"params\":{\"collectionIds\":\"The collection ids of the attestations to be deleted\",\"owners\":\"The owners of the attestations to be deleted\"}},\"deleteAttribute(uint8)\":{\"details\":\"Delete an existing attribute\",\"params\":{\"index\":\"Index of the attribute. Can go from 0 to 63. The attribute must already exist\"}},\"getAttestationData(uint256,address)\":{\"details\":\"Getter of the data of a specific attestation\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"getAttestationDataBatch(uint256[],address[])\":{\"details\":\"Getter of the data of specific attestations\",\"params\":{\"collectionIds\":\"Collection identifiers of the targeted attestations\",\"owners\":\"Owners of the targeted attestations\"}},\"getAttestationDataTuple(uint256,address)\":{\"details\":\"Getter of the data of a specific attestation as tuple\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"getAttestationExtraData(uint256,address)\":{\"details\":\"Getter of the extraData of a specific attestation\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"getAttestationIssuer(uint256,address)\":{\"details\":\"Getter of the issuer of a specific attestation\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"getAttestationTimestamp(uint256,address)\":{\"details\":\"Getter of the timestamp of a specific attestation\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"getAttestationValue(uint256,address)\":{\"details\":\"Getter of the value of a specific attestation\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"getAttestationValueBatch(uint256[],address[])\":{\"details\":\"Getter of the values of specific attestations\",\"params\":{\"collectionIds\":\"Collection identifiers of the targeted attestations\",\"owners\":\"Owners of the targeted attestations\"}},\"getAttributeValueForAttestationsCollection(uint256,uint8)\":{\"details\":\"Returns the attribute's value (from 0 to 15) of an attestationsCollection\",\"params\":{\"collectionId\":\"Collection Id of the targeted attestationsCollection\",\"index\":\"Index of the attribute. Can go from 0 to 63.\"}},\"getAttributesNamesAndValuesForAttestationsCollection(uint256)\":{\"details\":\"Returns all the enabled attributes names and their values for a specific attestationsCollection\",\"params\":{\"collectionId\":\"Collection Id of the targeted attestationsCollection\"}},\"hasAttestation(uint256,address)\":{\"details\":\"Returns whether a user has an attestation from a collection\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"initialize(address)\":{\"details\":\"Initialize function, to be called by the proxy delegating calls to this implementation\",\"params\":{\"ownerAddress\":\"Owner of the contract, has the right to authorize/unauthorize attestations issuers\"}},\"isAuthorized(address,uint256)\":{\"details\":\"Returns whether a specific issuer is authorized or not to record in a specific attestations collection\",\"params\":{\"collectionId\":\"Collection Id for which the issuer will be checked\",\"issuer\":\"Issuer to be checked\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses the registry. Issuers can no longer record or delete attestations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recordAttestations((uint256,address,address,uint256,uint32,bytes)[])\":{\"details\":\"Main function to be called by authorized issuers\",\"params\":{\"attestations\":\"Attestations to be recorded (creates a new one or overrides an existing one)\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAttributeValueForAttestationsCollection(uint256,uint8,uint8)\":{\"details\":\"Set a value for an attribute of an attestationsCollection. The attribute should already be created.\",\"params\":{\"collectionId\":\"Collection Id of the targeted attestationsCollection\",\"index\":\"Index of the attribute (must be between 0 and 63)\",\"value\":\"Value of the attribute we want to set for this attestationsCollection. Can take the value 0 to 15\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unauthorizeRange(address,uint256,uint256,uint256)\":{\"details\":\"Unauthorize an issuer for a specific range\",\"params\":{\"firstCollectionId\":\"First collection Id of the range for which the issuer will be unauthorized\",\"issuer\":\"Issuer that will be unauthorized\",\"lastCollectionId\":\"Last collection Id of the range for which the issuer will be unauthorized\",\"rangeIndex\":\"Index of the range to be unauthorized\"}},\"unauthorizeRanges(address,(uint256,uint256)[],uint256[])\":{\"details\":\"Unauthorize an issuer for specific ranges\",\"params\":{\"issuer\":\"Issuer that will be unauthorized\",\"ranges\":\"Ranges for which the issuer will be unauthorized\"}},\"unpause()\":{\"details\":\"Unpauses the registry\"},\"updateAttributeName(uint8,bytes32)\":{\"details\":\"Update the name of an existing attribute\",\"params\":{\"index\":\"Index of the attribute. Can go from 0 to 63. The attribute must exist\",\"newName\":\"new name in bytes32 of the attribute\"}}},\"title\":\"Attestations Registry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address)\":{\"notice\":\"The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization.\"}},\"notice\":\"Main contract of Sismo, stores all recorded attestations in attestations collections Only authorized attestations issuers can record attestation in the registry Attesters that expect to record in the Attestations Registry must be authorized issuers For more information: https://attestations-registry.docs.sismo.io For each attestation recorded, a badge is received by the user The badge is the Non transferrable NFT representation of an attestation  Its ERC1155 contract is stateless, balances are read directly from the registry. Badge balances <=> Attestations values After the creation or update of an attestation, the registry triggers a TransferSingle event from the ERC1155 Badges contracts It enables off-chain apps such as opensea to catch the \\\"shadow mint\\\" of the badge*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/AttestationsRegistry.sol\":\"AttestationsRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/AttestationsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {IAttestationsRegistry} from './interfaces/IAttestationsRegistry.sol';\\nimport {AttestationsRegistryConfigLogic} from './libs/attestations-registry/AttestationsRegistryConfigLogic.sol';\\nimport {AttestationsRegistryState} from './libs/attestations-registry/AttestationsRegistryState.sol';\\nimport {Range, RangeUtils} from './libs/utils/RangeLib.sol';\\nimport {Attestation, AttestationData} from './libs/Structs.sol';\\nimport {IBadges} from './interfaces/IBadges.sol';\\n\\n/**\\n * @title Attestations Registry\\n * @author Sismo\\n * @notice Main contract of Sismo, stores all recorded attestations in attestations collections\\n * Only authorized attestations issuers can record attestation in the registry\\n * Attesters that expect to record in the Attestations Registry must be authorized issuers\\n * For more information: https://attestations-registry.docs.sismo.io\\n\\n * For each attestation recorded, a badge is received by the user\\n * The badge is the Non transferrable NFT representation of an attestation \\n * Its ERC1155 contract is stateless, balances are read directly from the registry. Badge balances <=> Attestations values\\n * After the creation or update of an attestation, the registry triggers a TransferSingle event from the ERC1155 Badges contracts\\n * It enables off-chain apps such as opensea to catch the \\\"shadow mint\\\" of the badge\\n **/\\ncontract AttestationsRegistry is\\n  AttestationsRegistryState,\\n  IAttestationsRegistry,\\n  AttestationsRegistryConfigLogic\\n{\\n  uint8 public constant IMPLEMENTATION_VERSION = 3;\\n  IBadges immutable BADGES;\\n\\n  /**\\n   * @dev Constructor.\\n   * @param owner Owner of the contract, has the right to authorize/unauthorize attestations issuers\\n   * @param badgesAddress Stateless ERC1155 Badges contract\\n   */\\n  constructor(address owner, address badgesAddress) {\\n    BADGES = IBadges(badgesAddress);\\n    initialize(owner);\\n  }\\n\\n  /**\\n   * @dev Initialize function, to be called by the proxy delegating calls to this implementation\\n   * @param ownerAddress Owner of the contract, has the right to authorize/unauthorize attestations issuers\\n   * @notice The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization.\\n   */\\n  function initialize(address ownerAddress) public reinitializer(IMPLEMENTATION_VERSION) {\\n    // if proxy did not setup owner yet or if called by constructor (for implem setup)\\n    if (owner() == address(0) || address(this).code.length == 0) {\\n      _transferOwnership(ownerAddress);\\n    }\\n  }\\n\\n  /**\\n   * @dev Main function to be called by authorized issuers\\n   * @param attestations Attestations to be recorded (creates a new one or overrides an existing one)\\n   */\\n  function recordAttestations(Attestation[] calldata attestations) external override whenNotPaused {\\n    address issuer = _msgSender();\\n    for (uint256 i = 0; i < attestations.length; i++) {\\n      if (!_isAuthorized(issuer, attestations[i].collectionId))\\n        revert IssuerNotAuthorized(issuer, attestations[i].collectionId);\\n\\n      uint256 previousAttestationValue = _attestationsData[attestations[i].collectionId][\\n        attestations[i].owner\\n      ].value;\\n\\n      _attestationsData[attestations[i].collectionId][attestations[i].owner] = AttestationData(\\n        attestations[i].issuer,\\n        attestations[i].value,\\n        attestations[i].timestamp,\\n        attestations[i].extraData\\n      );\\n\\n      _triggerBadgeTransferEvent(\\n        attestations[i].collectionId,\\n        attestations[i].owner,\\n        previousAttestationValue,\\n        attestations[i].value\\n      );\\n      emit AttestationRecorded(attestations[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Delete function to be called by authorized issuers\\n   * @param owners The owners of the attestations to be deleted\\n   * @param collectionIds The collection ids of the attestations to be deleted\\n   */\\n  function deleteAttestations(\\n    address[] calldata owners,\\n    uint256[] calldata collectionIds\\n  ) external override whenNotPaused {\\n    if (owners.length != collectionIds.length)\\n      revert OwnersAndCollectionIdsLengthMismatch(owners, collectionIds);\\n\\n    address issuer = _msgSender();\\n    for (uint256 i = 0; i < owners.length; i++) {\\n      AttestationData memory attestationData = _attestationsData[collectionIds[i]][owners[i]];\\n\\n      if (!_isAuthorized(issuer, collectionIds[i]))\\n        revert IssuerNotAuthorized(issuer, collectionIds[i]);\\n      delete _attestationsData[collectionIds[i]][owners[i]];\\n\\n      _triggerBadgeTransferEvent(collectionIds[i], owners[i], attestationData.value, 0);\\n\\n      emit AttestationDeleted(\\n        Attestation(\\n          collectionIds[i],\\n          owners[i],\\n          attestationData.issuer,\\n          attestationData.value,\\n          attestationData.timestamp,\\n          attestationData.extraData\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether a user has an attestation from a collection\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function hasAttestation(\\n    uint256 collectionId,\\n    address owner\\n  ) external view override returns (bool) {\\n    return _getAttestationValue(collectionId, owner) != 0;\\n  }\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationData(\\n    uint256 collectionId,\\n    address owner\\n  ) external view override returns (AttestationData memory) {\\n    return _getAttestationData(collectionId, owner);\\n  }\\n\\n  /**\\n   * @dev Getter of the value of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationValue(\\n    uint256 collectionId,\\n    address owner\\n  ) external view override returns (uint256) {\\n    return _getAttestationValue(collectionId, owner);\\n  }\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation as tuple\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationDataTuple(\\n    uint256 collectionId,\\n    address owner\\n  ) external view override returns (address, uint256, uint32, bytes memory) {\\n    AttestationData memory attestationData = _attestationsData[collectionId][owner];\\n    return (\\n      attestationData.issuer,\\n      attestationData.value,\\n      attestationData.timestamp,\\n      attestationData.extraData\\n    );\\n  }\\n\\n  /**\\n   * @dev Getter of the extraData of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationExtraData(\\n    uint256 collectionId,\\n    address owner\\n  ) external view override returns (bytes memory) {\\n    return _attestationsData[collectionId][owner].extraData;\\n  }\\n\\n  /**\\n   * @dev Getter of the issuer of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationIssuer(\\n    uint256 collectionId,\\n    address owner\\n  ) external view override returns (address) {\\n    return _attestationsData[collectionId][owner].issuer;\\n  }\\n\\n  /**\\n   * @dev Getter of the timestamp of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationTimestamp(\\n    uint256 collectionId,\\n    address owner\\n  ) external view override returns (uint32) {\\n    return _attestationsData[collectionId][owner].timestamp;\\n  }\\n\\n  /**\\n   * @dev Getter of the data of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationDataBatch(\\n    uint256[] memory collectionIds,\\n    address[] memory owners\\n  ) external view override returns (AttestationData[] memory) {\\n    AttestationData[] memory attestationsDataArray = new AttestationData[](collectionIds.length);\\n    for (uint256 i = 0; i < collectionIds.length; i++) {\\n      attestationsDataArray[i] = _getAttestationData(collectionIds[i], owners[i]);\\n    }\\n    return attestationsDataArray;\\n  }\\n\\n  /**\\n   * @dev Getter of the values of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationValueBatch(\\n    uint256[] memory collectionIds,\\n    address[] memory owners\\n  ) external view override returns (uint256[] memory) {\\n    uint256[] memory attestationsValues = new uint256[](collectionIds.length);\\n    for (uint256 i = 0; i < collectionIds.length; i++) {\\n      attestationsValues[i] = _getAttestationValue(collectionIds[i], owners[i]);\\n    }\\n    return attestationsValues;\\n  }\\n\\n  /**\\n   * @dev Function that trigger a TransferSingle event from the stateless ERC1155 Badges contract\\n   * It enables off-chain apps such as opensea to catch the \\\"shadow mints/burns\\\" of badges\\n   */\\n  function _triggerBadgeTransferEvent(\\n    uint256 badgeTokenId,\\n    address owner,\\n    uint256 previousValue,\\n    uint256 newValue\\n  ) internal {\\n    bool isGreaterValue = newValue > previousValue;\\n    address operator = address(this);\\n    address from = isGreaterValue ? address(0) : owner;\\n    address to = isGreaterValue ? owner : address(0);\\n    uint256 value = isGreaterValue ? newValue - previousValue : previousValue - newValue;\\n\\n    // if isGreaterValue is true, function triggers mint event. Otherwise triggers burn event.\\n    BADGES.triggerTransferEvent(operator, from, to, badgeTokenId, value);\\n  }\\n\\n  function _getAttestationData(\\n    uint256 collectionId,\\n    address owner\\n  ) internal view returns (AttestationData memory) {\\n    return (_attestationsData[collectionId][owner]);\\n  }\\n\\n  function _getAttestationValue(\\n    uint256 collectionId,\\n    address owner\\n  ) internal view returns (uint256) {\\n    return _attestationsData[collectionId][owner].value;\\n  }\\n}\\n\",\"keccak256\":\"0xc21afe30d8096d2bab3683ca28b2533f99f53fa20a1f2c13aa44f1d46ecb9ae6\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAttestationsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Attestation, AttestationData} from '../libs/Structs.sol';\\nimport {IAttestationsRegistryConfigLogic} from './IAttestationsRegistryConfigLogic.sol';\\n\\n/**\\n * @title IAttestationsRegistry\\n * @author Sismo\\n * @notice This is the interface of the AttestationRegistry\\n */\\ninterface IAttestationsRegistry is IAttestationsRegistryConfigLogic {\\n  error IssuerNotAuthorized(address issuer, uint256 collectionId);\\n  error OwnersAndCollectionIdsLengthMismatch(address[] owners, uint256[] collectionIds);\\n  event AttestationRecorded(Attestation attestation);\\n  event AttestationDeleted(Attestation attestation);\\n\\n  /**\\n   * @dev Main function to be called by authorized issuers\\n   * @param attestations Attestations to be recorded (creates a new one or overrides an existing one)\\n   */\\n  function recordAttestations(Attestation[] calldata attestations) external;\\n\\n  /**\\n   * @dev Delete function to be called by authorized issuers\\n   * @param owners The owners of the attestations to be deleted\\n   * @param collectionIds The collection ids of the attestations to be deleted\\n   */\\n  function deleteAttestations(address[] calldata owners, uint256[] calldata collectionIds) external;\\n\\n  /**\\n   * @dev Returns whether a user has an attestation from a collection\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function hasAttestation(uint256 collectionId, address owner) external returns (bool);\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationData(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (AttestationData memory);\\n\\n  /**\\n   * @dev Getter of the value of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationValue(uint256 collectionId, address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation as tuple\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationDataTuple(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (address, uint256, uint32, bytes memory);\\n\\n  /**\\n   * @dev Getter of the extraData of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationExtraData(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (bytes memory);\\n\\n  /**\\n   * @dev Getter of the issuer of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationIssuer(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (address);\\n\\n  /**\\n   * @dev Getter of the timestamp of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationTimestamp(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (uint32);\\n\\n  /**\\n   * @dev Getter of the data of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationDataBatch(\\n    uint256[] memory collectionIds,\\n    address[] memory owners\\n  ) external view returns (AttestationData[] memory);\\n\\n  /**\\n   * @dev Getter of the values of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationValueBatch(\\n    uint256[] memory collectionIds,\\n    address[] memory owners\\n  ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x0c3af349bcfa545c959f4d9f25aacb73e3ef1ca7cfe62a2eda4a743a6835904f\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAttestationsRegistryConfigLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Forked from, removed storage, OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.14;\\n\\nimport {Range, RangeUtils} from '../libs/utils/RangeLib.sol';\\n\\ninterface IAttestationsRegistryConfigLogic {\\n  error AttesterNotFound(address issuer);\\n  error RangeIndexOutOfBounds(address issuer, uint256 expectedArrayLength, uint256 rangeIndex);\\n  error IdsMismatch(\\n    address issuer,\\n    uint256 rangeIndex,\\n    uint256 expectedFirstId,\\n    uint256 expectedLastId,\\n    uint256 FirstId,\\n    uint256 lastCollectionId\\n  );\\n  error AttributeDoesNotExist(uint8 attributeIndex);\\n  error AttributeAlreadyExists(uint8 attributeIndex);\\n  error ArgsLengthDoesNotMatch();\\n\\n  event NewAttributeCreated(uint8 attributeIndex, bytes32 attributeName);\\n  event AttributeNameUpdated(\\n    uint8 attributeIndex,\\n    bytes32 newAttributeName,\\n    bytes32 previousAttributeName\\n  );\\n  event AttributeDeleted(uint8 attributeIndex, bytes32 deletedAttributeName);\\n\\n  event AttestationsCollectionAttributeSet(\\n    uint256 collectionId,\\n    uint8 attributeIndex,\\n    uint8 attributeValue\\n  );\\n\\n  event IssuerAuthorized(address issuer, uint256 firstCollectionId, uint256 lastCollectionId);\\n  event IssuerUnauthorized(address issuer, uint256 firstCollectionId, uint256 lastCollectionId);\\n\\n  /**\\n   * @dev Returns whether an attestationsCollection has a specific attribute referenced by its index\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   * @param index Index of the attribute. Can go from 0 to 63.\\n   */\\n  function attestationsCollectionHasAttribute(\\n    uint256 collectionId,\\n    uint8 index\\n  ) external view returns (bool);\\n\\n  function attestationsCollectionHasAttributes(\\n    uint256 collectionId,\\n    uint8[] memory indices\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the attribute's value (from 1 to 15) of an attestationsCollection\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   * @param attributeIndex Index of the attribute. Can go from 0 to 63.\\n   */\\n  function getAttributeValueForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8 attributeIndex\\n  ) external view returns (uint8);\\n\\n  function getAttributesValuesForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8[] memory indices\\n  ) external view returns (uint8[] memory);\\n\\n  /**\\n   * @dev Set a value for an attribute of an attestationsCollection. The attribute should already be created.\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   * @param index Index of the attribute (must be between 0 and 63)\\n   * @param value Value of the attribute we want to set for this attestationsCollection. Can take the value 0 to 15\\n   */\\n  function setAttributeValueForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8 index,\\n    uint8 value\\n  ) external;\\n\\n  function setAttributesValuesForAttestationsCollections(\\n    uint256[] memory collectionIds,\\n    uint8[] memory indices,\\n    uint8[] memory values\\n  ) external;\\n\\n  /**\\n   * @dev Returns all the enabled attributes names and their values for a specific attestationsCollection\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   */\\n  function getAttributesNamesAndValuesForAttestationsCollection(\\n    uint256 collectionId\\n  ) external view returns (bytes32[] memory, uint8[] memory);\\n\\n  /**\\n   * @dev Authorize an issuer for a specific range\\n   * @param issuer Issuer that will be authorized\\n   * @param firstCollectionId First collection Id of the range for which the issuer will be authorized\\n   * @param lastCollectionId Last collection Id of the range for which the issuer will be authorized\\n   */\\n  function authorizeRange(\\n    address issuer,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) external;\\n\\n  /**\\n   * @dev Unauthorize an issuer for a specific range\\n   * @param issuer Issuer that will be unauthorized\\n   * @param rangeIndex Index of the range to be unauthorized\\n   * @param firstCollectionId First collection Id of the range for which the issuer will be unauthorized\\n   * @param lastCollectionId Last collection Id of the range for which the issuer will be unauthorized\\n   */\\n  function unauthorizeRange(\\n    address issuer,\\n    uint256 rangeIndex,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) external;\\n\\n  /**\\n   * @dev Authorize an issuer for specific ranges\\n   * @param issuer Issuer that will be authorized\\n   * @param ranges Ranges for which the issuer will be authorized\\n   */\\n  function authorizeRanges(address issuer, Range[] memory ranges) external;\\n\\n  /**\\n   * @dev Unauthorize an issuer for specific ranges\\n   * @param issuer Issuer that will be unauthorized\\n   * @param ranges Ranges for which the issuer will be unauthorized\\n   */\\n  function unauthorizeRanges(\\n    address issuer,\\n    Range[] memory ranges,\\n    uint256[] memory rangeIndexes\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether a specific issuer is authorized or not to record in a specific attestations collection\\n   * @param issuer Issuer to be checked\\n   * @param collectionId Collection Id for which the issuer will be checked\\n   */\\n  function isAuthorized(address issuer, uint256 collectionId) external view returns (bool);\\n\\n  /**\\n   * @dev Pauses the registry. Issuers can no longer record or delete attestations\\n   */\\n  function pause() external;\\n\\n  /**\\n   * @dev Unpauses the registry\\n   */\\n  function unpause() external;\\n\\n  /**\\n   * @dev Create a new attribute.\\n   * @param index Index of the attribute. Can go from 0 to 63.\\n   * @param name Name in bytes32 of the attribute\\n   */\\n  function createNewAttribute(uint8 index, bytes32 name) external;\\n\\n  function createNewAttributes(uint8[] memory indices, bytes32[] memory names) external;\\n\\n  /**\\n   * @dev Update the name of an existing attribute\\n   * @param index Index of the attribute. Can go from 0 to 63. The attribute must exist\\n   * @param newName new name in bytes32 of the attribute\\n   */\\n  function updateAttributeName(uint8 index, bytes32 newName) external;\\n\\n  function updateAttributesName(uint8[] memory indices, bytes32[] memory names) external;\\n\\n  /**\\n   * @dev Delete an existing attribute\\n   * @param index Index of the attribute. Can go from 0 to 63. The attribute must exist\\n   */\\n  function deleteAttribute(uint8 index) external;\\n\\n  function deleteAttributes(uint8[] memory indices) external;\\n}\\n\",\"keccak256\":\"0x07a1a9e8d2caf1d810ba8fb760a35ce2a0ef60a76814d44881a5aa56162ce26b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IBadges.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title Interface for Badges contract\\n * @author Sismo\\n * @notice Stateless ERC1155 contract. Reads balance from the values of attestations\\n * The associated attestations registry triggers TransferSingle events from this contract\\n * It allows badge \\\"shadow mints and burns\\\" to be caught by off-chain platforms\\n */\\ninterface IBadges {\\n  error BadgesNonTransferrable();\\n\\n  /**\\n   * @dev Initializes the contract, to be called by the proxy delegating calls to this implementation\\n   * @param uri Uri for the metadata of badges\\n   * @param owner Owner of the contract, super admin, can setup roles and update the attestation registry\\n   * @notice The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization.\\n   */\\n  function initialize(string memory uri, address owner) external;\\n\\n  /**\\n   * @dev Main function of the ERC1155 badge\\n   * The balance of a user is equal to the value of the underlying attestation.\\n   * attestationCollectionId == badgeId\\n   * @param account Address to check badge balance (= value of attestation)\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n  /**\\n   * @dev Emits a TransferSingle event, so subgraphs and other off-chain apps relying on events can see badge minting/burning\\n   * can only be called by address having the EVENT_TRIGGERER_ROLE (attestations registry address)\\n   * @param operator who is calling the TransferEvent\\n   * @param from address(0) if minting, address of the badge holder if burning\\n   * @param to address of the badge holder is minting, address(0) if burning\\n   * @param id badgeId for which to trigger the event\\n   * @param value minted/burned balance\\n   */\\n  function triggerTransferEvent(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @dev Set the attestations registry address. Can only be called by owner (default admin)\\n   * @param attestationsRegistry new attestations registry address\\n   */\\n  function setAttestationsRegistry(address attestationsRegistry) external;\\n\\n  /**\\n   * @dev Set the URI. Can only be called by owner (default admin)\\n   * @param uri new attestations registry address\\n   */\\n  function setUri(string memory uri) external;\\n\\n  /**\\n   * @dev Getter of the attestations registry\\n   */\\n  function getAttestationsRegistry() external view returns (address);\\n\\n  /**\\n   * @dev Getter of the badge issuer\\n   * @param account Address that holds the badge\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function getBadgeIssuer(address account, uint256 id) external view returns (address);\\n\\n  /**\\n   * @dev Getter of the badge timestamp\\n   * @param account Address that holds the badge\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function getBadgeTimestamp(address account, uint256 id) external view returns (uint32);\\n\\n  /**\\n   * @dev Getter of the badge extra data (it can store nullifier and burnCount)\\n   * @param account Address that holds the badge\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function getBadgeExtraData(address account, uint256 id) external view returns (bytes memory);\\n\\n  /**\\n   * @dev Getter of the value of a specific badge attribute\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   * @param index Index of the attribute\\n   */\\n  function getAttributeValueForBadge(uint256 id, uint8 index) external view returns (uint8);\\n\\n  /**\\n   * @dev Getter of all badge attributes and their values for a specific badge\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function getAttributesNamesAndValuesForBadge(\\n    uint256 id\\n  ) external view returns (bytes32[] memory, uint8[] memory);\\n}\\n\",\"keccak256\":\"0xd6bdfc887ef15ee022eb05d89dbe2e2938ee6c0a55a55f8db527ef650242c6bb\",\"license\":\"MIT\"},\"contracts/core/libs/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title  Attestations Registry State\\n * @author Sismo\\n * @notice This contract holds all of the storage variables and data\\n *         structures used by the AttestationsRegistry and parent\\n *         contracts.\\n */\\n\\n// User Attestation Request, can be made by any user\\n// The context of an Attestation Request is a specific attester contract\\n// Each attester has groups of accounts in its available data\\n// eg: for a specific attester:\\n//     group 1 <=> accounts that sent txs on mainnet\\n//     group 2 <=> accounts that sent txs on polygon\\n// eg: for another attester:\\n//     group 1 <=> accounts that sent eth txs in 2022\\n//     group 2 <=> accounts sent eth txs in 2021\\nstruct Request {\\n  // implicit address attester;\\n  // implicit uint256 chainId;\\n  Claim[] claims;\\n  address destination; // destination that will receive the end attestation\\n}\\n\\nstruct Claim {\\n  uint256 groupId; // user claims to have an account in this group\\n  uint256 claimedValue; // user claims this value for its account in the group\\n  bytes extraData; // arbitrary data, may be required by the attester to verify claims or generate a specific attestation\\n}\\n\\n/**\\n * @dev Attestation Struct. This is the struct receive as argument by the Attestation Registry.\\n * @param collectionId Attestation collection\\n * @param owner Attestation collection\\n * @param issuer Attestation collection\\n * @param value Attestation collection\\n * @param timestamp Attestation collection\\n * @param extraData Attestation collection\\n */\\nstruct Attestation {\\n  // implicit uint256 chainId;\\n  uint256 collectionId; // Id of the attestation collection (in the registry)\\n  address owner; // Owner of the attestation\\n  address issuer; // Contract that created or last updated the record.\\n  uint256 value; // Value of the attestation\\n  uint32 timestamp; // Timestamp chosen by the attester, should correspond to the effective date of the attestation\\n  // it is different from the recording timestamp (date when the attestation was recorded)\\n  // e.g a proof of NFT ownership may have be recorded today which is 2 month old data.\\n  bytes extraData; // arbitrary data that can be added by the attester\\n}\\n\\n// Attestation Data, stored in the registry\\n// The context is a specific owner of a specific collection\\nstruct AttestationData {\\n  // implicit uint256 chainId\\n  // implicit uint256 collectionId - from context\\n  // implicit owner\\n  address issuer; // Address of the contract that recorded the attestation\\n  uint256 value; // Value of the attestation\\n  uint32 timestamp; // Effective date of issuance of the attestation. (can be different from the recording timestamp)\\n  bytes extraData; // arbitrary data that can be added by the attester\\n}\\n\",\"keccak256\":\"0x893d9a10429878dd4077388ff4da954c20b86a3c172a7bbdd10a01eb5d39b6a0\",\"license\":\"MIT\"},\"contracts/core/libs/attestations-registry/AttestationsRegistryConfigLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Forked from, removed storage, OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.14;\\n\\nimport './OwnableLogic.sol';\\nimport './PausableLogic.sol';\\nimport './InitializableLogic.sol';\\nimport './AttestationsRegistryState.sol';\\nimport {IAttestationsRegistryConfigLogic} from './../../interfaces/IAttestationsRegistryConfigLogic.sol';\\nimport {Range, RangeUtils} from '../utils/RangeLib.sol';\\nimport {Bitmap256Bit} from '../utils/Bitmap256Bit.sol';\\n\\n/**\\n * @title Attestations Registry Config Logic contract\\n * @author Sismo\\n * @notice Holds the logic of how to authorize/ unauthorize issuers of attestations in the registry\\n **/\\ncontract AttestationsRegistryConfigLogic is\\n  AttestationsRegistryState,\\n  IAttestationsRegistryConfigLogic,\\n  OwnableLogic,\\n  PausableLogic,\\n  InitializableLogic\\n{\\n  using RangeUtils for Range[];\\n  using Bitmap256Bit for uint256;\\n  using Bitmap256Bit for uint8;\\n\\n  /******************************************\\n   *\\n   *    ATTESTATION REGISTRY WRITE ACCESS MANAGEMENT (ISSUERS)\\n   *\\n   *****************************************/\\n\\n  /**\\n   * @dev Pauses the registry. Issuers can no longer record or delete attestations\\n   */\\n  function pause() external override onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the registry\\n   */\\n  function unpause() external override onlyOwner {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @dev Authorize an issuer for a specific range\\n   * @param issuer Issuer that will be authorized\\n   * @param firstCollectionId First collection Id of the range for which the issuer will be authorized\\n   * @param lastCollectionId Last collection Id of the range for which the issuer will be authorized\\n   */\\n  function authorizeRange(\\n    address issuer,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) external override onlyOwner {\\n    _authorizeRange(issuer, firstCollectionId, lastCollectionId);\\n  }\\n\\n  /**\\n   * @dev Unauthorize an issuer for a specific range\\n   * @param issuer Issuer that will be unauthorized\\n   * @param rangeIndex Index of the range to be unauthorized\\n   * @param firstCollectionId First collection Id of the range for which the issuer will be unauthorized\\n   * @param lastCollectionId Last collection Id of the range for which the issuer will be unauthorized\\n   */\\n  function unauthorizeRange(\\n    address issuer,\\n    uint256 rangeIndex,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) external override onlyOwner {\\n    _unauthorizeRange(issuer, rangeIndex, firstCollectionId, lastCollectionId);\\n  }\\n\\n  /**\\n   * @dev Authorize an issuer for specific ranges\\n   * @param issuer Issuer that will be authorized\\n   * @param ranges Ranges for which the issuer will be authorized\\n   */\\n  function authorizeRanges(address issuer, Range[] memory ranges) external override onlyOwner {\\n    for (uint256 i = 0; i < ranges.length; i++) {\\n      _authorizeRange(issuer, ranges[i].min, ranges[i].max);\\n    }\\n  }\\n\\n  /**\\n   * @dev Unauthorize an issuer for specific ranges\\n   * @param issuer Issuer that will be unauthorized\\n   * @param ranges Ranges for which the issuer will be unauthorized\\n   */\\n  function unauthorizeRanges(\\n    address issuer,\\n    Range[] memory ranges,\\n    uint256[] memory rangeIndexes\\n  ) external override onlyOwner {\\n    for (uint256 i = 0; i < rangeIndexes.length; i++) {\\n      _unauthorizeRange(issuer, rangeIndexes[i] - i, ranges[i].min, ranges[i].max);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether a specific issuer is authorized or not to record in a specific attestations collection\\n   * @param issuer Issuer to be checked\\n   * @param collectionId Collection Id for which the issuer will be checked\\n   */\\n  function isAuthorized(address issuer, uint256 collectionId) external view returns (bool) {\\n    return _isAuthorized(issuer, collectionId);\\n  }\\n\\n  /******************************************\\n   *\\n   *    ATTRIBUTES CONFIG LOGIC\\n   *\\n   *****************************************/\\n\\n  /**\\n   * @dev Create a new attribute.\\n   * @param index Index of the attribute. Can go from 0 to 63.\\n   * @param name Name in bytes32 of the attribute\\n   */\\n  function createNewAttribute(uint8 index, bytes32 name) public onlyOwner {\\n    index._checkIndexIsValid();\\n    if (_isAttributeCreated(index)) {\\n      revert AttributeAlreadyExists(index);\\n    }\\n    _createNewAttribute(index, name);\\n  }\\n\\n  function createNewAttributes(uint8[] memory indices, bytes32[] memory names) external onlyOwner {\\n    if (indices.length != names.length) {\\n      revert ArgsLengthDoesNotMatch();\\n    }\\n\\n    for (uint256 i = 0; i < indices.length; i++) {\\n      createNewAttribute(indices[i], names[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Update the name of an existing attribute\\n   * @param index Index of the attribute. Can go from 0 to 63. The attribute must exist\\n   * @param newName new name in bytes32 of the attribute\\n   */\\n  function updateAttributeName(uint8 index, bytes32 newName) public onlyOwner {\\n    index._checkIndexIsValid();\\n    if (!_isAttributeCreated(index)) {\\n      revert AttributeDoesNotExist(index);\\n    }\\n    _updateAttributeName(index, newName);\\n  }\\n\\n  function updateAttributesName(\\n    uint8[] memory indices,\\n    bytes32[] memory newNames\\n  ) external onlyOwner {\\n    if (indices.length != newNames.length) {\\n      revert ArgsLengthDoesNotMatch();\\n    }\\n\\n    for (uint256 i = 0; i < indices.length; i++) {\\n      updateAttributeName(indices[i], newNames[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Delete an existing attribute\\n   * @param index Index of the attribute. Can go from 0 to 63. The attribute must already exist\\n   */\\n  function deleteAttribute(uint8 index) public onlyOwner {\\n    index._checkIndexIsValid();\\n    if (!_isAttributeCreated(index)) {\\n      revert AttributeDoesNotExist(index);\\n    }\\n    _deleteAttribute(index);\\n  }\\n\\n  function deleteAttributes(uint8[] memory indices) external onlyOwner {\\n    for (uint256 i = 0; i < indices.length; i++) {\\n      deleteAttribute(indices[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Set a value for an attribute of an attestationsCollection. The attribute should already be created.\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   * @param index Index of the attribute (must be between 0 and 63)\\n   * @param value Value of the attribute we want to set for this attestationsCollection. Can take the value 0 to 15\\n   */\\n  function setAttributeValueForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8 index,\\n    uint8 value\\n  ) public onlyOwner {\\n    index._checkIndexIsValid();\\n\\n    if (!_isAttributeCreated(index)) {\\n      revert AttributeDoesNotExist(index);\\n    }\\n\\n    _setAttributeForAttestationsCollection(collectionId, index, value);\\n  }\\n\\n  function setAttributesValuesForAttestationsCollections(\\n    uint256[] memory collectionIds,\\n    uint8[] memory indices,\\n    uint8[] memory values\\n  ) external onlyOwner {\\n    if (collectionIds.length != indices.length || collectionIds.length != values.length) {\\n      revert ArgsLengthDoesNotMatch();\\n    }\\n    for (uint256 i = 0; i < collectionIds.length; i++) {\\n      setAttributeValueForAttestationsCollection(collectionIds[i], indices[i], values[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the attribute's value (from 0 to 15) of an attestationsCollection\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   * @param index Index of the attribute. Can go from 0 to 63.\\n   */\\n  function getAttributeValueForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8 index\\n  ) public view returns (uint8) {\\n    uint256 currentAttributesValues = _getAttributesValuesBitmapForAttestationsCollection(\\n      collectionId\\n    );\\n    return currentAttributesValues._get(index);\\n  }\\n\\n  function getAttributesValuesForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8[] memory indices\\n  ) external view returns (uint8[] memory) {\\n    uint8[] memory attributesValues = new uint8[](indices.length);\\n    for (uint256 i = 0; i < indices.length; i++) {\\n      attributesValues[i] = getAttributeValueForAttestationsCollection(collectionId, indices[i]);\\n    }\\n    return attributesValues;\\n  }\\n\\n  /**\\n   * @dev Returns whether an attestationsCollection has a specific attribute referenced by its index\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   * @param index Index of the attribute. Can go from 0 to 63.\\n   */\\n  function attestationsCollectionHasAttribute(\\n    uint256 collectionId,\\n    uint8 index\\n  ) public view returns (bool) {\\n    uint256 currentAttributeValues = _getAttributesValuesBitmapForAttestationsCollection(\\n      collectionId\\n    );\\n    return currentAttributeValues._get(index) > 0;\\n  }\\n\\n  function attestationsCollectionHasAttributes(\\n    uint256 collectionId,\\n    uint8[] memory indices\\n  ) external view returns (bool) {\\n    for (uint256 i = 0; i < indices.length; i++) {\\n      if (!attestationsCollectionHasAttribute(collectionId, indices[i])) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Returns all the enabled attributes names and their values for a specific attestationsCollection\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   */\\n  function getAttributesNamesAndValuesForAttestationsCollection(\\n    uint256 collectionId\\n  ) public view returns (bytes32[] memory, uint8[] memory) {\\n    uint256 currentAttributesValues = _getAttributesValuesBitmapForAttestationsCollection(\\n      collectionId\\n    );\\n\\n    (\\n      uint8[] memory indices,\\n      uint8[] memory values,\\n      uint8 nbOfNonZeroValues\\n    ) = currentAttributesValues._getAllNonZeroValues();\\n\\n    bytes32[] memory attributesNames = new bytes32[](nbOfNonZeroValues);\\n    uint8[] memory attributesValues = new uint8[](nbOfNonZeroValues);\\n    for (uint8 i = 0; i < nbOfNonZeroValues; i++) {\\n      attributesNames[i] = _attributesNames[indices[i]];\\n      attributesValues[i] = values[i];\\n    }\\n\\n    return (attributesNames, attributesValues);\\n  }\\n\\n  /*****************************\\n   *\\n   *      INTERNAL FUNCTIONS\\n   *\\n   *****************************/\\n\\n  function _authorizeRange(\\n    address issuer,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) internal {\\n    Range memory newRange = Range(firstCollectionId, lastCollectionId);\\n    _authorizedRanges[issuer].push(newRange);\\n    emit IssuerAuthorized(issuer, firstCollectionId, lastCollectionId);\\n  }\\n\\n  function _unauthorizeRange(\\n    address issuer,\\n    uint256 rangeIndex,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) internal onlyOwner {\\n    if (rangeIndex >= _authorizedRanges[issuer].length)\\n      revert RangeIndexOutOfBounds(issuer, _authorizedRanges[issuer].length, rangeIndex);\\n\\n    uint256 expectedFirstId = _authorizedRanges[issuer][rangeIndex].min;\\n    uint256 expectedLastId = _authorizedRanges[issuer][rangeIndex].max;\\n    if (firstCollectionId != expectedFirstId || lastCollectionId != expectedLastId)\\n      revert IdsMismatch(\\n        issuer,\\n        rangeIndex,\\n        expectedFirstId,\\n        expectedLastId,\\n        firstCollectionId,\\n        lastCollectionId\\n      );\\n\\n    _authorizedRanges[issuer][rangeIndex] = _authorizedRanges[issuer][\\n      _authorizedRanges[issuer].length - 1\\n    ];\\n    _authorizedRanges[issuer].pop();\\n    emit IssuerUnauthorized(issuer, firstCollectionId, lastCollectionId);\\n  }\\n\\n  function _isAuthorized(address issuer, uint256 collectionId) internal view returns (bool) {\\n    return _authorizedRanges[issuer]._includes(collectionId);\\n  }\\n\\n  function _setAttributeForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8 index,\\n    uint8 value\\n  ) internal {\\n    uint256 currentAttributes = _getAttributesValuesBitmapForAttestationsCollection(collectionId);\\n\\n    _attestationsCollectionAttributesValuesBitmap[collectionId] = currentAttributes._set(\\n      index,\\n      value\\n    );\\n\\n    emit AttestationsCollectionAttributeSet(collectionId, index, value);\\n  }\\n\\n  function _createNewAttribute(uint8 index, bytes32 name) internal {\\n    _attributesNames[index] = name;\\n\\n    emit NewAttributeCreated(index, name);\\n  }\\n\\n  function _updateAttributeName(uint8 index, bytes32 newName) internal {\\n    bytes32 previousName = _attributesNames[index];\\n\\n    _attributesNames[index] = newName;\\n\\n    emit AttributeNameUpdated(index, newName, previousName);\\n  }\\n\\n  function _deleteAttribute(uint8 index) internal {\\n    bytes32 deletedName = _attributesNames[index];\\n\\n    delete _attributesNames[index];\\n\\n    emit AttributeDeleted(index, deletedName);\\n  }\\n\\n  function _getAttributesValuesBitmapForAttestationsCollection(\\n    uint256 collectionId\\n  ) internal view returns (uint256) {\\n    return _attestationsCollectionAttributesValuesBitmap[collectionId];\\n  }\\n\\n  function _isAttributeCreated(uint8 index) internal view returns (bool) {\\n    if (_attributesNames[index] == 0) {\\n      return false;\\n    }\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xa48b3131a3870684389282cb863a34734c67194d7f50d266ed8421114b3d786a\",\"license\":\"MIT\"},\"contracts/core/libs/attestations-registry/AttestationsRegistryState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Range} from '../utils/RangeLib.sol';\\nimport {Attestation, AttestationData} from '../Structs.sol';\\n\\ncontract AttestationsRegistryState {\\n  /*******************************************************\\n    Storage layout:\\n    19 slots for config\\n      4 currently used for _initialized, _initializing, _paused, _owner\\n      15 place holders\\n    16 slots for logic\\n      3 currently used for _authorizedRanges, _attestationsCollectionAttributesValuesBitmap, _attributesNames\\n      13 place holders\\n    1 slot for _attestationsData \\n  *******************************************************/\\n\\n  // main config\\n  // changed `_initialized` from bool to uint8\\n  // as we were using OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n  // and changed to OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n  // PR: https://github.com/sismo-core/sismo-protocol/pull/41\\n  uint8 internal _initialized;\\n  bool internal _initializing;\\n  bool internal _paused;\\n  address internal _owner;\\n  // keeping some space for future\\n  uint256[15] private _placeHoldersAdmin;\\n\\n  // storing the authorized ranges for each attesters\\n  mapping(address => Range[]) internal _authorizedRanges;\\n  // Storing the attributes values used for each attestations collection\\n  // Each attribute value is an hexadecimal\\n  mapping(uint256 => uint256) internal _attestationsCollectionAttributesValuesBitmap;\\n  // Storing the attribute name for each attributes index\\n  mapping(uint8 => bytes32) internal _attributesNames;\\n  // keeping some space for future\\n  uint256[13] private _placeHoldersConfig;\\n  // storing the data of attestations\\n  // =collectionId=> =owner=> attestationData\\n  mapping(uint256 => mapping(address => AttestationData)) internal _attestationsData;\\n}\\n\",\"keccak256\":\"0xabd7a629901a128cc32f80102ce06db228a76bd04f27818ccaf54827921eb149\",\"license\":\"MIT\"},\"contracts/core/libs/attestations-registry/InitializableLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n// Forked from, removed storage, OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.14;\\n\\nimport '../utils/Address.sol';\\nimport './AttestationsRegistryState.sol';\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract InitializableLogic is AttestationsRegistryState {\\n  // only diff with oz\\n  // /**\\n  //  * @dev Indicates that the contract has been initialized.\\n  //  */\\n  // bool private _initialized;\\n\\n  // /**\\n  //  * @dev Indicates that the contract is in the process of being initialized.\\n  //  */\\n  // bool private _initializing;\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(uint8 version);\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts.\\n   *\\n   * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n   * constructor.\\n   *\\n   * Emits an {Initialized} event.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) ||\\n        (!Address.isContract(address(this)) && _initialized == 1),\\n      'Initializable: contract is already initialized'\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n      emit Initialized(1);\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n   * are added through upgrades and that require initialization.\\n   *\\n   * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n   * cannot be nested. If one is invoked in the context of another, execution will revert.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   *\\n   * WARNING: setting the version to 255 will prevent any future reinitialization.\\n   *\\n   * Emits an {Initialized} event.\\n   */\\n  modifier reinitializer(uint8 version) {\\n    require(\\n      !_initializing && _initialized < version,\\n      'Initializable: contract is already initialized'\\n    );\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n    emit Initialized(version);\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, 'Initializable: contract is not initializing');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   *\\n   * Emits an {Initialized} event the first time it is successfully executed.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, 'Initializable: contract is initializing');\\n    if (_initialized < type(uint8).max) {\\n      _initialized = type(uint8).max;\\n      emit Initialized(type(uint8).max);\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function that returns the initialized version. Returns `_initialized`\\n   */\\n  function _getInitializedVersion() internal view returns (uint8) {\\n    return _initialized;\\n  }\\n\\n  /**\\n   * @dev Internal function that returns the initialized version. Returns `_initializing`\\n   */\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0x64d931c5e29318bd4ae2ec44b3be45783ad7ad20431594bbcb9ae4e2014bc5ef\",\"license\":\"MIT\"},\"contracts/core/libs/attestations-registry/OwnableLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Forked from, removed storage, OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.14;\\n\\nimport '../utils/Context.sol';\\nimport './AttestationsRegistryState.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableLogic is Context, AttestationsRegistryState {\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  // This is the only diff with OZ contract\\n  // address private _owner;\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0x74ff8ebdd6ad706a45354f1045ef623840aa1dbde37874dde2b6bfa498e0bdb3\",\"license\":\"MIT\"},\"contracts/core/libs/attestations-registry/PausableLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Forked from, removed storage, OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.14;\\n\\nimport '../utils/Context.sol';\\nimport './AttestationsRegistryState.sol';\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableLogic is Context, AttestationsRegistryState {\\n  /**\\n   * @dev Emitted when the pause is triggered by `account`.\\n   */\\n  event Paused(address account);\\n\\n  /**\\n   * @dev Emitted when the pause is lifted by `account`.\\n   */\\n  event Unpaused(address account);\\n\\n  // this is the only diff with OZ contract\\n  // bool private _paused;\\n\\n  /**\\n   * @dev Initializes the contract in unpaused state.\\n   */\\n  constructor() {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @dev Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view virtual returns (bool) {\\n    return _paused;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), 'Pausable: paused');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), 'Pausable: not paused');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Triggers stopped state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _pause() internal virtual whenNotPaused {\\n    _paused = true;\\n    emit Paused(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns to normal state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  function _unpause() internal virtual whenPaused {\\n    _paused = false;\\n    emit Unpaused(_msgSender());\\n  }\\n}\\n\",\"keccak256\":\"0x234c48f5eb48bb15b6c2535428f1e28e172bc2c6fbf58c99ba7b3ca75e884c60\",\"license\":\"MIT\"},\"contracts/core/libs/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, 'Address: low-level call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\\n    require(isContract(target), 'Address: call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data\\n  ) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), 'Address: static call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: delegate call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xdbca640e165333604a6121b07d206eea2b596dd3c3bb4d62caa436a05ac1d91d\",\"license\":\"MIT\"},\"contracts/core/libs/utils/Bitmap256Bit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/*\\n * The 256-bit bitmap is structured in 64 chuncks of 4 bits each.\\n * The 4 bits can encode any value from 0 to 15.\\n\\n    chunck63            chunck2      chunck1      chunck0\\n    bits                bits         bits         bits \\n   \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510      \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n   \\u2502 1  1  1  1 \\u2502 .... \\u2502 1  0  1  1 \\u2502 0  0  0  0 \\u2502 0  0  0  1 \\u2502\\n   \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518      \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n      value 15            value 11     value 0      value 1\\n\\n  * A chunck index must be between 0 and 63.\\n  * A value must be between 0 and 15.\\n **/\\n\\nlibrary Bitmap256Bit {\\n  uint256 constant MAX_INT = 2 ** 256 - 1;\\n\\n  error IndexOutOfBounds(uint8 index);\\n  error ValueOutOfBounds(uint8 value);\\n\\n  /**\\n   * @dev Return the value at a given index of a 256-bit bitmap\\n   * @param index index where the value can be found. Can be between 0 and 63\\n   */\\n  function _get(uint256 self, uint8 index) internal pure returns (uint8) {\\n    uint256 currentValues = self;\\n    // Get the encoded 4-bit value by right shifting to the `index` position\\n    uint256 shifted = currentValues >> (4 * index);\\n    // Get the value by only masking the last 4 bits with an AND operator\\n    return uint8(shifted & (2 ** 4 - 1));\\n  }\\n\\n  /**\\n   * @dev Set a value at a chosen index in a 256-bit bitmap\\n   * @param index index where the value will be stored. Can be between 0 and 63\\n   * @param value value to store. Can be between 0 and 15\\n   */\\n  function _set(uint256 self, uint8 index, uint8 value) internal pure returns (uint256) {\\n    _checkIndexIsValid(index);\\n    _checkValueIsValid(value);\\n\\n    uint256 currentValues = self;\\n    // 1. first we need to remove the current value for the inputed `index`\\n    // Left Shift 4 bits mask (1111 mask) to the `index` position\\n    uint256 mask = (2 ** 4 - 1) << (4 * index);\\n    // Apply a XOR operation to obtain a mask with all bits set to 1 except the 4 bits that we want to remove\\n    uint256 negativeMask = MAX_INT ^ mask;\\n    // Apply a AND operation between the current values and the negative mask to remove the wanted bits\\n    uint256 newValues = currentValues & negativeMask;\\n\\n    // 2. We set the new value wanted at the `index` position\\n    // Create the 4 bits encoding the new value and left shift them to the `index` position\\n    uint256 newValueMask = uint256(value) << (4 * index);\\n    // Apply an OR operation between the current values and the newValueMask to reference new value\\n    return newValues | newValueMask;\\n  }\\n\\n  /**\\n   * @dev Get all the non-zero values in a 256-bit bitmap\\n   * @param self a 256-bit bitmap\\n   */\\n  function _getAllNonZeroValues(\\n    uint256 self\\n  ) internal pure returns (uint8[] memory, uint8[] memory, uint8) {\\n    uint8[] memory indices = new uint8[](64);\\n    uint8[] memory values = new uint8[](64);\\n    uint8 nbOfNonZeroValues = 0;\\n    for (uint8 i = 0; i < 63; i++) {\\n      uint8 value = _get(self, i);\\n      if (value > 0) {\\n        indices[nbOfNonZeroValues] = i;\\n        values[nbOfNonZeroValues] = value;\\n        nbOfNonZeroValues++;\\n      }\\n    }\\n    return (indices, values, nbOfNonZeroValues);\\n  }\\n\\n  /**\\n   * @dev Check if the index is valid (is between 0 and 63)\\n   * @param index index of a chunck\\n   */\\n  function _checkIndexIsValid(uint8 index) internal pure {\\n    if (index > 63) {\\n      revert IndexOutOfBounds(index);\\n    }\\n  }\\n\\n  /**\\n   * @dev Check if the value is valid (is between 0 and 15)\\n   * @param value value to encode in a chunck\\n   */\\n  function _checkValueIsValid(uint8 value) internal pure {\\n    if (value > 15) {\\n      revert ValueOutOfBounds(value);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xac6ca38e106fb9e999b0c765dba0f8894697c3aead9459ffeab6b32e3560b39e\",\"license\":\"MIT\"},\"contracts/core/libs/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.14;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xe2dba7215628ceb3bb6f28422c7ca48d79615dd7aa8ba54978d4d8cad996f57e\",\"license\":\"MIT\"},\"contracts/core/libs/utils/RangeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nstruct Range {\\n  uint256 min;\\n  uint256 max;\\n}\\n\\n// Range [0;3] includees 0 and 3\\nlibrary RangeUtils {\\n  function _includes(Range[] storage ranges, uint256 collectionId) internal view returns (bool) {\\n    for (uint256 i = 0; i < ranges.length; i++) {\\n      if (collectionId >= ranges[i].min && collectionId <= ranges[i].max) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0x8f04a81575ba69887b302887d4ffbd8eb6f3d9d1a7be920e5478c95b30890ce1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Sismo",
    "kind": "dev",
    "methods": {
      "attestationsCollectionHasAttribute(uint256,uint8)": {
        "details": "Returns whether an attestationsCollection has a specific attribute referenced by its index",
        "params": {
          "collectionId": "Collection Id of the targeted attestationsCollection",
          "index": "Index of the attribute. Can go from 0 to 63."
        }
      },
      "authorizeRange(address,uint256,uint256)": {
        "details": "Authorize an issuer for a specific range",
        "params": {
          "firstCollectionId": "First collection Id of the range for which the issuer will be authorized",
          "issuer": "Issuer that will be authorized",
          "lastCollectionId": "Last collection Id of the range for which the issuer will be authorized"
        }
      },
      "authorizeRanges(address,(uint256,uint256)[])": {
        "details": "Authorize an issuer for specific ranges",
        "params": {
          "issuer": "Issuer that will be authorized",
          "ranges": "Ranges for which the issuer will be authorized"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "badgesAddress": "Stateless ERC1155 Badges contract",
          "owner": "Owner of the contract, has the right to authorize/unauthorize attestations issuers"
        }
      },
      "createNewAttribute(uint8,bytes32)": {
        "details": "Create a new attribute.",
        "params": {
          "index": "Index of the attribute. Can go from 0 to 63.",
          "name": "Name in bytes32 of the attribute"
        }
      },
      "deleteAttestations(address[],uint256[])": {
        "details": "Delete function to be called by authorized issuers",
        "params": {
          "collectionIds": "The collection ids of the attestations to be deleted",
          "owners": "The owners of the attestations to be deleted"
        }
      },
      "deleteAttribute(uint8)": {
        "details": "Delete an existing attribute",
        "params": {
          "index": "Index of the attribute. Can go from 0 to 63. The attribute must already exist"
        }
      },
      "getAttestationData(uint256,address)": {
        "details": "Getter of the data of a specific attestation",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "getAttestationDataBatch(uint256[],address[])": {
        "details": "Getter of the data of specific attestations",
        "params": {
          "collectionIds": "Collection identifiers of the targeted attestations",
          "owners": "Owners of the targeted attestations"
        }
      },
      "getAttestationDataTuple(uint256,address)": {
        "details": "Getter of the data of a specific attestation as tuple",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "getAttestationExtraData(uint256,address)": {
        "details": "Getter of the extraData of a specific attestation",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "getAttestationIssuer(uint256,address)": {
        "details": "Getter of the issuer of a specific attestation",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "getAttestationTimestamp(uint256,address)": {
        "details": "Getter of the timestamp of a specific attestation",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "getAttestationValue(uint256,address)": {
        "details": "Getter of the value of a specific attestation",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "getAttestationValueBatch(uint256[],address[])": {
        "details": "Getter of the values of specific attestations",
        "params": {
          "collectionIds": "Collection identifiers of the targeted attestations",
          "owners": "Owners of the targeted attestations"
        }
      },
      "getAttributeValueForAttestationsCollection(uint256,uint8)": {
        "details": "Returns the attribute's value (from 0 to 15) of an attestationsCollection",
        "params": {
          "collectionId": "Collection Id of the targeted attestationsCollection",
          "index": "Index of the attribute. Can go from 0 to 63."
        }
      },
      "getAttributesNamesAndValuesForAttestationsCollection(uint256)": {
        "details": "Returns all the enabled attributes names and their values for a specific attestationsCollection",
        "params": {
          "collectionId": "Collection Id of the targeted attestationsCollection"
        }
      },
      "hasAttestation(uint256,address)": {
        "details": "Returns whether a user has an attestation from a collection",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "initialize(address)": {
        "details": "Initialize function, to be called by the proxy delegating calls to this implementation",
        "params": {
          "ownerAddress": "Owner of the contract, has the right to authorize/unauthorize attestations issuers"
        }
      },
      "isAuthorized(address,uint256)": {
        "details": "Returns whether a specific issuer is authorized or not to record in a specific attestations collection",
        "params": {
          "collectionId": "Collection Id for which the issuer will be checked",
          "issuer": "Issuer to be checked"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses the registry. Issuers can no longer record or delete attestations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recordAttestations((uint256,address,address,uint256,uint32,bytes)[])": {
        "details": "Main function to be called by authorized issuers",
        "params": {
          "attestations": "Attestations to be recorded (creates a new one or overrides an existing one)"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAttributeValueForAttestationsCollection(uint256,uint8,uint8)": {
        "details": "Set a value for an attribute of an attestationsCollection. The attribute should already be created.",
        "params": {
          "collectionId": "Collection Id of the targeted attestationsCollection",
          "index": "Index of the attribute (must be between 0 and 63)",
          "value": "Value of the attribute we want to set for this attestationsCollection. Can take the value 0 to 15"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unauthorizeRange(address,uint256,uint256,uint256)": {
        "details": "Unauthorize an issuer for a specific range",
        "params": {
          "firstCollectionId": "First collection Id of the range for which the issuer will be unauthorized",
          "issuer": "Issuer that will be unauthorized",
          "lastCollectionId": "Last collection Id of the range for which the issuer will be unauthorized",
          "rangeIndex": "Index of the range to be unauthorized"
        }
      },
      "unauthorizeRanges(address,(uint256,uint256)[],uint256[])": {
        "details": "Unauthorize an issuer for specific ranges",
        "params": {
          "issuer": "Issuer that will be unauthorized",
          "ranges": "Ranges for which the issuer will be unauthorized"
        }
      },
      "unpause()": {
        "details": "Unpauses the registry"
      },
      "updateAttributeName(uint8,bytes32)": {
        "details": "Update the name of an existing attribute",
        "params": {
          "index": "Index of the attribute. Can go from 0 to 63. The attribute must exist",
          "newName": "new name in bytes32 of the attribute"
        }
      }
    },
    "title": "Attestations Registry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address)": {
        "notice": "The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization."
      }
    },
    "notice": "Main contract of Sismo, stores all recorded attestations in attestations collections Only authorized attestations issuers can record attestation in the registry Attesters that expect to record in the Attestations Registry must be authorized issuers For more information: https://attestations-registry.docs.sismo.io For each attestation recorded, a badge is received by the user The badge is the Non transferrable NFT representation of an attestation  Its ERC1155 contract is stateless, balances are read directly from the registry. Badge balances <=> Attestations values After the creation or update of an attestation, the registry triggers a TransferSingle event from the ERC1155 Badges contracts It enables off-chain apps such as opensea to catch the \"shadow mint\" of the badge*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14389,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 14391,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 14393,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_paused",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 14395,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_owner",
        "offset": 3,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14399,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_placeHoldersAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)15_storage"
      },
      {
        "astId": 14405,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_authorizedRanges",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_struct(Range)15352_storage)dyn_storage)"
      },
      {
        "astId": 14409,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_attestationsCollectionAttributesValuesBitmap",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14413,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_attributesNames",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint8,t_bytes32)"
      },
      {
        "astId": 14417,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_placeHoldersConfig",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_uint256)13_storage"
      },
      {
        "astId": 14424,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_attestationsData",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(AttestationData)13388_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Range)15352_storage)dyn_storage": {
        "base": "t_struct(Range)15352_storage",
        "encoding": "dynamic_array",
        "label": "struct Range[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)13_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[13]",
        "numberOfBytes": "416"
      },
      "t_array(t_uint256)15_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[15]",
        "numberOfBytes": "480"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Range)15352_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Range[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Range)15352_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(AttestationData)13388_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AttestationData)",
        "numberOfBytes": "32",
        "value": "t_struct(AttestationData)13388_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(AttestationData)13388_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct AttestationData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(AttestationData)13388_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(AttestationData)13388_storage": {
        "encoding": "inplace",
        "label": "struct AttestationData",
        "members": [
          {
            "astId": 13381,
            "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
            "label": "issuer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13383,
            "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13385,
            "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 13387,
            "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
            "label": "extraData",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Range)15352_storage": {
        "encoding": "inplace",
        "label": "struct Range",
        "members": [
          {
            "astId": 15349,
            "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
            "label": "min",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15351,
            "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
            "label": "max",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}