{
  "address": "0x9470b0bf41B409dDF02CD1755E6C94D668c76Bfa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attestationsRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DifferentRequestsDestinations",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "EarlyUserAttestationGenerated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ATTESTATIONS_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IAttestationsRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EARLY_USER_BADGE_END_DATE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EARLY_USER_COLLECTION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "attesters",
          "type": "address[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "groupId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "claimedValue",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Claim[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            }
          ],
          "internalType": "struct Request[]",
          "name": "requests",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "proofDataArray",
          "type": "bytes[]"
        }
      ],
      "name": "batchBuildAttestations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[][]",
          "name": "",
          "type": "tuple[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "attesters",
          "type": "address[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "groupId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "claimedValue",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Claim[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            }
          ],
          "internalType": "struct Request[]",
          "name": "requests",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "proofDataArray",
          "type": "bytes[]"
        }
      ],
      "name": "batchGenerateAttestations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[][]",
          "name": "",
          "type": "tuple[][]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "groupId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "claimedValue",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Claim[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            }
          ],
          "internalType": "struct Request",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "proofData",
          "type": "bytes"
        }
      ],
      "name": "buildAttestations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "groupId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "claimedValue",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Claim[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            }
          ],
          "internalType": "struct Request",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "proofData",
          "type": "bytes"
        }
      ],
      "name": "generateAttestations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6cce495ec9c93e83056ca75189bbd52d85018c399e91c285264f4bcd9d673e74",
  "receipt": {
    "to": null,
    "from": "0x2D11715220786490C8dA6CAC15444f250E838Eff",
    "contractAddress": "0x9470b0bf41B409dDF02CD1755E6C94D668c76Bfa",
    "transactionIndex": 1,
    "gasUsed": "954910",
    "logsBloom": "0x
    "blockHash": "0x1519da7edbe54692d973d18f7707e4e4190778528715e92855c9abd1920e4383",
    "transactionHash": "0x6cce495ec9c93e83056ca75189bbd52d85018c399e91c285264f4bcd9d673e74",
    "logs": [],
    "blockNumber": 25530276,
    "cumulativeGasUsed": "1026228",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd0c551dA71B2c3DA65f0bA0500FA4251d26179A8"
  ],
  "numDeployments": 1,
  "solcInputHash": "61c38ae61d36c4e0fe74ede913f00b14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attestationsRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DifferentRequestsDestinations\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"EarlyUserAttestationGenerated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATTESTATIONS_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IAttestationsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EARLY_USER_BADGE_END_DATE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EARLY_USER_COLLECTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"attesters\",\"type\":\"address[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"internalType\":\"struct Request[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"proofDataArray\",\"type\":\"bytes[]\"}],\"name\":\"batchBuildAttestations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"attesters\",\"type\":\"address[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"internalType\":\"struct Request[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"proofDataArray\",\"type\":\"bytes[]\"}],\"name\":\"batchGenerateAttestations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"internalType\":\"struct Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"buildAttestations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"internalType\":\"struct Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"generateAttestations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sismo\",\"kind\":\"dev\",\"methods\":{\"batchBuildAttestations(address[],((uint256,uint256,bytes)[],address)[],bytes[])\":{\"details\":\"build the attestations from multiple user requests. Forwards to the build function of targeted attester\",\"params\":{\"attesters\":\"Targeted attesters\",\"proofDataArray\":\"Data sent along the request to prove its validity\",\"requests\":\"User requests\"},\"returns\":{\"_0\":\"attestations Attestations that will be recorded\"}},\"batchGenerateAttestations(address[],((uint256,uint256,bytes)[],address)[],bytes[])\":{\"details\":\"generate multiple attestations at once, to the same destination, generates an early user attestation\",\"params\":{\"attesters\":\"Attesters targeted by the attesters\",\"proofDataArray\":\"Data sent with each request\",\"requests\":\"Requests sent to attester\"}},\"buildAttestations(address,((uint256,uint256,bytes)[],address),bytes)\":{\"details\":\"build the attestations from a user request targeting a specific attester. Forwards to the build function of targeted attester\",\"params\":{\"attester\":\"Targeted attester\",\"proofData\":\"Data sent along the request to prove its validity\",\"request\":\"User request\"},\"returns\":{\"_0\":\"attestations Attestations that will be recorded\"}},\"constructor\":{\"details\":\"Constructor\",\"params\":{\"attestationsRegistryAddress\":\"Attestations registry contract address\"}},\"generateAttestations(address,((uint256,uint256,bytes)[],address),bytes)\":{\"details\":\"Forward a request to an attester and generates an early user attestation\",\"params\":{\"attester\":\"Attester targeted by the request\",\"proofData\":\"Data provided to the attester to back the request\",\"request\":\"Request sent to the attester\"}}},\"title\":\"Front\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is the Front contract of the Sismo protocol Behind a proxy, it routes attestations request to the targeted attester and can perform some actions This specific implementation rewards early users with a early user attestation if they used sismo before ethcc conference For more information: https://front.docs.sismo.io\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Front.sol\":\"Front\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/Front.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {IFront} from './interfaces/IFront.sol';\\nimport {IAttester} from './interfaces/IAttester.sol';\\nimport {IAttestationsRegistry} from './interfaces/IAttestationsRegistry.sol';\\nimport {Request, Attestation} from './libs/Structs.sol';\\n\\n/**\\n * @title Front\\n * @author Sismo\\n * @notice This is the Front contract of the Sismo protocol\\n * Behind a proxy, it routes attestations request to the targeted attester and can perform some actions\\n * This specific implementation rewards early users with a early user attestation if they used sismo before ethcc conference\\n\\n * For more information: https://front.docs.sismo.io\\n */\\ncontract Front is IFront {\\n  IAttestationsRegistry public immutable ATTESTATIONS_REGISTRY;\\n  uint256 public constant EARLY_USER_COLLECTION = 0;\\n  uint32 public constant EARLY_USER_BADGE_END_DATE = 1663200000; // Sept 15\\n\\n  /**\\n   * @dev Constructor\\n   * @param attestationsRegistryAddress Attestations registry contract address\\n   */\\n  constructor(address attestationsRegistryAddress) {\\n    ATTESTATIONS_REGISTRY = IAttestationsRegistry(attestationsRegistryAddress);\\n  }\\n\\n  /**\\n   * @dev Forward a request to an attester and generates an early user attestation\\n   * @param attester Attester targeted by the request\\n   * @param request Request sent to the attester\\n   * @param proofData Data provided to the attester to back the request\\n   */\\n  function generateAttestations(\\n    address attester,\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) external override returns (Attestation[] memory) {\\n    Attestation[] memory attestations = _forwardAttestationsGeneration(\\n      attester,\\n      request,\\n      proofData\\n    );\\n    _generateEarlyUserAttestation(request.destination);\\n    return attestations;\\n  }\\n\\n  /**\\n   * @dev generate multiple attestations at once, to the same destination, generates an early user attestation\\n   * @param attesters Attesters targeted by the attesters\\n   * @param requests Requests sent to attester\\n   * @param proofDataArray Data sent with each request\\n   */\\n  function batchGenerateAttestations(\\n    address[] calldata attesters,\\n    Request[] calldata requests,\\n    bytes[] calldata proofDataArray\\n  ) external override returns (Attestation[][] memory) {\\n    Attestation[][] memory attestations = new Attestation[][](attesters.length);\\n    address destination = requests[0].destination;\\n    for (uint256 i = 0; i < attesters.length; i++) {\\n      if (requests[i].destination != destination) revert DifferentRequestsDestinations();\\n      attestations[i] = _forwardAttestationsGeneration(\\n        attesters[i],\\n        requests[i],\\n        proofDataArray[i]\\n      );\\n    }\\n    _generateEarlyUserAttestation(destination);\\n    return attestations;\\n  }\\n\\n  /**\\n   * @dev build the attestations from a user request targeting a specific attester.\\n   * Forwards to the build function of targeted attester\\n   * @param attester Targeted attester\\n   * @param request User request\\n   * @param proofData Data sent along the request to prove its validity\\n   * @return attestations Attestations that will be recorded\\n   */\\n  function buildAttestations(\\n    address attester,\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) external view override returns (Attestation[] memory) {\\n    return _forwardAttestationsBuild(attester, request, proofData);\\n  }\\n\\n  /**\\n   * @dev build the attestations from multiple user requests.\\n   * Forwards to the build function of targeted attester\\n   * @param attesters Targeted attesters\\n   * @param requests User requests\\n   * @param proofDataArray Data sent along the request to prove its validity\\n   * @return attestations Attestations that will be recorded\\n   */\\n  function batchBuildAttestations(\\n    address[] calldata attesters,\\n    Request[] calldata requests,\\n    bytes[] calldata proofDataArray\\n  ) external view override returns (Attestation[][] memory) {\\n    Attestation[][] memory attestations = new Attestation[][](attesters.length);\\n\\n    for (uint256 i = 0; i < attesters.length; i++) {\\n      attestations[i] = _forwardAttestationsBuild(attesters[i], requests[i], proofDataArray[i]);\\n    }\\n    return attestations;\\n  }\\n\\n  function _forwardAttestationsBuild(\\n    address attester,\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) internal view returns (Attestation[] memory) {\\n    return IAttester(attester).buildAttestations(request, proofData);\\n  }\\n\\n  function _forwardAttestationsGeneration(\\n    address attester,\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) internal returns (Attestation[] memory) {\\n    return IAttester(attester).generateAttestations(request, proofData);\\n  }\\n\\n  function _generateEarlyUserAttestation(address destination) internal {\\n    uint32 currentTimestamp = uint32(block.timestamp);\\n    if (currentTimestamp < EARLY_USER_BADGE_END_DATE) {\\n      bool alreadyHasAttestation = ATTESTATIONS_REGISTRY.hasAttestation(\\n        EARLY_USER_COLLECTION,\\n        destination\\n      );\\n\\n      if (!alreadyHasAttestation) {\\n        Attestation[] memory attestations = new Attestation[](1);\\n        attestations[0] = Attestation(\\n          EARLY_USER_COLLECTION,\\n          destination,\\n          address(this),\\n          1,\\n          currentTimestamp,\\n          'With strong love from Sismo'\\n        );\\n        ATTESTATIONS_REGISTRY.recordAttestations(attestations);\\n        emit EarlyUserAttestationGenerated(destination);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3ea2112c22a36ff318873f1f015fa9e3b447e93d33464ae81b9bcd7d0f917621\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAttestationsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Attestation, AttestationData} from '../libs/Structs.sol';\\nimport {IAttestationsRegistryConfigLogic} from './IAttestationsRegistryConfigLogic.sol';\\n\\n/**\\n * @title IAttestationsRegistry\\n * @author Sismo\\n * @notice This is the interface of the AttestationRegistry\\n */\\ninterface IAttestationsRegistry is IAttestationsRegistryConfigLogic {\\n  error IssuerNotAuthorized(address issuer, uint256 collectionId);\\n  error OwnersAndCollectionIdsLengthMismatch(address[] owners, uint256[] collectionIds);\\n  event AttestationRecorded(Attestation attestation);\\n  event AttestationDeleted(Attestation attestation);\\n\\n  /**\\n   * @dev Main function to be called by authorized issuers\\n   * @param attestations Attestations to be recorded (creates a new one or overrides an existing one)\\n   */\\n  function recordAttestations(Attestation[] calldata attestations) external;\\n\\n  /**\\n   * @dev Delete function to be called by authorized issuers\\n   * @param owners The owners of the attestations to be deleted\\n   * @param collectionIds The collection ids of the attestations to be deleted\\n   */\\n  function deleteAttestations(address[] calldata owners, uint256[] calldata collectionIds) external;\\n\\n  /**\\n   * @dev Returns whether a user has an attestation from a collection\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function hasAttestation(uint256 collectionId, address owner) external returns (bool);\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationData(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (AttestationData memory);\\n\\n  /**\\n   * @dev Getter of the value of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationValue(uint256 collectionId, address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation as tuple\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationDataTuple(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (address, uint256, uint32, bytes memory);\\n\\n  /**\\n   * @dev Getter of the extraData of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationExtraData(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (bytes memory);\\n\\n  /**\\n   * @dev Getter of the issuer of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationIssuer(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (address);\\n\\n  /**\\n   * @dev Getter of the timestamp of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationTimestamp(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (uint32);\\n\\n  /**\\n   * @dev Getter of the data of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationDataBatch(\\n    uint256[] memory collectionIds,\\n    address[] memory owners\\n  ) external view returns (AttestationData[] memory);\\n\\n  /**\\n   * @dev Getter of the values of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationValueBatch(\\n    uint256[] memory collectionIds,\\n    address[] memory owners\\n  ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x0c3af349bcfa545c959f4d9f25aacb73e3ef1ca7cfe62a2eda4a743a6835904f\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAttestationsRegistryConfigLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Forked from, removed storage, OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.14;\\n\\nimport {Range, RangeUtils} from '../libs/utils/RangeLib.sol';\\n\\ninterface IAttestationsRegistryConfigLogic {\\n  error AttesterNotFound(address issuer);\\n  error RangeIndexOutOfBounds(address issuer, uint256 expectedArrayLength, uint256 rangeIndex);\\n  error IdsMismatch(\\n    address issuer,\\n    uint256 rangeIndex,\\n    uint256 expectedFirstId,\\n    uint256 expectedLastId,\\n    uint256 FirstId,\\n    uint256 lastCollectionId\\n  );\\n  error AttributeDoesNotExist(uint8 attributeIndex);\\n  error AttributeAlreadyExists(uint8 attributeIndex);\\n  error ArgsLengthDoesNotMatch();\\n\\n  event NewAttributeCreated(uint8 attributeIndex, bytes32 attributeName);\\n  event AttributeNameUpdated(\\n    uint8 attributeIndex,\\n    bytes32 newAttributeName,\\n    bytes32 previousAttributeName\\n  );\\n  event AttributeDeleted(uint8 attributeIndex, bytes32 deletedAttributeName);\\n\\n  event AttestationsCollectionAttributeSet(\\n    uint256 collectionId,\\n    uint8 attributeIndex,\\n    uint8 attributeValue\\n  );\\n\\n  event IssuerAuthorized(address issuer, uint256 firstCollectionId, uint256 lastCollectionId);\\n  event IssuerUnauthorized(address issuer, uint256 firstCollectionId, uint256 lastCollectionId);\\n\\n  /**\\n   * @dev Returns whether an attestationsCollection has a specific attribute referenced by its index\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   * @param index Index of the attribute. Can go from 0 to 63.\\n   */\\n  function attestationsCollectionHasAttribute(\\n    uint256 collectionId,\\n    uint8 index\\n  ) external view returns (bool);\\n\\n  function attestationsCollectionHasAttributes(\\n    uint256 collectionId,\\n    uint8[] memory indices\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the attribute's value (from 1 to 15) of an attestationsCollection\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   * @param attributeIndex Index of the attribute. Can go from 0 to 63.\\n   */\\n  function getAttributeValueForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8 attributeIndex\\n  ) external view returns (uint8);\\n\\n  function getAttributesValuesForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8[] memory indices\\n  ) external view returns (uint8[] memory);\\n\\n  /**\\n   * @dev Set a value for an attribute of an attestationsCollection. The attribute should already be created.\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   * @param index Index of the attribute (must be between 0 and 63)\\n   * @param value Value of the attribute we want to set for this attestationsCollection. Can take the value 0 to 15\\n   */\\n  function setAttributeValueForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8 index,\\n    uint8 value\\n  ) external;\\n\\n  function setAttributesValuesForAttestationsCollections(\\n    uint256[] memory collectionIds,\\n    uint8[] memory indices,\\n    uint8[] memory values\\n  ) external;\\n\\n  /**\\n   * @dev Returns all the enabled attributes names and their values for a specific attestationsCollection\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   */\\n  function getAttributesNamesAndValuesForAttestationsCollection(\\n    uint256 collectionId\\n  ) external view returns (bytes32[] memory, uint8[] memory);\\n\\n  /**\\n   * @dev Authorize an issuer for a specific range\\n   * @param issuer Issuer that will be authorized\\n   * @param firstCollectionId First collection Id of the range for which the issuer will be authorized\\n   * @param lastCollectionId Last collection Id of the range for which the issuer will be authorized\\n   */\\n  function authorizeRange(\\n    address issuer,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) external;\\n\\n  /**\\n   * @dev Unauthorize an issuer for a specific range\\n   * @param issuer Issuer that will be unauthorized\\n   * @param rangeIndex Index of the range to be unauthorized\\n   * @param firstCollectionId First collection Id of the range for which the issuer will be unauthorized\\n   * @param lastCollectionId Last collection Id of the range for which the issuer will be unauthorized\\n   */\\n  function unauthorizeRange(\\n    address issuer,\\n    uint256 rangeIndex,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) external;\\n\\n  /**\\n   * @dev Authorize an issuer for specific ranges\\n   * @param issuer Issuer that will be authorized\\n   * @param ranges Ranges for which the issuer will be authorized\\n   */\\n  function authorizeRanges(address issuer, Range[] memory ranges) external;\\n\\n  /**\\n   * @dev Unauthorize an issuer for specific ranges\\n   * @param issuer Issuer that will be unauthorized\\n   * @param ranges Ranges for which the issuer will be unauthorized\\n   */\\n  function unauthorizeRanges(\\n    address issuer,\\n    Range[] memory ranges,\\n    uint256[] memory rangeIndexes\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether a specific issuer is authorized or not to record in a specific attestations collection\\n   * @param issuer Issuer to be checked\\n   * @param collectionId Collection Id for which the issuer will be checked\\n   */\\n  function isAuthorized(address issuer, uint256 collectionId) external view returns (bool);\\n\\n  /**\\n   * @dev Pauses the registry. Issuers can no longer record or delete attestations\\n   */\\n  function pause() external;\\n\\n  /**\\n   * @dev Unpauses the registry\\n   */\\n  function unpause() external;\\n\\n  /**\\n   * @dev Create a new attribute.\\n   * @param index Index of the attribute. Can go from 0 to 63.\\n   * @param name Name in bytes32 of the attribute\\n   */\\n  function createNewAttribute(uint8 index, bytes32 name) external;\\n\\n  function createNewAttributes(uint8[] memory indices, bytes32[] memory names) external;\\n\\n  /**\\n   * @dev Update the name of an existing attribute\\n   * @param index Index of the attribute. Can go from 0 to 63. The attribute must exist\\n   * @param newName new name in bytes32 of the attribute\\n   */\\n  function updateAttributeName(uint8 index, bytes32 newName) external;\\n\\n  function updateAttributesName(uint8[] memory indices, bytes32[] memory names) external;\\n\\n  /**\\n   * @dev Delete an existing attribute\\n   * @param index Index of the attribute. Can go from 0 to 63. The attribute must exist\\n   */\\n  function deleteAttribute(uint8 index) external;\\n\\n  function deleteAttributes(uint8[] memory indices) external;\\n}\\n\",\"keccak256\":\"0x07a1a9e8d2caf1d810ba8fb760a35ce2a0ef60a76814d44881a5aa56162ce26b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAttester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Request, Attestation} from '../libs/Structs.sol';\\nimport {IAttestationsRegistry} from '../interfaces/IAttestationsRegistry.sol';\\n\\n/**\\n * @title IAttester\\n * @author Sismo\\n * @notice This is the interface for the attesters in Sismo Protocol\\n */\\ninterface IAttester {\\n  event AttestationGenerated(Attestation attestation);\\n\\n  event AttestationDeleted(Attestation attestation);\\n\\n  error AttestationDeletionNotImplemented();\\n\\n  /**\\n   * @dev Main external function. Allows to generate attestations by making a request and submitting proof\\n   * @param request User request\\n   * @param proofData Data sent along the request to prove its validity\\n   * @return attestations Attestations that has been recorded\\n   */\\n  function generateAttestations(\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) external returns (Attestation[] memory);\\n\\n  /**\\n   * @dev External facing function. Allows to delete an attestation by submitting proof\\n   * @param collectionIds Collection identifier of attestations to delete\\n   * @param attestationsOwner Owner of attestations to delete\\n   * @param proofData Data sent along the deletion request to prove its validity\\n   * @return attestations Attestations that was deleted\\n   */\\n  function deleteAttestations(\\n    uint256[] calldata collectionIds,\\n    address attestationsOwner,\\n    bytes calldata proofData\\n  ) external returns (Attestation[] memory);\\n\\n  /**\\n   * @dev MANDATORY: must be implemented in attesters\\n   * It should build attestations from the user request and the proof\\n   * @param request User request\\n   * @param proofData Data sent along the request to prove its validity\\n   * @return attestations Attestations that will be recorded\\n   */\\n  function buildAttestations(\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) external view returns (Attestation[] memory);\\n\\n  /**\\n   * @dev Attestation registry address getter\\n   * @return attestationRegistry Address of the registry\\n   */\\n  function getAttestationRegistry() external view returns (IAttestationsRegistry);\\n}\\n\",\"keccak256\":\"0x2d5faf5df56dfe1294202e89180846a1d4a5f938699619ee73b60c7314a97dfe\",\"license\":\"MIT\"},\"contracts/core/interfaces/IFront.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Request, Attestation} from '../libs/Structs.sol';\\n\\n/**\\n * @title IFront\\n * @author Sismo\\n * @notice This is the interface of the Front Contract\\n */\\ninterface IFront {\\n  error DifferentRequestsDestinations();\\n  event EarlyUserAttestationGenerated(address destination);\\n\\n  /**\\n   * @dev Forward a request to an attester and generates an early user attestation\\n   * @param attester Attester targeted by the request\\n   * @param request Request sent to the attester\\n   * @param proofData Data provided to the attester to back the request\\n   */\\n  function generateAttestations(\\n    address attester,\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) external returns (Attestation[] memory);\\n\\n  /**\\n   * @dev generate multiple attestations at once, to the same destination\\n   * @param attesters Attesters targeted by the attesters\\n   * @param requests Requests sent to attester\\n   * @param proofDataArray Data sent with each request\\n   */\\n  function batchGenerateAttestations(\\n    address[] calldata attesters,\\n    Request[] calldata requests,\\n    bytes[] calldata proofDataArray\\n  ) external returns (Attestation[][] memory);\\n\\n  /**\\n   * @dev build the attestations from a user request targeting a specific attester.\\n   * Forwards to the build function of targeted attester\\n   * @param attester Targeted attester\\n   * @param request User request\\n   * @param proofData Data sent along the request to prove its validity\\n   * @return attestations Attestations that will be recorded\\n   */\\n  function buildAttestations(\\n    address attester,\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) external view returns (Attestation[] memory);\\n\\n  /**\\n   * @dev build the attestations from multiple user requests.\\n   * Forwards to the build function(s) of targeted attester(s)\\n   * @param attesters Targeted attesters\\n   * @param requests User requests\\n   * @param proofDataArray Data sent along the request to prove its validity\\n   * @return attestations Attestations that will be recorded\\n   */\\n  function batchBuildAttestations(\\n    address[] calldata attesters,\\n    Request[] calldata requests,\\n    bytes[] calldata proofDataArray\\n  ) external view returns (Attestation[][] memory);\\n}\\n\",\"keccak256\":\"0xfeab84e36830c432f91d0cbe1beb430331529829ce667a6371fbad47baa12191\",\"license\":\"MIT\"},\"contracts/core/libs/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title  Attestations Registry State\\n * @author Sismo\\n * @notice This contract holds all of the storage variables and data\\n *         structures used by the AttestationsRegistry and parent\\n *         contracts.\\n */\\n\\n// User Attestation Request, can be made by any user\\n// The context of an Attestation Request is a specific attester contract\\n// Each attester has groups of accounts in its available data\\n// eg: for a specific attester:\\n//     group 1 <=> accounts that sent txs on mainnet\\n//     group 2 <=> accounts that sent txs on polygon\\n// eg: for another attester:\\n//     group 1 <=> accounts that sent eth txs in 2022\\n//     group 2 <=> accounts sent eth txs in 2021\\nstruct Request {\\n  // implicit address attester;\\n  // implicit uint256 chainId;\\n  Claim[] claims;\\n  address destination; // destination that will receive the end attestation\\n}\\n\\nstruct Claim {\\n  uint256 groupId; // user claims to have an account in this group\\n  uint256 claimedValue; // user claims this value for its account in the group\\n  bytes extraData; // arbitrary data, may be required by the attester to verify claims or generate a specific attestation\\n}\\n\\n/**\\n * @dev Attestation Struct. This is the struct receive as argument by the Attestation Registry.\\n * @param collectionId Attestation collection\\n * @param owner Attestation collection\\n * @param issuer Attestation collection\\n * @param value Attestation collection\\n * @param timestamp Attestation collection\\n * @param extraData Attestation collection\\n */\\nstruct Attestation {\\n  // implicit uint256 chainId;\\n  uint256 collectionId; // Id of the attestation collection (in the registry)\\n  address owner; // Owner of the attestation\\n  address issuer; // Contract that created or last updated the record.\\n  uint256 value; // Value of the attestation\\n  uint32 timestamp; // Timestamp chosen by the attester, should correspond to the effective date of the attestation\\n  // it is different from the recording timestamp (date when the attestation was recorded)\\n  // e.g a proof of NFT ownership may have be recorded today which is 2 month old data.\\n  bytes extraData; // arbitrary data that can be added by the attester\\n}\\n\\n// Attestation Data, stored in the registry\\n// The context is a specific owner of a specific collection\\nstruct AttestationData {\\n  // implicit uint256 chainId\\n  // implicit uint256 collectionId - from context\\n  // implicit owner\\n  address issuer; // Address of the contract that recorded the attestation\\n  uint256 value; // Value of the attestation\\n  uint32 timestamp; // Effective date of issuance of the attestation. (can be different from the recording timestamp)\\n  bytes extraData; // arbitrary data that can be added by the attester\\n}\\n\",\"keccak256\":\"0x893d9a10429878dd4077388ff4da954c20b86a3c172a7bbdd10a01eb5d39b6a0\",\"license\":\"MIT\"},\"contracts/core/libs/utils/RangeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nstruct Range {\\n  uint256 min;\\n  uint256 max;\\n}\\n\\n// Range [0;3] includees 0 and 3\\nlibrary RangeUtils {\\n  function _includes(Range[] storage ranges, uint256 collectionId) internal view returns (bool) {\\n    for (uint256 i = 0; i < ranges.length; i++) {\\n      if (collectionId >= ranges[i].min && collectionId <= ranges[i].max) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0x8f04a81575ba69887b302887d4ffbd8eb6f3d9d1a7be920e5478c95b30890ce1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Sismo",
    "kind": "dev",
    "methods": {
      "batchBuildAttestations(address[],((uint256,uint256,bytes)[],address)[],bytes[])": {
        "details": "build the attestations from multiple user requests. Forwards to the build function of targeted attester",
        "params": {
          "attesters": "Targeted attesters",
          "proofDataArray": "Data sent along the request to prove its validity",
          "requests": "User requests"
        },
        "returns": {
          "_0": "attestations Attestations that will be recorded"
        }
      },
      "batchGenerateAttestations(address[],((uint256,uint256,bytes)[],address)[],bytes[])": {
        "details": "generate multiple attestations at once, to the same destination, generates an early user attestation",
        "params": {
          "attesters": "Attesters targeted by the attesters",
          "proofDataArray": "Data sent with each request",
          "requests": "Requests sent to attester"
        }
      },
      "buildAttestations(address,((uint256,uint256,bytes)[],address),bytes)": {
        "details": "build the attestations from a user request targeting a specific attester. Forwards to the build function of targeted attester",
        "params": {
          "attester": "Targeted attester",
          "proofData": "Data sent along the request to prove its validity",
          "request": "User request"
        },
        "returns": {
          "_0": "attestations Attestations that will be recorded"
        }
      },
      "constructor": {
        "details": "Constructor",
        "params": {
          "attestationsRegistryAddress": "Attestations registry contract address"
        }
      },
      "generateAttestations(address,((uint256,uint256,bytes)[],address),bytes)": {
        "details": "Forward a request to an attester and generates an early user attestation",
        "params": {
          "attester": "Attester targeted by the request",
          "proofData": "Data provided to the attester to back the request",
          "request": "Request sent to the attester"
        }
      }
    },
    "title": "Front",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This is the Front contract of the Sismo protocol Behind a proxy, it routes attestations request to the targeted attester and can perform some actions This specific implementation rewards early users with a early user attestation if they used sismo before ethcc conference For more information: https://front.docs.sismo.io",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}