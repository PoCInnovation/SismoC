{
  "address": "0xa67f1C6c96CB5dD6eF24B07A77893693C210d846",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadgesNonTransferrable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EVENT_TRIGGERER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IMPLEMENTATION_VERSION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAttestationsRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getAttributeValueForBadge",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAttributesNamesAndValuesForBadge",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBadgeExtraData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBadgeIssuer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBadgeTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attestationsRegistry",
          "type": "address"
        }
      ],
      "name": "setAttestationsRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "triggerTransferEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeed9e98603252678fae419e2d46a1ae44a3f13ae1de7b0315db44b0f5d8cf5bc",
  "receipt": {
    "to": null,
    "from": "0x2D11715220786490C8dA6CAC15444f250E838Eff",
    "contractAddress": "0x4f6b1C44D8b66be5d8eb1765B4282227a52a452F",
    "transactionIndex": 0,
    "gasUsed": "2131146",
    "logsBloom": "0x
    "blockHash": "0x085a532bd9da63fe813ec472b8507a28b2673c2d8aa8127d0741e3e28fbce4d3",
    "transactionHash": "0xeed9e98603252678fae419e2d46a1ae44a3f13ae1de7b0315db44b0f5d8cf5bc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 25530269,
        "transactionHash": "0xeed9e98603252678fae419e2d46a1ae44a3f13ae1de7b0315db44b0f5d8cf5bc",
        "address": "0x4f6b1C44D8b66be5d8eb1765B4282227a52a452F",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d11715220786490c8da6cac15444f250e838eff",
          "0x0000000000000000000000002d11715220786490c8da6cac15444f250e838eff"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x085a532bd9da63fe813ec472b8507a28b2673c2d8aa8127d0741e3e28fbce4d3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25530269,
        "transactionHash": "0xeed9e98603252678fae419e2d46a1ae44a3f13ae1de7b0315db44b0f5d8cf5bc",
        "address": "0x4f6b1C44D8b66be5d8eb1765B4282227a52a452F",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000003",
        "logIndex": 1,
        "blockHash": "0x085a532bd9da63fe813ec472b8507a28b2673c2d8aa8127d0741e3e28fbce4d3"
      }
    ],
    "blockNumber": 25530269,
    "cumulativeGasUsed": "2131146",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://hub.sismo.io/badges/gnosis/{id}.json",
    "0x2D11715220786490C8dA6CAC15444f250E838Eff"
  ],
  "numDeployments": 2,
  "solcInputHash": "61c38ae61d36c4e0fe74ede913f00b14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadgesNonTransferrable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EVENT_TRIGGERER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPLEMENTATION_VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAttestationsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getAttributeValueForBadge\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAttributesNamesAndValuesForBadge\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBadgeExtraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBadgeIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBadgeTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attestationsRegistry\",\"type\":\"address\"}],\"name\":\"setAttestationsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"triggerTransferEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sismo\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Main function of the ERC1155 badge The balance of a user is equal to the value of the underlying attestation. attestationCollectionId == badgeId\",\"params\":{\"account\":\"Address to check badge balance (= value of attestation)\",\"id\":\"Badge Id to check (= attestationCollectionId)\"}},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"constructor\":{\"details\":\"Constructor\",\"params\":{\"owner\":\"Owner of the contract, super admin, can setup roles and update the attestation registry\",\"uri\":\"Uri for the metadata of badges\"}},\"getAttestationsRegistry()\":{\"details\":\"Getter of the attestations registry\"},\"getAttributeValueForBadge(uint256,uint8)\":{\"details\":\"Getter of the value of a specific badge attribute\",\"params\":{\"id\":\"Badge Id to check (= attestationCollectionId)\",\"index\":\"Index of the attribute\"}},\"getAttributesNamesAndValuesForBadge(uint256)\":{\"details\":\"Getter of all badge attributes and their values for a specific badge\",\"params\":{\"id\":\"Badge Id to check (= attestationCollectionId)\"}},\"getBadgeExtraData(address,uint256)\":{\"details\":\"Getter of the badge extra data (it can store nullifier and burnCount)\",\"params\":{\"account\":\"Address that holds the badge\",\"id\":\"Badge Id to check (= attestationCollectionId)\"}},\"getBadgeIssuer(address,uint256)\":{\"details\":\"Getter of the badge issuer\",\"params\":{\"account\":\"Address that holds the badge\",\"id\":\"Badge Id to check (= attestationCollectionId)\"}},\"getBadgeTimestamp(address,uint256)\":{\"details\":\"Getter of the badge timestamp\",\"params\":{\"account\":\"Address that holds the badge\",\"id\":\"Badge Id to check (= attestationCollectionId)\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(string,address)\":{\"details\":\"Initializes the contract, to be called by the proxy delegating calls to this implementation\",\"params\":{\"owner\":\"Owner of the contract, super admin, can setup roles and update the attestation registry\",\"uri\":\"Uri for the metadata of badges\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Reverts, this is a non transferable ERC115 contract\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts, this is a non transferable ERC115 contract\"},\"setAttestationsRegistry(address)\":{\"details\":\"Set the attestations registry address. Can only be called by owner (default admin)\",\"params\":{\"attestationsRegistry\":\"new attestations registry address\"}},\"setUri(string)\":{\"details\":\"Set the URI. Can only be called by owner (default admin)\",\"params\":{\"uri\":\"new attestations registry address\"}},\"supportsInterface(bytes4)\":{\"details\":\"ERC165\"},\"triggerTransferEvent(address,address,address,uint256,uint256)\":{\"details\":\"Emits a TransferSingle event, so subgraphs and other off-chain apps relying on events can see badge minting/burning can only be called by address having the EVENT_TRIGGERER_ROLE (attestations registry address)\",\"params\":{\"from\":\"address(0) if minting, address of the badge holder if burning\",\"id\":\"badgeId for which to trigger the event\",\"operator\":\"who is calling the TransferEvent\",\"to\":\"address of the badge holder is minting, address(0) if burning\",\"value\":\"minted/burned balance\"}},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"title\":\"Badges contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(string,address)\":{\"notice\":\"The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization.\"}},\"notice\":\"Stateless, Non-transferrable ERC1155 contract. Reads balance from the values of attestations The associated attestations registry triggers TransferSingle events from this contract It allows badge \\\"shadow mints and burns\\\" to be caught by off-chain platforms For more information: https://badges.docs.sismo.io\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Badges.sol\":\"Badges\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xcee5467d5d873fb75dae6f98c01a8d25dd609f9d0374c7d39217bd5f9539a2d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdad22b949de979bb2ad9001c044b2aeaacf8a25e3de09ed6f022a9469f936d5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/core/Badges.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {ERC1155} from '@openzeppelin/contracts/token/ERC1155/ERC1155.sol';\\nimport {Initializable} from '@openzeppelin/contracts/proxy/utils/Initializable.sol';\\nimport {ERC1155Pausable} from '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol';\\nimport {AccessControl} from '@openzeppelin/contracts/access/AccessControl.sol';\\nimport {IAttestationsRegistry} from './interfaces/IAttestationsRegistry.sol';\\nimport {IBadges} from './interfaces/IBadges.sol';\\n\\n/**\\n * @title Badges contract\\n * @author Sismo\\n * @notice Stateless, Non-transferrable ERC1155 contract. Reads balance from the values of attestations\\n * The associated attestations registry triggers TransferSingle events from this contract\\n * It allows badge \\\"shadow mints and burns\\\" to be caught by off-chain platforms\\n * For more information: https://badges.docs.sismo.io\\n */\\ncontract Badges is IBadges, Initializable, AccessControl, ERC1155 {\\n  uint8 public constant IMPLEMENTATION_VERSION = 3;\\n\\n  IAttestationsRegistry internal _attestationsRegistry;\\n\\n  bytes32 public constant EVENT_TRIGGERER_ROLE = keccak256('EVENT_TRIGGERER_ROLE');\\n\\n  /**\\n   * @dev Constructor\\n   * @param uri Uri for the metadata of badges\\n   * @param owner Owner of the contract, super admin, can setup roles and update the attestation registry\\n   */\\n  constructor(\\n    string memory uri,\\n    address owner // This is Sismo Frontend Contract\\n  ) ERC1155(uri) {\\n    initialize(uri, owner);\\n  }\\n\\n  /**\\n   * @dev Initializes the contract, to be called by the proxy delegating calls to this implementation\\n   * @param uri Uri for the metadata of badges\\n   * @param owner Owner of the contract, super admin, can setup roles and update the attestation registry\\n   * @notice The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization.\\n   */\\n  function initialize(\\n    string memory uri,\\n    address owner\\n  ) public reinitializer(IMPLEMENTATION_VERSION) {\\n    // if proxy did not setup uri yet or if called by constructor (for implem setup)\\n    if (bytes(ERC1155.uri(0)).length == 0 || address(this).code.length == 0) {\\n      _setURI(uri);\\n      _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n    }\\n  }\\n\\n  /**\\n   * @dev Main function of the ERC1155 badge\\n   * The balance of a user is equal to the value of the underlying attestation.\\n   * attestationCollectionId == badgeId\\n   * @param account Address to check badge balance (= value of attestation)\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function balanceOf(\\n    address account,\\n    uint256 id\\n  ) public view virtual override(ERC1155, IBadges) returns (uint256) {\\n    return _attestationsRegistry.getAttestationValue(id, account);\\n  }\\n\\n  /**\\n   * @dev Reverts, this is a non transferable ERC115 contract\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    revert BadgesNonTransferrable();\\n  }\\n\\n  /**\\n   * @dev Reverts, this is a non transferable ERC115 contract\\n   */\\n  function isApprovedForAll(\\n    address account,\\n    address operator\\n  ) public view virtual override returns (bool) {\\n    revert BadgesNonTransferrable();\\n  }\\n\\n  /**\\n   * @dev Emits a TransferSingle event, so subgraphs and other off-chain apps relying on events can see badge minting/burning\\n   * can only be called by address having the EVENT_TRIGGERER_ROLE (attestations registry address)\\n   * @param operator who is calling the TransferEvent\\n   * @param from address(0) if minting, address of the badge holder if burning\\n   * @param to address of the badge holder is minting, address(0) if burning\\n   * @param id badgeId for which to trigger the event\\n   * @param value minted/burned balance\\n   */\\n  function triggerTransferEvent(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 value\\n  ) external onlyRole(EVENT_TRIGGERER_ROLE) {\\n    emit TransferSingle(operator, from, to, id, value);\\n  }\\n\\n  /**\\n   * @dev Set the attestations registry address. Can only be called by owner (default admin)\\n   * @param attestationsRegistry new attestations registry address\\n   */\\n  function setAttestationsRegistry(\\n    address attestationsRegistry\\n  ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _attestationsRegistry = IAttestationsRegistry(attestationsRegistry);\\n  }\\n\\n  /**\\n   * @dev Set the URI. Can only be called by owner (default admin)\\n   * @param uri new attestations registry address\\n   */\\n  function setUri(string memory uri) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setURI(uri);\\n  }\\n\\n  /**\\n   * @dev Getter of the attestations registry\\n   */\\n  function getAttestationsRegistry() external view override returns (address) {\\n    return address(_attestationsRegistry);\\n  }\\n\\n  /**\\n   * @dev Getter of the badge issuer\\n   * @param account Address that holds the badge\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function getBadgeIssuer(address account, uint256 id) external view returns (address) {\\n    return _attestationsRegistry.getAttestationIssuer(id, account);\\n  }\\n\\n  /**\\n   * @dev Getter of the badge timestamp\\n   * @param account Address that holds the badge\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function getBadgeTimestamp(address account, uint256 id) external view returns (uint32) {\\n    return _attestationsRegistry.getAttestationTimestamp(id, account);\\n  }\\n\\n  /**\\n   * @dev Getter of the badge extra data (it can store nullifier and burnCount)\\n   * @param account Address that holds the badge\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function getBadgeExtraData(address account, uint256 id) external view returns (bytes memory) {\\n    return _attestationsRegistry.getAttestationExtraData(id, account);\\n  }\\n\\n  /**\\n   * @dev Getter of the value of a specific badge attribute\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   * @param index Index of the attribute\\n   */\\n  function getAttributeValueForBadge(uint256 id, uint8 index) external view returns (uint8) {\\n    return _attestationsRegistry.getAttributeValueForAttestationsCollection(id, index);\\n  }\\n\\n  /**\\n   * @dev Getter of all badge attributes and their values for a specific badge\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function getAttributesNamesAndValuesForBadge(\\n    uint256 id\\n  ) external view returns (bytes32[] memory, uint8[] memory) {\\n    return _attestationsRegistry.getAttributesNamesAndValuesForAttestationsCollection(id);\\n  }\\n\\n  /**\\n   * @dev ERC165\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override(AccessControl, ERC1155) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Reverts, this is a non transferable ERC115 contract\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual override {\\n    revert BadgesNonTransferrable();\\n  }\\n}\\n\",\"keccak256\":\"0x9982b753d43f2a4a9edb5987714b09f518b419339d4bf9cd63b600bee442fd01\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAttestationsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Attestation, AttestationData} from '../libs/Structs.sol';\\nimport {IAttestationsRegistryConfigLogic} from './IAttestationsRegistryConfigLogic.sol';\\n\\n/**\\n * @title IAttestationsRegistry\\n * @author Sismo\\n * @notice This is the interface of the AttestationRegistry\\n */\\ninterface IAttestationsRegistry is IAttestationsRegistryConfigLogic {\\n  error IssuerNotAuthorized(address issuer, uint256 collectionId);\\n  error OwnersAndCollectionIdsLengthMismatch(address[] owners, uint256[] collectionIds);\\n  event AttestationRecorded(Attestation attestation);\\n  event AttestationDeleted(Attestation attestation);\\n\\n  /**\\n   * @dev Main function to be called by authorized issuers\\n   * @param attestations Attestations to be recorded (creates a new one or overrides an existing one)\\n   */\\n  function recordAttestations(Attestation[] calldata attestations) external;\\n\\n  /**\\n   * @dev Delete function to be called by authorized issuers\\n   * @param owners The owners of the attestations to be deleted\\n   * @param collectionIds The collection ids of the attestations to be deleted\\n   */\\n  function deleteAttestations(address[] calldata owners, uint256[] calldata collectionIds) external;\\n\\n  /**\\n   * @dev Returns whether a user has an attestation from a collection\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function hasAttestation(uint256 collectionId, address owner) external returns (bool);\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationData(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (AttestationData memory);\\n\\n  /**\\n   * @dev Getter of the value of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationValue(uint256 collectionId, address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation as tuple\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationDataTuple(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (address, uint256, uint32, bytes memory);\\n\\n  /**\\n   * @dev Getter of the extraData of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationExtraData(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (bytes memory);\\n\\n  /**\\n   * @dev Getter of the issuer of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationIssuer(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (address);\\n\\n  /**\\n   * @dev Getter of the timestamp of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationTimestamp(\\n    uint256 collectionId,\\n    address owner\\n  ) external view returns (uint32);\\n\\n  /**\\n   * @dev Getter of the data of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationDataBatch(\\n    uint256[] memory collectionIds,\\n    address[] memory owners\\n  ) external view returns (AttestationData[] memory);\\n\\n  /**\\n   * @dev Getter of the values of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationValueBatch(\\n    uint256[] memory collectionIds,\\n    address[] memory owners\\n  ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x0c3af349bcfa545c959f4d9f25aacb73e3ef1ca7cfe62a2eda4a743a6835904f\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAttestationsRegistryConfigLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Forked from, removed storage, OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.14;\\n\\nimport {Range, RangeUtils} from '../libs/utils/RangeLib.sol';\\n\\ninterface IAttestationsRegistryConfigLogic {\\n  error AttesterNotFound(address issuer);\\n  error RangeIndexOutOfBounds(address issuer, uint256 expectedArrayLength, uint256 rangeIndex);\\n  error IdsMismatch(\\n    address issuer,\\n    uint256 rangeIndex,\\n    uint256 expectedFirstId,\\n    uint256 expectedLastId,\\n    uint256 FirstId,\\n    uint256 lastCollectionId\\n  );\\n  error AttributeDoesNotExist(uint8 attributeIndex);\\n  error AttributeAlreadyExists(uint8 attributeIndex);\\n  error ArgsLengthDoesNotMatch();\\n\\n  event NewAttributeCreated(uint8 attributeIndex, bytes32 attributeName);\\n  event AttributeNameUpdated(\\n    uint8 attributeIndex,\\n    bytes32 newAttributeName,\\n    bytes32 previousAttributeName\\n  );\\n  event AttributeDeleted(uint8 attributeIndex, bytes32 deletedAttributeName);\\n\\n  event AttestationsCollectionAttributeSet(\\n    uint256 collectionId,\\n    uint8 attributeIndex,\\n    uint8 attributeValue\\n  );\\n\\n  event IssuerAuthorized(address issuer, uint256 firstCollectionId, uint256 lastCollectionId);\\n  event IssuerUnauthorized(address issuer, uint256 firstCollectionId, uint256 lastCollectionId);\\n\\n  /**\\n   * @dev Returns whether an attestationsCollection has a specific attribute referenced by its index\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   * @param index Index of the attribute. Can go from 0 to 63.\\n   */\\n  function attestationsCollectionHasAttribute(\\n    uint256 collectionId,\\n    uint8 index\\n  ) external view returns (bool);\\n\\n  function attestationsCollectionHasAttributes(\\n    uint256 collectionId,\\n    uint8[] memory indices\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the attribute's value (from 1 to 15) of an attestationsCollection\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   * @param attributeIndex Index of the attribute. Can go from 0 to 63.\\n   */\\n  function getAttributeValueForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8 attributeIndex\\n  ) external view returns (uint8);\\n\\n  function getAttributesValuesForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8[] memory indices\\n  ) external view returns (uint8[] memory);\\n\\n  /**\\n   * @dev Set a value for an attribute of an attestationsCollection. The attribute should already be created.\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   * @param index Index of the attribute (must be between 0 and 63)\\n   * @param value Value of the attribute we want to set for this attestationsCollection. Can take the value 0 to 15\\n   */\\n  function setAttributeValueForAttestationsCollection(\\n    uint256 collectionId,\\n    uint8 index,\\n    uint8 value\\n  ) external;\\n\\n  function setAttributesValuesForAttestationsCollections(\\n    uint256[] memory collectionIds,\\n    uint8[] memory indices,\\n    uint8[] memory values\\n  ) external;\\n\\n  /**\\n   * @dev Returns all the enabled attributes names and their values for a specific attestationsCollection\\n   * @param collectionId Collection Id of the targeted attestationsCollection\\n   */\\n  function getAttributesNamesAndValuesForAttestationsCollection(\\n    uint256 collectionId\\n  ) external view returns (bytes32[] memory, uint8[] memory);\\n\\n  /**\\n   * @dev Authorize an issuer for a specific range\\n   * @param issuer Issuer that will be authorized\\n   * @param firstCollectionId First collection Id of the range for which the issuer will be authorized\\n   * @param lastCollectionId Last collection Id of the range for which the issuer will be authorized\\n   */\\n  function authorizeRange(\\n    address issuer,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) external;\\n\\n  /**\\n   * @dev Unauthorize an issuer for a specific range\\n   * @param issuer Issuer that will be unauthorized\\n   * @param rangeIndex Index of the range to be unauthorized\\n   * @param firstCollectionId First collection Id of the range for which the issuer will be unauthorized\\n   * @param lastCollectionId Last collection Id of the range for which the issuer will be unauthorized\\n   */\\n  function unauthorizeRange(\\n    address issuer,\\n    uint256 rangeIndex,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) external;\\n\\n  /**\\n   * @dev Authorize an issuer for specific ranges\\n   * @param issuer Issuer that will be authorized\\n   * @param ranges Ranges for which the issuer will be authorized\\n   */\\n  function authorizeRanges(address issuer, Range[] memory ranges) external;\\n\\n  /**\\n   * @dev Unauthorize an issuer for specific ranges\\n   * @param issuer Issuer that will be unauthorized\\n   * @param ranges Ranges for which the issuer will be unauthorized\\n   */\\n  function unauthorizeRanges(\\n    address issuer,\\n    Range[] memory ranges,\\n    uint256[] memory rangeIndexes\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether a specific issuer is authorized or not to record in a specific attestations collection\\n   * @param issuer Issuer to be checked\\n   * @param collectionId Collection Id for which the issuer will be checked\\n   */\\n  function isAuthorized(address issuer, uint256 collectionId) external view returns (bool);\\n\\n  /**\\n   * @dev Pauses the registry. Issuers can no longer record or delete attestations\\n   */\\n  function pause() external;\\n\\n  /**\\n   * @dev Unpauses the registry\\n   */\\n  function unpause() external;\\n\\n  /**\\n   * @dev Create a new attribute.\\n   * @param index Index of the attribute. Can go from 0 to 63.\\n   * @param name Name in bytes32 of the attribute\\n   */\\n  function createNewAttribute(uint8 index, bytes32 name) external;\\n\\n  function createNewAttributes(uint8[] memory indices, bytes32[] memory names) external;\\n\\n  /**\\n   * @dev Update the name of an existing attribute\\n   * @param index Index of the attribute. Can go from 0 to 63. The attribute must exist\\n   * @param newName new name in bytes32 of the attribute\\n   */\\n  function updateAttributeName(uint8 index, bytes32 newName) external;\\n\\n  function updateAttributesName(uint8[] memory indices, bytes32[] memory names) external;\\n\\n  /**\\n   * @dev Delete an existing attribute\\n   * @param index Index of the attribute. Can go from 0 to 63. The attribute must exist\\n   */\\n  function deleteAttribute(uint8 index) external;\\n\\n  function deleteAttributes(uint8[] memory indices) external;\\n}\\n\",\"keccak256\":\"0x07a1a9e8d2caf1d810ba8fb760a35ce2a0ef60a76814d44881a5aa56162ce26b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IBadges.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title Interface for Badges contract\\n * @author Sismo\\n * @notice Stateless ERC1155 contract. Reads balance from the values of attestations\\n * The associated attestations registry triggers TransferSingle events from this contract\\n * It allows badge \\\"shadow mints and burns\\\" to be caught by off-chain platforms\\n */\\ninterface IBadges {\\n  error BadgesNonTransferrable();\\n\\n  /**\\n   * @dev Initializes the contract, to be called by the proxy delegating calls to this implementation\\n   * @param uri Uri for the metadata of badges\\n   * @param owner Owner of the contract, super admin, can setup roles and update the attestation registry\\n   * @notice The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization.\\n   */\\n  function initialize(string memory uri, address owner) external;\\n\\n  /**\\n   * @dev Main function of the ERC1155 badge\\n   * The balance of a user is equal to the value of the underlying attestation.\\n   * attestationCollectionId == badgeId\\n   * @param account Address to check badge balance (= value of attestation)\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n  /**\\n   * @dev Emits a TransferSingle event, so subgraphs and other off-chain apps relying on events can see badge minting/burning\\n   * can only be called by address having the EVENT_TRIGGERER_ROLE (attestations registry address)\\n   * @param operator who is calling the TransferEvent\\n   * @param from address(0) if minting, address of the badge holder if burning\\n   * @param to address of the badge holder is minting, address(0) if burning\\n   * @param id badgeId for which to trigger the event\\n   * @param value minted/burned balance\\n   */\\n  function triggerTransferEvent(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @dev Set the attestations registry address. Can only be called by owner (default admin)\\n   * @param attestationsRegistry new attestations registry address\\n   */\\n  function setAttestationsRegistry(address attestationsRegistry) external;\\n\\n  /**\\n   * @dev Set the URI. Can only be called by owner (default admin)\\n   * @param uri new attestations registry address\\n   */\\n  function setUri(string memory uri) external;\\n\\n  /**\\n   * @dev Getter of the attestations registry\\n   */\\n  function getAttestationsRegistry() external view returns (address);\\n\\n  /**\\n   * @dev Getter of the badge issuer\\n   * @param account Address that holds the badge\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function getBadgeIssuer(address account, uint256 id) external view returns (address);\\n\\n  /**\\n   * @dev Getter of the badge timestamp\\n   * @param account Address that holds the badge\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function getBadgeTimestamp(address account, uint256 id) external view returns (uint32);\\n\\n  /**\\n   * @dev Getter of the badge extra data (it can store nullifier and burnCount)\\n   * @param account Address that holds the badge\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function getBadgeExtraData(address account, uint256 id) external view returns (bytes memory);\\n\\n  /**\\n   * @dev Getter of the value of a specific badge attribute\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   * @param index Index of the attribute\\n   */\\n  function getAttributeValueForBadge(uint256 id, uint8 index) external view returns (uint8);\\n\\n  /**\\n   * @dev Getter of all badge attributes and their values for a specific badge\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function getAttributesNamesAndValuesForBadge(\\n    uint256 id\\n  ) external view returns (bytes32[] memory, uint8[] memory);\\n}\\n\",\"keccak256\":\"0xd6bdfc887ef15ee022eb05d89dbe2e2938ee6c0a55a55f8db527ef650242c6bb\",\"license\":\"MIT\"},\"contracts/core/libs/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title  Attestations Registry State\\n * @author Sismo\\n * @notice This contract holds all of the storage variables and data\\n *         structures used by the AttestationsRegistry and parent\\n *         contracts.\\n */\\n\\n// User Attestation Request, can be made by any user\\n// The context of an Attestation Request is a specific attester contract\\n// Each attester has groups of accounts in its available data\\n// eg: for a specific attester:\\n//     group 1 <=> accounts that sent txs on mainnet\\n//     group 2 <=> accounts that sent txs on polygon\\n// eg: for another attester:\\n//     group 1 <=> accounts that sent eth txs in 2022\\n//     group 2 <=> accounts sent eth txs in 2021\\nstruct Request {\\n  // implicit address attester;\\n  // implicit uint256 chainId;\\n  Claim[] claims;\\n  address destination; // destination that will receive the end attestation\\n}\\n\\nstruct Claim {\\n  uint256 groupId; // user claims to have an account in this group\\n  uint256 claimedValue; // user claims this value for its account in the group\\n  bytes extraData; // arbitrary data, may be required by the attester to verify claims or generate a specific attestation\\n}\\n\\n/**\\n * @dev Attestation Struct. This is the struct receive as argument by the Attestation Registry.\\n * @param collectionId Attestation collection\\n * @param owner Attestation collection\\n * @param issuer Attestation collection\\n * @param value Attestation collection\\n * @param timestamp Attestation collection\\n * @param extraData Attestation collection\\n */\\nstruct Attestation {\\n  // implicit uint256 chainId;\\n  uint256 collectionId; // Id of the attestation collection (in the registry)\\n  address owner; // Owner of the attestation\\n  address issuer; // Contract that created or last updated the record.\\n  uint256 value; // Value of the attestation\\n  uint32 timestamp; // Timestamp chosen by the attester, should correspond to the effective date of the attestation\\n  // it is different from the recording timestamp (date when the attestation was recorded)\\n  // e.g a proof of NFT ownership may have be recorded today which is 2 month old data.\\n  bytes extraData; // arbitrary data that can be added by the attester\\n}\\n\\n// Attestation Data, stored in the registry\\n// The context is a specific owner of a specific collection\\nstruct AttestationData {\\n  // implicit uint256 chainId\\n  // implicit uint256 collectionId - from context\\n  // implicit owner\\n  address issuer; // Address of the contract that recorded the attestation\\n  uint256 value; // Value of the attestation\\n  uint32 timestamp; // Effective date of issuance of the attestation. (can be different from the recording timestamp)\\n  bytes extraData; // arbitrary data that can be added by the attester\\n}\\n\",\"keccak256\":\"0x893d9a10429878dd4077388ff4da954c20b86a3c172a7bbdd10a01eb5d39b6a0\",\"license\":\"MIT\"},\"contracts/core/libs/utils/RangeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nstruct Range {\\n  uint256 min;\\n  uint256 max;\\n}\\n\\n// Range [0;3] includees 0 and 3\\nlibrary RangeUtils {\\n  function _includes(Range[] storage ranges, uint256 collectionId) internal view returns (bool) {\\n    for (uint256 i = 0; i < ranges.length; i++) {\\n      if (collectionId >= ranges[i].min && collectionId <= ranges[i].max) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0x8f04a81575ba69887b302887d4ffbd8eb6f3d9d1a7be920e5478c95b30890ce1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620027eb380380620027eb833981016040819052620000349162000395565b81620000408162000055565b506200004d82826200006e565b5050620004c2565b80516200006a906004906020840190620002bc565b5050565b600054600390610100900460ff1615801562000091575060005460ff8083169116105b620000f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805461ffff191660ff83161761010017815562000127906200051d62000198602090811b91909117901c565b511580620001345750303b155b156200015257620001458362000055565b6200015260008362000234565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b606060048054620001a99062000486565b80601f0160208091040260200160405190810160405280929190818152602001828054620001d79062000486565b8015620002285780601f10620001fc5761010080835404028352916020019162000228565b820191906000526020600020905b8154815290600101906020018083116200020a57829003601f168201915b50505050509050919050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166200006a5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b828054620002ca9062000486565b90600052602060002090601f016020900481019282620002ee576000855562000339565b82601f106200030957805160ff191683800117855562000339565b8280016001018555821562000339579182015b82811115620003395782518255916020019190600101906200031c565b50620003479291506200034b565b5090565b5b808211156200034757600081556001016200034c565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200039057600080fd5b919050565b60008060408385031215620003a957600080fd5b82516001600160401b0380821115620003c157600080fd5b818501915085601f830112620003d657600080fd5b815181811115620003eb57620003eb62000362565b604051601f8201601f19908116603f0116810190838211818310171562000416576200041662000362565b816040528281526020935088848487010111156200043357600080fd5b600091505b8282101562000457578482018401518183018501529083019062000438565b82821115620004695760008484830101525b95506200047b91505085820162000378565b925050509250929050565b600181811c908216806200049b57607f821691505b602082108103620004bc57634e487b7160e01b600052602260045260246000fd5b50919050565b61231980620004d26000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c8063754b377c116100de578063aed8c6bc11610097578063e37ffe7c11610071578063e37ffe7c146103aa578063e985e9c5146103cb578063f242432a146103de578063ff4468c4146103f157600080fd5b8063aed8c6bc14610371578063b3c1cb2114610384578063d547741f1461039757600080fd5b8063754b377c146103035780637ab4339d1461031d57806391d14854146103305780639b642de114610343578063a217fddf14610356578063a22cb4651461035e57600080fd5b80632f2ff15d1161014b57806344112ed81161012557806344112ed8146102985780634e1273f4146102bf578063710b3096146102df578063730cb7d5146102f257600080fd5b80632f2ff15d1461025f57806336568abe146102725780633e1f3c271461028557600080fd5b8062fdd58e1461019257806301ffc9a7146101b85780630e064366146101db5780630e89341c14610206578063248a9ca3146102265780632eb2c2d61461024a575b600080fd5b6101a56101a0366004611618565b610419565b6040519081526020015b60405180910390f35b6101cb6101c636600461165a565b610496565b60405190151581526020016101af565b6101ee6101e9366004611618565b6104a7565b6040516001600160a01b0390911681526020016101af565b610219610214366004611677565b61051d565b6040516101af91906116ec565b6101a5610234366004611677565b6000908152600160208190526040909120015490565b61025d610258366004611858565b6105b1565b005b61025d61026d366004611905565b610606565b61025d610280366004611905565b610631565b610219610293366004611618565b6106af565b6101a57fe6cd5415a09470f57cb652d653ef635ecd9a997fef2537decaf18eb7545b7fa481565b6102d26102cd366004611935565b610729565b6040516101af9190611a3c565b61025d6102ed366004611a4f565b610852565b6005546001600160a01b03166101ee565b61030b600381565b60405160ff90911681526020016101af565b61025d61032b366004611aaa565b6108e4565b6101cb61033e366004611905565b6109f1565b61025d610351366004611af0565b610a1c565b6101a5600081565b61025d61036c366004611b2c565b610a30565b61030b61037f366004611b6e565b610a49565b61025d610392366004611b93565b610ac0565b61025d6103a5366004611905565b610aee565b6103bd6103b8366004611677565b610b14565b6040516101af929190611bb0565b6101cb6103d9366004611c2e565b610b93565b61025d6103ec366004611c5c565b610bae565b6104046103ff366004611618565b610bf3565b60405163ffffffff90911681526020016101af565b60055460405163461e4f1960e11b8152600481018390526001600160a01b0384811660248301526000921690638c3c9e3290604401602060405180830381865afa15801561046b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190611cc4565b9392505050565b60006104a182610c69565b92915050565b6005546040516363ed4d5360e11b8152600481018390526001600160a01b038481166024830152600092169063c7da9aa690604401602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190611cdd565b60606004805461052c90611cfa565b80601f016020809104026020016040519081016040528092919081815260200182805461055890611cfa565b80156105a55780601f1061057a576101008083540402835291602001916105a5565b820191906000526020600020905b81548152906001019060200180831161058857829003601f168201915b50505050509050919050565b6001600160a01b0385163314806105cd57506105cd8533610b93565b6105f25760405162461bcd60e51b81526004016105e990611d34565b60405180910390fd5b6105ff8585858585610ca9565b5050505050565b6000828152600160208190526040909120015461062281610e97565b61062c8383610ea4565b505050565b6001600160a01b03811633146106a15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105e9565b6106ab8282610f0f565b5050565b600554604051636d7fbb6760e01b8152600481018390526001600160a01b0384811660248301526060921690636d7fbb6790604401600060405180830381865afa158015610701573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261048f9190810190611d82565b6060815183511461078e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105e9565b600083516001600160401b038111156107a9576107a96116ff565b6040519080825280602002602001820160405280156107d2578160200160208202803683370190505b50905060005b845181101561084a5761081d8582815181106107f6576107f6611e03565b602002602001015185838151811061081057610810611e03565b6020026020010151610419565b82828151811061082f5761082f611e03565b602090810291909101015261084381611e2f565b90506107d8565b509392505050565b7fe6cd5415a09470f57cb652d653ef635ecd9a997fef2537decaf18eb7545b7fa461087c81610e97565b836001600160a01b0316856001600160a01b0316876001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6286866040516108d4929190918252602082015260400190565b60405180910390a4505050505050565b600054600390610100900460ff16158015610906575060005460ff8083169116105b6109695760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105e9565b6000805461ffff191660ff8316176101001781556109869061051d565b5115806109925750303b155b156109ab576109a083610f76565b6109ab600083610ea4565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610a2781610e97565b6106ab82610f76565b6040516309a711b960e31b815260040160405180910390fd5b600554604051630e972f9160e41b81526004810184905260ff831660248201526000916001600160a01b03169063e972f91090604401602060405180830381865afa158015610a9c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190611e48565b6000610acb81610e97565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526001602081905260409091200154610b0a81610e97565b61062c8383610f0f565b600554604051632b2bf81b60e11b81526004810183905260609182916001600160a01b0390911690635657f03690602401600060405180830381865afa158015610b62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b8a9190810190611ed4565b91509150915091565b60006040516309a711b960e31b815260040160405180910390fd5b6001600160a01b038516331480610bca5750610bca8533610b93565b610be65760405162461bcd60e51b81526004016105e990611d34565b6105ff8585858585610f89565b6005546040516314067f8b60e01b8152600481018390526001600160a01b03848116602483015260009216906314067f8b90604401602060405180830381865afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190611f90565b60006001600160e01b03198216636cdb3d1360e11b1480610c9a57506001600160e01b031982166303a24d0760e21b145b806104a157506104a1826110c5565b8151835114610d0b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016105e9565b6001600160a01b038416610d315760405162461bcd60e51b81526004016105e990611fb6565b33610d40818787878787610a30565b60005b8451811015610e29576000858281518110610d6057610d60611e03565b602002602001015190506000858381518110610d7e57610d7e611e03565b60209081029190910181015160008481526002835260408082206001600160a01b038e168352909352919091205490915081811015610dcf5760405162461bcd60e51b81526004016105e990611ffb565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610e0e908490612045565b9250508190555050505080610e2290611e2f565b9050610d43565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610e7992919061205d565b60405180910390a4610e8f8187878787876110fa565b505050505050565b610ea1813361125e565b50565b610eae82826109f1565b6106ab5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b610f1982826109f1565b156106ab5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b80516106ab90600490602084019061156a565b6001600160a01b038416610faf5760405162461bcd60e51b81526004016105e990611fb6565b336000610fbb856112b7565b90506000610fc8856112b7565b9050610fd8838989858589610a30565b60008681526002602090815260408083206001600160a01b038c1684529091529020548581101561101b5760405162461bcd60e51b81526004016105e990611ffb565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061105a908490612045565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46110ba848a8a8a8a8a611302565b505050505050505050565b60006001600160e01b03198216637965db0b60e01b14806104a157506301ffc9a760e01b6001600160e01b03198316146104a1565b6001600160a01b0384163b15610e8f5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061113e908990899088908890889060040161208b565b6020604051808303816000875af1925050508015611179575060408051601f3d908101601f19168201909252611176918101906120e9565b60015b61122557611185612106565b806308c379a0036111be5750611199612122565b806111a457506111c0565b8060405162461bcd60e51b81526004016105e991906116ec565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105e9565b6001600160e01b0319811663bc197c8160e01b146112555760405162461bcd60e51b81526004016105e9906121ab565b50505050505050565b61126882826109f1565b6106ab57611275816113bd565b6112808360206113cf565b6040516020016112919291906121f3565b60408051601f198184030181529082905262461bcd60e51b82526105e9916004016116ec565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106112f1576112f1611e03565b602090810291909101015292915050565b6001600160a01b0384163b15610e8f5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906113469089908990889088908890600401612268565b6020604051808303816000875af1925050508015611381575060408051601f3d908101601f1916820190925261137e918101906120e9565b60015b61138d57611185612106565b6001600160e01b0319811663f23a6e6160e01b146112555760405162461bcd60e51b81526004016105e9906121ab565b60606104a16001600160a01b03831660145b606060006113de8360026122ad565b6113e9906002612045565b6001600160401b03811115611400576114006116ff565b6040519080825280601f01601f19166020018201604052801561142a576020820181803683370190505b509050600360fc1b8160008151811061144557611445611e03565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061147457611474611e03565b60200101906001600160f81b031916908160001a90535060006114988460026122ad565b6114a3906001612045565b90505b600181111561151b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106114d7576114d7611e03565b1a60f81b8282815181106114ed576114ed611e03565b60200101906001600160f81b031916908160001a90535060049490941c93611514816122cc565b90506114a6565b50831561048f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105e9565b82805461157690611cfa565b90600052602060002090601f01602090048101928261159857600085556115de565b82601f106115b157805160ff19168380011785556115de565b828001600101855582156115de579182015b828111156115de5782518255916020019190600101906115c3565b506115ea9291506115ee565b5090565b5b808211156115ea57600081556001016115ef565b6001600160a01b0381168114610ea157600080fd5b6000806040838503121561162b57600080fd5b823561163681611603565b946020939093013593505050565b6001600160e01b031981168114610ea157600080fd5b60006020828403121561166c57600080fd5b813561048f81611644565b60006020828403121561168957600080fd5b5035919050565b60005b838110156116ab578181015183820152602001611693565b838111156116ba576000848401525b50505050565b600081518084526116d8816020860160208601611690565b601f01601f19169290920160200192915050565b60208152600061048f60208301846116c0565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561173a5761173a6116ff565b6040525050565b60006001600160401b0382111561175a5761175a6116ff565b5060051b60200190565b600082601f83011261177557600080fd5b8135602061178282611741565b60405161178f8282611715565b83815260059390931b85018201928281019150868411156117af57600080fd5b8286015b848110156117ca57803583529183019183016117b3565b509695505050505050565b60006001600160401b038211156117ee576117ee6116ff565b50601f01601f191660200190565b600082601f83011261180d57600080fd5b8135611818816117d5565b6040516118258282611715565b82815285602084870101111561183a57600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080600060a0868803121561187057600080fd5b853561187b81611603565b9450602086013561188b81611603565b935060408601356001600160401b03808211156118a757600080fd5b6118b389838a01611764565b945060608801359150808211156118c957600080fd5b6118d589838a01611764565b935060808801359150808211156118eb57600080fd5b506118f8888289016117fc565b9150509295509295909350565b6000806040838503121561191857600080fd5b82359150602083013561192a81611603565b809150509250929050565b6000806040838503121561194857600080fd5b82356001600160401b038082111561195f57600080fd5b818501915085601f83011261197357600080fd5b8135602061198082611741565b60405161198d8282611715565b83815260059390931b85018201928281019150898411156119ad57600080fd5b948201945b838610156119d45785356119c581611603565b825294820194908201906119b2565b965050860135925050808211156119ea57600080fd5b506119f785828601611764565b9150509250929050565b600081518084526020808501945080840160005b83811015611a3157815187529582019590820190600101611a15565b509495945050505050565b60208152600061048f6020830184611a01565b600080600080600060a08688031215611a6757600080fd5b8535611a7281611603565b94506020860135611a8281611603565b93506040860135611a9281611603565b94979396509394606081013594506080013592915050565b60008060408385031215611abd57600080fd5b82356001600160401b03811115611ad357600080fd5b611adf858286016117fc565b925050602083013561192a81611603565b600060208284031215611b0257600080fd5b81356001600160401b03811115611b1857600080fd5b611b24848285016117fc565b949350505050565b60008060408385031215611b3f57600080fd5b8235611b4a81611603565b91506020830135801515811461192a57600080fd5b60ff81168114610ea157600080fd5b60008060408385031215611b8157600080fd5b82359150602083013561192a81611b5f565b600060208284031215611ba557600080fd5b813561048f81611603565b604080825283519082018190526000906020906060840190828701845b82811015611be957815184529284019290840190600101611bcd565b5050508381038285015284518082528583019183019060005b81811015611c2157835160ff1683529284019291840191600101611c02565b5090979650505050505050565b60008060408385031215611c4157600080fd5b8235611c4c81611603565b9150602083013561192a81611603565b600080600080600060a08688031215611c7457600080fd5b8535611c7f81611603565b94506020860135611c8f81611603565b9350604086013592506060860135915060808601356001600160401b03811115611cb857600080fd5b6118f8888289016117fc565b600060208284031215611cd657600080fd5b5051919050565b600060208284031215611cef57600080fd5b815161048f81611603565b600181811c90821680611d0e57607f821691505b602082108103611d2e57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b600060208284031215611d9457600080fd5b81516001600160401b03811115611daa57600080fd5b8201601f81018413611dbb57600080fd5b8051611dc6816117d5565b604051611dd38282611715565b828152866020848601011115611de857600080fd5b611df9836020830160208701611690565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611e4157611e41611e19565b5060010190565b600060208284031215611e5a57600080fd5b815161048f81611b5f565b600082601f830112611e7657600080fd5b81516020611e8382611741565b604051611e908282611715565b83815260059390931b8501820192828101915086841115611eb057600080fd5b8286015b848110156117ca578051611ec781611b5f565b8352918301918301611eb4565b60008060408385031215611ee757600080fd5b82516001600160401b0380821115611efe57600080fd5b818501915085601f830112611f1257600080fd5b81516020611f1f82611741565b604051611f2c8282611715565b83815260059390931b8501820192828101915089841115611f4c57600080fd5b948201945b83861015611f6a57855182529482019490820190611f51565b91880151919650909350505080821115611f8357600080fd5b506119f785828601611e65565b600060208284031215611fa257600080fd5b815163ffffffff8116811461048f57600080fd5b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6000821982111561205857612058611e19565b500190565b6040815260006120706040830185611a01565b82810360208401526120828185611a01565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906120b790830186611a01565b82810360608401526120c98186611a01565b905082810360808401526120dd81856116c0565b98975050505050505050565b6000602082840312156120fb57600080fd5b815161048f81611644565b600060033d111561211f5760046000803e5060005160e01c5b90565b600060443d10156121305790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561215f57505050505090565b82850191508151818111156121775750505050505090565b843d87010160208285010111156121915750505050505090565b6121a060208286010187611715565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161222b816017850160208801611690565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161225c816028840160208801611690565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906122a2908301846116c0565b979650505050505050565b60008160001904831182151516156122c7576122c7611e19565b500290565b6000816122db576122db611e19565b50600019019056fea26469706673582212209e33646a1ed2d51fcc749870e94aa69546c518fc5bfee43d37014ebc54dd767864736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c8063754b377c116100de578063aed8c6bc11610097578063e37ffe7c11610071578063e37ffe7c146103aa578063e985e9c5146103cb578063f242432a146103de578063ff4468c4146103f157600080fd5b8063aed8c6bc14610371578063b3c1cb2114610384578063d547741f1461039757600080fd5b8063754b377c146103035780637ab4339d1461031d57806391d14854146103305780639b642de114610343578063a217fddf14610356578063a22cb4651461035e57600080fd5b80632f2ff15d1161014b57806344112ed81161012557806344112ed8146102985780634e1273f4146102bf578063710b3096146102df578063730cb7d5146102f257600080fd5b80632f2ff15d1461025f57806336568abe146102725780633e1f3c271461028557600080fd5b8062fdd58e1461019257806301ffc9a7146101b85780630e064366146101db5780630e89341c14610206578063248a9ca3146102265780632eb2c2d61461024a575b600080fd5b6101a56101a0366004611618565b610419565b6040519081526020015b60405180910390f35b6101cb6101c636600461165a565b610496565b60405190151581526020016101af565b6101ee6101e9366004611618565b6104a7565b6040516001600160a01b0390911681526020016101af565b610219610214366004611677565b61051d565b6040516101af91906116ec565b6101a5610234366004611677565b6000908152600160208190526040909120015490565b61025d610258366004611858565b6105b1565b005b61025d61026d366004611905565b610606565b61025d610280366004611905565b610631565b610219610293366004611618565b6106af565b6101a57fe6cd5415a09470f57cb652d653ef635ecd9a997fef2537decaf18eb7545b7fa481565b6102d26102cd366004611935565b610729565b6040516101af9190611a3c565b61025d6102ed366004611a4f565b610852565b6005546001600160a01b03166101ee565b61030b600381565b60405160ff90911681526020016101af565b61025d61032b366004611aaa565b6108e4565b6101cb61033e366004611905565b6109f1565b61025d610351366004611af0565b610a1c565b6101a5600081565b61025d61036c366004611b2c565b610a30565b61030b61037f366004611b6e565b610a49565b61025d610392366004611b93565b610ac0565b61025d6103a5366004611905565b610aee565b6103bd6103b8366004611677565b610b14565b6040516101af929190611bb0565b6101cb6103d9366004611c2e565b610b93565b61025d6103ec366004611c5c565b610bae565b6104046103ff366004611618565b610bf3565b60405163ffffffff90911681526020016101af565b60055460405163461e4f1960e11b8152600481018390526001600160a01b0384811660248301526000921690638c3c9e3290604401602060405180830381865afa15801561046b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190611cc4565b9392505050565b60006104a182610c69565b92915050565b6005546040516363ed4d5360e11b8152600481018390526001600160a01b038481166024830152600092169063c7da9aa690604401602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190611cdd565b60606004805461052c90611cfa565b80601f016020809104026020016040519081016040528092919081815260200182805461055890611cfa565b80156105a55780601f1061057a576101008083540402835291602001916105a5565b820191906000526020600020905b81548152906001019060200180831161058857829003601f168201915b50505050509050919050565b6001600160a01b0385163314806105cd57506105cd8533610b93565b6105f25760405162461bcd60e51b81526004016105e990611d34565b60405180910390fd5b6105ff8585858585610ca9565b5050505050565b6000828152600160208190526040909120015461062281610e97565b61062c8383610ea4565b505050565b6001600160a01b03811633146106a15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105e9565b6106ab8282610f0f565b5050565b600554604051636d7fbb6760e01b8152600481018390526001600160a01b0384811660248301526060921690636d7fbb6790604401600060405180830381865afa158015610701573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261048f9190810190611d82565b6060815183511461078e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105e9565b600083516001600160401b038111156107a9576107a96116ff565b6040519080825280602002602001820160405280156107d2578160200160208202803683370190505b50905060005b845181101561084a5761081d8582815181106107f6576107f6611e03565b602002602001015185838151811061081057610810611e03565b6020026020010151610419565b82828151811061082f5761082f611e03565b602090810291909101015261084381611e2f565b90506107d8565b509392505050565b7fe6cd5415a09470f57cb652d653ef635ecd9a997fef2537decaf18eb7545b7fa461087c81610e97565b836001600160a01b0316856001600160a01b0316876001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6286866040516108d4929190918252602082015260400190565b60405180910390a4505050505050565b600054600390610100900460ff16158015610906575060005460ff8083169116105b6109695760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105e9565b6000805461ffff191660ff8316176101001781556109869061051d565b5115806109925750303b155b156109ab576109a083610f76565b6109ab600083610ea4565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610a2781610e97565b6106ab82610f76565b6040516309a711b960e31b815260040160405180910390fd5b600554604051630e972f9160e41b81526004810184905260ff831660248201526000916001600160a01b03169063e972f91090604401602060405180830381865afa158015610a9c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190611e48565b6000610acb81610e97565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526001602081905260409091200154610b0a81610e97565b61062c8383610f0f565b600554604051632b2bf81b60e11b81526004810183905260609182916001600160a01b0390911690635657f03690602401600060405180830381865afa158015610b62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b8a9190810190611ed4565b91509150915091565b60006040516309a711b960e31b815260040160405180910390fd5b6001600160a01b038516331480610bca5750610bca8533610b93565b610be65760405162461bcd60e51b81526004016105e990611d34565b6105ff8585858585610f89565b6005546040516314067f8b60e01b8152600481018390526001600160a01b03848116602483015260009216906314067f8b90604401602060405180830381865afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190611f90565b60006001600160e01b03198216636cdb3d1360e11b1480610c9a57506001600160e01b031982166303a24d0760e21b145b806104a157506104a1826110c5565b8151835114610d0b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016105e9565b6001600160a01b038416610d315760405162461bcd60e51b81526004016105e990611fb6565b33610d40818787878787610a30565b60005b8451811015610e29576000858281518110610d6057610d60611e03565b602002602001015190506000858381518110610d7e57610d7e611e03565b60209081029190910181015160008481526002835260408082206001600160a01b038e168352909352919091205490915081811015610dcf5760405162461bcd60e51b81526004016105e990611ffb565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610e0e908490612045565b9250508190555050505080610e2290611e2f565b9050610d43565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610e7992919061205d565b60405180910390a4610e8f8187878787876110fa565b505050505050565b610ea1813361125e565b50565b610eae82826109f1565b6106ab5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b610f1982826109f1565b156106ab5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b80516106ab90600490602084019061156a565b6001600160a01b038416610faf5760405162461bcd60e51b81526004016105e990611fb6565b336000610fbb856112b7565b90506000610fc8856112b7565b9050610fd8838989858589610a30565b60008681526002602090815260408083206001600160a01b038c1684529091529020548581101561101b5760405162461bcd60e51b81526004016105e990611ffb565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061105a908490612045565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46110ba848a8a8a8a8a611302565b505050505050505050565b60006001600160e01b03198216637965db0b60e01b14806104a157506301ffc9a760e01b6001600160e01b03198316146104a1565b6001600160a01b0384163b15610e8f5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061113e908990899088908890889060040161208b565b6020604051808303816000875af1925050508015611179575060408051601f3d908101601f19168201909252611176918101906120e9565b60015b61122557611185612106565b806308c379a0036111be5750611199612122565b806111a457506111c0565b8060405162461bcd60e51b81526004016105e991906116ec565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105e9565b6001600160e01b0319811663bc197c8160e01b146112555760405162461bcd60e51b81526004016105e9906121ab565b50505050505050565b61126882826109f1565b6106ab57611275816113bd565b6112808360206113cf565b6040516020016112919291906121f3565b60408051601f198184030181529082905262461bcd60e51b82526105e9916004016116ec565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106112f1576112f1611e03565b602090810291909101015292915050565b6001600160a01b0384163b15610e8f5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906113469089908990889088908890600401612268565b6020604051808303816000875af1925050508015611381575060408051601f3d908101601f1916820190925261137e918101906120e9565b60015b61138d57611185612106565b6001600160e01b0319811663f23a6e6160e01b146112555760405162461bcd60e51b81526004016105e9906121ab565b60606104a16001600160a01b03831660145b606060006113de8360026122ad565b6113e9906002612045565b6001600160401b03811115611400576114006116ff565b6040519080825280601f01601f19166020018201604052801561142a576020820181803683370190505b509050600360fc1b8160008151811061144557611445611e03565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061147457611474611e03565b60200101906001600160f81b031916908160001a90535060006114988460026122ad565b6114a3906001612045565b90505b600181111561151b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106114d7576114d7611e03565b1a60f81b8282815181106114ed576114ed611e03565b60200101906001600160f81b031916908160001a90535060049490941c93611514816122cc565b90506114a6565b50831561048f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105e9565b82805461157690611cfa565b90600052602060002090601f01602090048101928261159857600085556115de565b82601f106115b157805160ff19168380011785556115de565b828001600101855582156115de579182015b828111156115de5782518255916020019190600101906115c3565b506115ea9291506115ee565b5090565b5b808211156115ea57600081556001016115ef565b6001600160a01b0381168114610ea157600080fd5b6000806040838503121561162b57600080fd5b823561163681611603565b946020939093013593505050565b6001600160e01b031981168114610ea157600080fd5b60006020828403121561166c57600080fd5b813561048f81611644565b60006020828403121561168957600080fd5b5035919050565b60005b838110156116ab578181015183820152602001611693565b838111156116ba576000848401525b50505050565b600081518084526116d8816020860160208601611690565b601f01601f19169290920160200192915050565b60208152600061048f60208301846116c0565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561173a5761173a6116ff565b6040525050565b60006001600160401b0382111561175a5761175a6116ff565b5060051b60200190565b600082601f83011261177557600080fd5b8135602061178282611741565b60405161178f8282611715565b83815260059390931b85018201928281019150868411156117af57600080fd5b8286015b848110156117ca57803583529183019183016117b3565b509695505050505050565b60006001600160401b038211156117ee576117ee6116ff565b50601f01601f191660200190565b600082601f83011261180d57600080fd5b8135611818816117d5565b6040516118258282611715565b82815285602084870101111561183a57600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080600060a0868803121561187057600080fd5b853561187b81611603565b9450602086013561188b81611603565b935060408601356001600160401b03808211156118a757600080fd5b6118b389838a01611764565b945060608801359150808211156118c957600080fd5b6118d589838a01611764565b935060808801359150808211156118eb57600080fd5b506118f8888289016117fc565b9150509295509295909350565b6000806040838503121561191857600080fd5b82359150602083013561192a81611603565b809150509250929050565b6000806040838503121561194857600080fd5b82356001600160401b038082111561195f57600080fd5b818501915085601f83011261197357600080fd5b8135602061198082611741565b60405161198d8282611715565b83815260059390931b85018201928281019150898411156119ad57600080fd5b948201945b838610156119d45785356119c581611603565b825294820194908201906119b2565b965050860135925050808211156119ea57600080fd5b506119f785828601611764565b9150509250929050565b600081518084526020808501945080840160005b83811015611a3157815187529582019590820190600101611a15565b509495945050505050565b60208152600061048f6020830184611a01565b600080600080600060a08688031215611a6757600080fd5b8535611a7281611603565b94506020860135611a8281611603565b93506040860135611a9281611603565b94979396509394606081013594506080013592915050565b60008060408385031215611abd57600080fd5b82356001600160401b03811115611ad357600080fd5b611adf858286016117fc565b925050602083013561192a81611603565b600060208284031215611b0257600080fd5b81356001600160401b03811115611b1857600080fd5b611b24848285016117fc565b949350505050565b60008060408385031215611b3f57600080fd5b8235611b4a81611603565b91506020830135801515811461192a57600080fd5b60ff81168114610ea157600080fd5b60008060408385031215611b8157600080fd5b82359150602083013561192a81611b5f565b600060208284031215611ba557600080fd5b813561048f81611603565b604080825283519082018190526000906020906060840190828701845b82811015611be957815184529284019290840190600101611bcd565b5050508381038285015284518082528583019183019060005b81811015611c2157835160ff1683529284019291840191600101611c02565b5090979650505050505050565b60008060408385031215611c4157600080fd5b8235611c4c81611603565b9150602083013561192a81611603565b600080600080600060a08688031215611c7457600080fd5b8535611c7f81611603565b94506020860135611c8f81611603565b9350604086013592506060860135915060808601356001600160401b03811115611cb857600080fd5b6118f8888289016117fc565b600060208284031215611cd657600080fd5b5051919050565b600060208284031215611cef57600080fd5b815161048f81611603565b600181811c90821680611d0e57607f821691505b602082108103611d2e57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b600060208284031215611d9457600080fd5b81516001600160401b03811115611daa57600080fd5b8201601f81018413611dbb57600080fd5b8051611dc6816117d5565b604051611dd38282611715565b828152866020848601011115611de857600080fd5b611df9836020830160208701611690565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611e4157611e41611e19565b5060010190565b600060208284031215611e5a57600080fd5b815161048f81611b5f565b600082601f830112611e7657600080fd5b81516020611e8382611741565b604051611e908282611715565b83815260059390931b8501820192828101915086841115611eb057600080fd5b8286015b848110156117ca578051611ec781611b5f565b8352918301918301611eb4565b60008060408385031215611ee757600080fd5b82516001600160401b0380821115611efe57600080fd5b818501915085601f830112611f1257600080fd5b81516020611f1f82611741565b604051611f2c8282611715565b83815260059390931b8501820192828101915089841115611f4c57600080fd5b948201945b83861015611f6a57855182529482019490820190611f51565b91880151919650909350505080821115611f8357600080fd5b506119f785828601611e65565b600060208284031215611fa257600080fd5b815163ffffffff8116811461048f57600080fd5b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6000821982111561205857612058611e19565b500190565b6040815260006120706040830185611a01565b82810360208401526120828185611a01565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906120b790830186611a01565b82810360608401526120c98186611a01565b905082810360808401526120dd81856116c0565b98975050505050505050565b6000602082840312156120fb57600080fd5b815161048f81611644565b600060033d111561211f5760046000803e5060005160e01c5b90565b600060443d10156121305790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561215f57505050505090565b82850191508151818111156121775750505050505090565b843d87010160208285010111156121915750505050505090565b6121a060208286010187611715565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161222b816017850160208801611690565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161225c816028840160208801611690565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906122a2908301846116c0565b979650505050505050565b60008160001904831182151516156122c7576122c7611e19565b500290565b6000816122db576122db611e19565b50600019019056fea26469706673582212209e33646a1ed2d51fcc749870e94aa69546c518fc5bfee43d37014ebc54dd767864736f6c634300080e0033",
  "devdoc": {
    "author": "Sismo",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "Main function of the ERC1155 badge The balance of a user is equal to the value of the underlying attestation. attestationCollectionId == badgeId",
        "params": {
          "account": "Address to check badge balance (= value of attestation)",
          "id": "Badge Id to check (= attestationCollectionId)"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "constructor": {
        "details": "Constructor",
        "params": {
          "owner": "Owner of the contract, super admin, can setup roles and update the attestation registry",
          "uri": "Uri for the metadata of badges"
        }
      },
      "getAttestationsRegistry()": {
        "details": "Getter of the attestations registry"
      },
      "getAttributeValueForBadge(uint256,uint8)": {
        "details": "Getter of the value of a specific badge attribute",
        "params": {
          "id": "Badge Id to check (= attestationCollectionId)",
          "index": "Index of the attribute"
        }
      },
      "getAttributesNamesAndValuesForBadge(uint256)": {
        "details": "Getter of all badge attributes and their values for a specific badge",
        "params": {
          "id": "Badge Id to check (= attestationCollectionId)"
        }
      },
      "getBadgeExtraData(address,uint256)": {
        "details": "Getter of the badge extra data (it can store nullifier and burnCount)",
        "params": {
          "account": "Address that holds the badge",
          "id": "Badge Id to check (= attestationCollectionId)"
        }
      },
      "getBadgeIssuer(address,uint256)": {
        "details": "Getter of the badge issuer",
        "params": {
          "account": "Address that holds the badge",
          "id": "Badge Id to check (= attestationCollectionId)"
        }
      },
      "getBadgeTimestamp(address,uint256)": {
        "details": "Getter of the badge timestamp",
        "params": {
          "account": "Address that holds the badge",
          "id": "Badge Id to check (= attestationCollectionId)"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(string,address)": {
        "details": "Initializes the contract, to be called by the proxy delegating calls to this implementation",
        "params": {
          "owner": "Owner of the contract, super admin, can setup roles and update the attestation registry",
          "uri": "Uri for the metadata of badges"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Reverts, this is a non transferable ERC115 contract"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Reverts, this is a non transferable ERC115 contract"
      },
      "setAttestationsRegistry(address)": {
        "details": "Set the attestations registry address. Can only be called by owner (default admin)",
        "params": {
          "attestationsRegistry": "new attestations registry address"
        }
      },
      "setUri(string)": {
        "details": "Set the URI. Can only be called by owner (default admin)",
        "params": {
          "uri": "new attestations registry address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "ERC165"
      },
      "triggerTransferEvent(address,address,address,uint256,uint256)": {
        "details": "Emits a TransferSingle event, so subgraphs and other off-chain apps relying on events can see badge minting/burning can only be called by address having the EVENT_TRIGGERER_ROLE (attestations registry address)",
        "params": {
          "from": "address(0) if minting, address of the badge holder if burning",
          "id": "badgeId for which to trigger the event",
          "operator": "who is calling the TransferEvent",
          "to": "address of the badge holder is minting, address(0) if burning",
          "value": "minted/burned balance"
        }
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "title": "Badges contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(string,address)": {
        "notice": "The reinitializer modifier is needed to configure modules that are added through upgrades and that require initialization."
      }
    },
    "notice": "Stateless, Non-transferrable ERC1155 contract. Reads balance from the values of attestations The associated attestations registry triggers TransferSingle events from this contract It allows badge \"shadow mints and burns\" to be caught by off-chain platforms For more information: https://badges.docs.sismo.io",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 935,
        "contract": "contracts/core/Badges.sol:Badges",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 938,
        "contract": "contracts/core/Badges.sol:Badges",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/core/Badges.sol:Badges",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1231,
        "contract": "contracts/core/Badges.sol:Badges",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1237,
        "contract": "contracts/core/Badges.sol:Badges",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1239,
        "contract": "contracts/core/Badges.sol:Badges",
        "label": "_uri",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 11990,
        "contract": "contracts/core/Badges.sol:Badges",
        "label": "_attestationsRegistry",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IAttestationsRegistry)12822"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAttestationsRegistry)12822": {
        "encoding": "inplace",
        "label": "contract IAttestationsRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/core/Badges.sol:Badges",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/core/Badges.sol:Badges",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}