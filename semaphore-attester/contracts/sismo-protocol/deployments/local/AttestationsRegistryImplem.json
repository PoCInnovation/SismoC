{
  "address": "0x5D0Fe0E67D7BDC9E4ba66b3fD886B3EF020A5626",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "badgesAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "AttesterNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedFirstId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedLastId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "FirstId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastCollectionId",
          "type": "uint256"
        }
      ],
      "name": "IdsMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        }
      ],
      "name": "IssuerNotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "collectionIds",
          "type": "uint256[]"
        }
      ],
      "name": "OwnersAndCollectionIdsLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expectedArrayLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "RangeIndexOutOfBounds",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "AttestationDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "AttestationRecorded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstCollectionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastCollectionId",
          "type": "uint256"
        }
      ],
      "name": "IssuerAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstCollectionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastCollectionId",
          "type": "uint256"
        }
      ],
      "name": "IssuerUnauthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "firstCollectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastCollectionId",
          "type": "uint256"
        }
      ],
      "name": "authorizeRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct Range[]",
          "name": "ranges",
          "type": "tuple[]"
        }
      ],
      "name": "authorizeRanges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "collectionIds",
          "type": "uint256[]"
        }
      ],
      "name": "deleteAttestations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAttestationData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct AttestationData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "collectionIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        }
      ],
      "name": "getAttestationDataBatch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct AttestationData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAttestationDataTuple",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAttestationExtraData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAttestationIssuer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAttestationTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAttestationValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "collectionIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        }
      ],
      "name": "getAttestationValueBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "hasAttestation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "attestations",
          "type": "tuple[]"
        }
      ],
      "name": "recordAttestations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstCollectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastCollectionId",
          "type": "uint256"
        }
      ],
      "name": "unauthorizeRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct Range[]",
          "name": "ranges",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rangeIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "unauthorizeRanges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d0a6899bdb0c6b7070513a119dc1c1bc2c543fd44794c0d4f5ec34353e106c7",
  "receipt": {
    "to": null,
    "from": "0xb01ee322C4f028B8A6BFcD2a5d48107dc5bC99EC",
    "contractAddress": "0x5D0Fe0E67D7BDC9E4ba66b3fD886B3EF020A5626",
    "transactionIndex": 0,
    "gasUsed": "2203165",
    "logsBloom": "0x
    "blockHash": "0xd5f8a3bacbd2cfabaae55745efe4769ab3e89fad621c1d0e5756e9564dfe7bf7",
    "transactionHash": "0x3d0a6899bdb0c6b7070513a119dc1c1bc2c543fd44794c0d4f5ec34353e106c7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x3d0a6899bdb0c6b7070513a119dc1c1bc2c543fd44794c0d4f5ec34353e106c7",
        "address": "0x5D0Fe0E67D7BDC9E4ba66b3fD886B3EF020A5626",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b01ee322c4f028b8a6bfcd2a5d48107dc5bc99ec"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd5f8a3bacbd2cfabaae55745efe4769ab3e89fad621c1d0e5756e9564dfe7bf7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x3d0a6899bdb0c6b7070513a119dc1c1bc2c543fd44794c0d4f5ec34353e106c7",
        "address": "0x5D0Fe0E67D7BDC9E4ba66b3fD886B3EF020A5626",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b01ee322c4f028b8a6bfcd2a5d48107dc5bc99ec",
          "0x000000000000000000000000b01ee322c4f028b8a6bfcd2a5d48107dc5bc99ec"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xd5f8a3bacbd2cfabaae55745efe4769ab3e89fad621c1d0e5756e9564dfe7bf7"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "2203165",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb01ee322C4f028B8A6BFcD2a5d48107dc5bC99EC",
    "0xeF5b2Be9a6075a61bCA4384abc375485d5e196c3"
  ],
  "numDeployments": 1,
  "solcInputHash": "166704d46dbd9cfd00d5a3cb8077a32e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"badgesAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"AttesterNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedFirstId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedLastId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FirstId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCollectionId\",\"type\":\"uint256\"}],\"name\":\"IdsMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"IssuerNotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"}],\"name\":\"OwnersAndCollectionIdsLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedArrayLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"RangeIndexOutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"AttestationDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"AttestationRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstCollectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastCollectionId\",\"type\":\"uint256\"}],\"name\":\"IssuerAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstCollectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastCollectionId\",\"type\":\"uint256\"}],\"name\":\"IssuerUnauthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstCollectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCollectionId\",\"type\":\"uint256\"}],\"name\":\"authorizeRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct Range[]\",\"name\":\"ranges\",\"type\":\"tuple[]\"}],\"name\":\"authorizeRanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"}],\"name\":\"deleteAttestations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAttestationData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct AttestationData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"getAttestationDataBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct AttestationData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAttestationDataTuple\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAttestationExtraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAttestationIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAttestationTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAttestationValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"getAttestationValueBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hasAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"}],\"name\":\"recordAttestations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstCollectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCollectionId\",\"type\":\"uint256\"}],\"name\":\"unauthorizeRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct Range[]\",\"name\":\"ranges\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rangeIndexes\",\"type\":\"uint256[]\"}],\"name\":\"unauthorizeRanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sismo\",\"kind\":\"dev\",\"methods\":{\"authorizeRange(address,uint256,uint256)\":{\"details\":\"Authorize an issuer for a specific range\",\"params\":{\"firstCollectionId\":\"First collection Id of the range for which the issuer will be authorized\",\"issuer\":\"Issuer that will be authorized\",\"lastCollectionId\":\"Last collection Id of the range for which the issuer will be authorized\"}},\"authorizeRanges(address,(uint256,uint256)[])\":{\"details\":\"Authorize an issuer for specific ranges\",\"params\":{\"issuer\":\"Issuer that will be authorized\",\"ranges\":\"Ranges for which the issuer will be authorized\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"badgesAddress\":\"Stateless ERC1155 Badges contract\",\"owner\":\"Owner of the contract, has the right to authorize/unauthorize attestations issuers\"}},\"deleteAttestations(address[],uint256[])\":{\"details\":\"Delete function to be called by authorized issuers\",\"params\":{\"collectionIds\":\"The collection ids of the attestations to be deleted\",\"owners\":\"The owners of the attestations to be deleted\"}},\"getAttestationData(uint256,address)\":{\"details\":\"Getter of the data of a specific attestation\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"getAttestationDataBatch(uint256[],address[])\":{\"details\":\"Getter of the data of specific attestations\",\"params\":{\"collectionIds\":\"Collection identifiers of the targeted attestations\",\"owners\":\"Owners of the targeted attestations\"}},\"getAttestationDataTuple(uint256,address)\":{\"details\":\"Getter of the data of a specific attestation as tuple\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"getAttestationExtraData(uint256,address)\":{\"details\":\"Getter of the extraData of a specific attestation\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"getAttestationIssuer(uint256,address)\":{\"details\":\"Getter of the issuer of a specific attestation\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"getAttestationTimestamp(uint256,address)\":{\"details\":\"Getter of the timestamp of a specific attestation\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"getAttestationValue(uint256,address)\":{\"details\":\"Getter of the value of a specific attestation\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"getAttestationValueBatch(uint256[],address[])\":{\"details\":\"Getter of the values of specific attestations\",\"params\":{\"collectionIds\":\"Collection identifiers of the targeted attestations\",\"owners\":\"Owners of the targeted attestations\"}},\"hasAttestation(uint256,address)\":{\"details\":\"Returns whether a user has an attestation from a collection\",\"params\":{\"collectionId\":\"Collection identifier of the targeted attestation\",\"owner\":\"Owner of the targeted attestation\"}},\"initialize(address)\":{\"details\":\"Initialize function, to be called by the proxy delegating calls to this implementation\",\"params\":{\"owner\":\"Owner of the contract, has the right to authorize/unauthorize attestations issuers\"}},\"isAuthorized(address,uint256)\":{\"details\":\"Returns whether a specific issuer is authorized or not to record in a specific attestations collection\",\"params\":{\"collectionId\":\"Collection Id for which the issuer will be checked\",\"issuer\":\"Issuer to be checked\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses the registry. Issuers can no longer record or delete attestations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recordAttestations((uint256,address,address,uint256,uint32,bytes)[])\":{\"details\":\"Main function to be called by authorized issuers\",\"params\":{\"attestations\":\"Attestations to be recorded (creates a new one or overrides an existing one)\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unauthorizeRange(address,uint256,uint256,uint256)\":{\"details\":\"Unauthorize an issuer for a specific range\",\"params\":{\"firstCollectionId\":\"First collection Id of the range for which the issuer will be unauthorized\",\"issuer\":\"Issuer that will be unauthorized\",\"lastCollectionId\":\"Last collection Id of the range for which the issuer will be unauthorized\",\"rangeIndex\":\"Index of the range to be unauthorized\"}},\"unauthorizeRanges(address,(uint256,uint256)[],uint256[])\":{\"details\":\"Unauthorize an issuer for specific ranges\",\"params\":{\"issuer\":\"Issuer that will be unauthorized\",\"ranges\":\"Ranges for which the issuer will be unauthorized\"}},\"unpause()\":{\"details\":\"Unpauses the registry\"}},\"title\":\"Attestations Registry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Main contract of Sismo, stores all recorded attestations in attestations collections Only authorized attestations issuers can record attestation in the registry Attesters that expect to record in the Attestations Registry must be authorized issuers For more information: https://attestations-registry.docs.sismo.io For each attestation recorded, a badge is received by the user The badge is the Non transferrable NFT representation of an attestation  Its ERC1155 contract is stateless, balances are read directly from the registry. Badge balances <=> Attestations values After the creation or update of an attestation, the registry triggers a TransferSingle event from the ERC1155 Badges contracts It enables off-chain apps such as opensea to catch the \\\"shadow mint\\\" of the badge*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/AttestationsRegistry.sol\":\"AttestationsRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/AttestationsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {IAttestationsRegistry} from './interfaces/IAttestationsRegistry.sol';\\nimport {AttestationsRegistryConfigLogic} from './libs/attestations-registry/AttestationsRegistryConfigLogic.sol';\\nimport {AttestationsRegistryState} from './libs/attestations-registry/AttestationsRegistryState.sol';\\nimport {Range, RangeUtils} from './libs/utils/RangeLib.sol';\\nimport {Attestation, AttestationData} from './libs/Structs.sol';\\nimport {IBadges} from './interfaces/IBadges.sol';\\n\\n/**\\n * @title Attestations Registry\\n * @author Sismo\\n * @notice Main contract of Sismo, stores all recorded attestations in attestations collections\\n * Only authorized attestations issuers can record attestation in the registry\\n * Attesters that expect to record in the Attestations Registry must be authorized issuers\\n * For more information: https://attestations-registry.docs.sismo.io\\n\\n * For each attestation recorded, a badge is received by the user\\n * The badge is the Non transferrable NFT representation of an attestation \\n * Its ERC1155 contract is stateless, balances are read directly from the registry. Badge balances <=> Attestations values\\n * After the creation or update of an attestation, the registry triggers a TransferSingle event from the ERC1155 Badges contracts\\n * It enables off-chain apps such as opensea to catch the \\\"shadow mint\\\" of the badge\\n **/\\ncontract AttestationsRegistry is\\n  AttestationsRegistryState,\\n  IAttestationsRegistry,\\n  AttestationsRegistryConfigLogic\\n{\\n  IBadges immutable BADGES;\\n\\n  /**\\n   * @dev Constructor.\\n   * @param owner Owner of the contract, has the right to authorize/unauthorize attestations issuers\\n   * @param badgesAddress Stateless ERC1155 Badges contract\\n   */\\n  constructor(address owner, address badgesAddress) {\\n    initialize(owner);\\n    BADGES = IBadges(badgesAddress);\\n  }\\n\\n  /**\\n   * @dev Initialize function, to be called by the proxy delegating calls to this implementation\\n   * @param owner Owner of the contract, has the right to authorize/unauthorize attestations issuers\\n   */\\n  function initialize(address owner) public initializer {\\n    _transferOwnership(owner);\\n  }\\n\\n  /**\\n   * @dev Main function to be called by authorized issuers\\n   * @param attestations Attestations to be recorded (creates a new one or overrides an existing one)\\n   */\\n  function recordAttestations(Attestation[] calldata attestations) external override whenNotPaused {\\n    address issuer = _msgSender();\\n    for (uint256 i = 0; i < attestations.length; i++) {\\n      if (!_isAuthorized(issuer, attestations[i].collectionId))\\n        revert IssuerNotAuthorized(issuer, attestations[i].collectionId);\\n\\n      uint256 previousAttestationValue = _attestationsData[attestations[i].collectionId][\\n        attestations[i].owner\\n      ].value;\\n\\n      _attestationsData[attestations[i].collectionId][attestations[i].owner] = AttestationData(\\n        attestations[i].issuer,\\n        attestations[i].value,\\n        attestations[i].timestamp,\\n        attestations[i].extraData\\n      );\\n\\n      _triggerBadgeTransferEvent(\\n        attestations[i].collectionId,\\n        attestations[i].owner,\\n        previousAttestationValue,\\n        attestations[i].value\\n      );\\n      emit AttestationRecorded(attestations[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Delete function to be called by authorized issuers\\n   * @param owners The owners of the attestations to be deleted\\n   * @param collectionIds The collection ids of the attestations to be deleted\\n   */\\n  function deleteAttestations(address[] calldata owners, uint256[] calldata collectionIds)\\n    external\\n    override\\n    whenNotPaused\\n  {\\n    if (owners.length != collectionIds.length)\\n      revert OwnersAndCollectionIdsLengthMismatch(owners, collectionIds);\\n\\n    address issuer = _msgSender();\\n    for (uint256 i = 0; i < owners.length; i++) {\\n      AttestationData memory attestationData = _attestationsData[collectionIds[i]][owners[i]];\\n\\n      if (!_isAuthorized(issuer, collectionIds[i]))\\n        revert IssuerNotAuthorized(issuer, collectionIds[i]);\\n      delete _attestationsData[collectionIds[i]][owners[i]];\\n\\n      _triggerBadgeTransferEvent(collectionIds[i], owners[i], attestationData.value, 0);\\n\\n      emit AttestationDeleted(\\n        Attestation(\\n          collectionIds[i],\\n          owners[i],\\n          attestationData.issuer,\\n          attestationData.value,\\n          attestationData.timestamp,\\n          attestationData.extraData\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether a user has an attestation from a collection\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function hasAttestation(uint256 collectionId, address owner)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return _getAttestationValue(collectionId, owner) != 0;\\n  }\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationData(uint256 collectionId, address owner)\\n    external\\n    view\\n    override\\n    returns (AttestationData memory)\\n  {\\n    return _getAttestationData(collectionId, owner);\\n  }\\n\\n  /**\\n   * @dev Getter of the value of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationValue(uint256 collectionId, address owner)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _getAttestationValue(collectionId, owner);\\n  }\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation as tuple\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationDataTuple(uint256 collectionId, address owner)\\n    external\\n    view\\n    override\\n    returns (\\n      address,\\n      uint256,\\n      uint32,\\n      bytes memory\\n    )\\n  {\\n    AttestationData memory attestationData = _attestationsData[collectionId][owner];\\n    return (\\n      attestationData.issuer,\\n      attestationData.value,\\n      attestationData.timestamp,\\n      attestationData.extraData\\n    );\\n  }\\n\\n  /**\\n   * @dev Getter of the extraData of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationExtraData(uint256 collectionId, address owner)\\n    external\\n    view\\n    override\\n    returns (bytes memory)\\n  {\\n    return _attestationsData[collectionId][owner].extraData;\\n  }\\n\\n  /**\\n   * @dev Getter of the issuer of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationIssuer(uint256 collectionId, address owner)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    return _attestationsData[collectionId][owner].issuer;\\n  }\\n\\n  /**\\n   * @dev Getter of the timestamp of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationTimestamp(uint256 collectionId, address owner)\\n    external\\n    view\\n    override\\n    returns (uint32)\\n  {\\n    return _attestationsData[collectionId][owner].timestamp;\\n  }\\n\\n  /**\\n   * @dev Getter of the data of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationDataBatch(uint256[] memory collectionIds, address[] memory owners)\\n    external\\n    view\\n    override\\n    returns (AttestationData[] memory)\\n  {\\n    AttestationData[] memory attestationsDataArray = new AttestationData[](collectionIds.length);\\n    for (uint256 i = 0; i < collectionIds.length; i++) {\\n      attestationsDataArray[i] = _getAttestationData(collectionIds[i], owners[i]);\\n    }\\n    return attestationsDataArray;\\n  }\\n\\n  /**\\n   * @dev Getter of the values of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationValueBatch(uint256[] memory collectionIds, address[] memory owners)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory)\\n  {\\n    uint256[] memory attestationsValues = new uint256[](collectionIds.length);\\n    for (uint256 i = 0; i < collectionIds.length; i++) {\\n      attestationsValues[i] = _getAttestationValue(collectionIds[i], owners[i]);\\n    }\\n    return attestationsValues;\\n  }\\n\\n  /**\\n   * @dev Function that trigger a TransferSingle event from the stateless ERC1155 Badges contract\\n   * It enables off-chain apps such as opensea to catch the \\\"shadow mints/burns\\\" of badges\\n   */\\n  function _triggerBadgeTransferEvent(\\n    uint256 badgeTokenId,\\n    address owner,\\n    uint256 previousValue,\\n    uint256 newValue\\n  ) internal {\\n    bool isGreaterValue = newValue > previousValue;\\n    address operator = address(this);\\n    address from = isGreaterValue ? address(0) : owner;\\n    address to = isGreaterValue ? owner : address(0);\\n    uint256 value = isGreaterValue ? newValue - previousValue : previousValue - newValue;\\n\\n    // if isGreaterValue is true, function triggers mint event. Otherwise triggers burn event.\\n    BADGES.triggerTransferEvent(operator, from, to, badgeTokenId, value);\\n  }\\n\\n  function _getAttestationData(uint256 collectionId, address owner)\\n    internal\\n    view\\n    returns (AttestationData memory)\\n  {\\n    return (_attestationsData[collectionId][owner]);\\n  }\\n\\n  function _getAttestationValue(uint256 collectionId, address owner)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return _attestationsData[collectionId][owner].value;\\n  }\\n}\\n\",\"keccak256\":\"0x3a99acc1d7a7ee0c581e1e266233b5b5b7d29f41ab7300d044a8f21188e7bd62\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAttestationsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Attestation, AttestationData} from '../libs/Structs.sol';\\n\\n/**\\n * @title IAttestationsRegistry\\n * @author Sismo\\n * @notice This is the interface of the AttestationRegistry\\n */\\ninterface IAttestationsRegistry {\\n  error IssuerNotAuthorized(address issuer, uint256 collectionId);\\n  error OwnersAndCollectionIdsLengthMismatch(address[] owners, uint256[] collectionIds);\\n  event AttestationRecorded(Attestation attestation);\\n  event AttestationDeleted(Attestation attestation);\\n\\n  /**\\n   * @dev Main function to be called by authorized issuers\\n   * @param attestations Attestations to be recorded (creates a new one or overrides an existing one)\\n   */\\n  function recordAttestations(Attestation[] calldata attestations) external;\\n\\n  /**\\n   * @dev Delete function to be called by authorized issuers\\n   * @param owners The owners of the attestations to be deleted\\n   * @param collectionIds The collection ids of the attestations to be deleted\\n   */\\n  function deleteAttestations(address[] calldata owners, uint256[] calldata collectionIds) external;\\n\\n  /**\\n   * @dev Returns whether a user has an attestation from a collection\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function hasAttestation(uint256 collectionId, address owner) external returns (bool);\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationData(uint256 collectionId, address owner)\\n    external\\n    view\\n    returns (AttestationData memory);\\n\\n  /**\\n   * @dev Getter of the value of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationValue(uint256 collectionId, address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation as tuple\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationDataTuple(uint256 collectionId, address owner)\\n    external\\n    view\\n    returns (\\n      address,\\n      uint256,\\n      uint32,\\n      bytes memory\\n    );\\n\\n  /**\\n   * @dev Getter of the extraData of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationExtraData(uint256 collectionId, address owner)\\n    external\\n    view\\n    returns (bytes memory);\\n\\n  /**\\n   * @dev Getter of the issuer of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationIssuer(uint256 collectionId, address owner)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Getter of the timestamp of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationTimestamp(uint256 collectionId, address owner)\\n    external\\n    view\\n    returns (uint32);\\n\\n  /**\\n   * @dev Getter of the data of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationDataBatch(uint256[] memory collectionIds, address[] memory owners)\\n    external\\n    view\\n    returns (AttestationData[] memory);\\n\\n  /**\\n   * @dev Getter of the values of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationValueBatch(uint256[] memory collectionIds, address[] memory owners)\\n    external\\n    view\\n    returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xcf79a817ec578f5b4d8f23853dd8df0e3b1acfbff2b5a01601fd9a7315862ec9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAttestationsRegistryConfigLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Forked from, removed storage, OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.14;\\n\\nimport {Range, RangeUtils} from '../libs/utils/RangeLib.sol';\\n\\ninterface IAttestationsRegistryConfigLogic {\\n  error AttesterNotFound(address issuer);\\n  error RangeIndexOutOfBounds(address issuer, uint256 expectedArrayLength, uint256 rangeIndex);\\n  error IdsMismatch(\\n    address issuer,\\n    uint256 rangeIndex,\\n    uint256 expectedFirstId,\\n    uint256 expectedLastId,\\n    uint256 FirstId,\\n    uint256 lastCollectionId\\n  );\\n  event IssuerAuthorized(address issuer, uint256 firstCollectionId, uint256 lastCollectionId);\\n  event IssuerUnauthorized(address issuer, uint256 firstCollectionId, uint256 lastCollectionId);\\n\\n  /**\\n   * @dev Authorize an issuer for a specific range\\n   * @param issuer Issuer that will be authorized\\n   * @param firstCollectionId First collection Id of the range for which the issuer will be authorized\\n   * @param lastCollectionId Last collection Id of the range for which the issuer will be authorized\\n   */\\n  function authorizeRange(\\n    address issuer,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) external;\\n\\n  /**\\n   * @dev Unauthorize an issuer for a specific range\\n   * @param issuer Issuer that will be unauthorized\\n   * @param rangeIndex Index of the range to be unauthorized\\n   * @param firstCollectionId First collection Id of the range for which the issuer will be unauthorized\\n   * @param lastCollectionId Last collection Id of the range for which the issuer will be unauthorized\\n   */\\n  function unauthorizeRange(\\n    address issuer,\\n    uint256 rangeIndex,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) external;\\n\\n  /**\\n   * @dev Authorize an issuer for specific ranges\\n   * @param issuer Issuer that will be authorized\\n   * @param ranges Ranges for which the issuer will be authorized\\n   */\\n  function authorizeRanges(address issuer, Range[] memory ranges) external;\\n\\n  /**\\n   * @dev Unauthorize an issuer for specific ranges\\n   * @param issuer Issuer that will be unauthorized\\n   * @param ranges Ranges for which the issuer will be unauthorized\\n   */\\n  function unauthorizeRanges(\\n    address issuer,\\n    Range[] memory ranges,\\n    uint256[] memory rangeIndexes\\n  ) external;\\n\\n  /**\\n   * @dev Returns whether a specific issuer is authorized or not to record in a specific attestations collection\\n   * @param issuer Issuer to be checked\\n   * @param collectionId Collection Id for which the issuer will be checked\\n   */\\n  function isAuthorized(address issuer, uint256 collectionId) external view returns (bool);\\n\\n  /**\\n   * @dev Pauses the registry. Issuers can no longer record or delete attestations\\n   */\\n  function pause() external;\\n\\n  /**\\n   * @dev Unpauses the registry\\n   */\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0xf6499c0a3d08c2ef84d15c8888b833828141f89a20c2aac96af6c7e66b490807\",\"license\":\"MIT\"},\"contracts/core/interfaces/IBadges.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title Interface for Badges contract\\n * @author Sismo\\n * @notice Stateless ERC1155 contract. Reads balance from the values of attestations\\n * The associated attestations registry triggers TransferSingle events from this contract\\n * It allows badge \\\"shadow mints and burns\\\" to be caught by off-chain platforms\\n */\\ninterface IBadges {\\n  error BadgesNonTransferrable();\\n\\n  /**\\n   * @dev Initializes the contract, to be called by the proxy delegating calls to this implementation\\n   * @param uri Uri for the metadata of badges\\n   * @param owner Owner of the contract, super admin, can setup roles and update the attestation registry\\n   */\\n  function initialize(string memory uri, address owner) external;\\n\\n  /**\\n   * @dev Main function of the ERC1155 badge\\n   * The balance of a user is equal to the value of the underlying attestation.\\n   * attestationCollectionId == badgeId\\n   * @param account Address to check badge balance (= value of attestation)\\n   * @param id Badge Id to check (= attestationCollectionId)\\n   */\\n  function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n  /**\\n   * @dev Emits a TransferSingle event, so subgraphs and other off-chain apps relying on events can see badge minting/burning\\n   * can only be called by address having the EVENT_TRIGGERER_ROLE (attestations registry address)\\n   * @param operator who is calling the TransferEvent\\n   * @param from address(0) if minting, address of the badge holder if burning\\n   * @param to address of the badge holder is minting, address(0) if burning\\n   * @param id badgeId for which to trigger the event\\n   * @param value minted/burned balance\\n   */\\n  function triggerTransferEvent(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @dev Set the attestations registry address. Can only be called by owner (default admin)\\n   * @param attestationsRegistry new attestations registry address\\n   */\\n  function setAttestationsRegistry(address attestationsRegistry) external;\\n\\n  /**\\n   * @dev Set the URI. Can only be called by owner (default admin)\\n   * @param uri new attestations registry address\\n   */\\n  function setUri(string memory uri) external;\\n\\n  /**\\n   * @dev Getter of the attestations registry\\n   */\\n  function getAttestationsRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbd279560345ab0f4d4b7f689e714f907522676fe86b17341db034b5a98799019\",\"license\":\"MIT\"},\"contracts/core/libs/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title  Attestations Registry State\\n * @author Sismo\\n * @notice This contract holds all of the storage variables and data\\n *         structures used by the AttestationsRegistry and parent\\n *         contracts.\\n */\\n\\n// User Attestation Request, can be made by any user\\n// The context of an Attestation Request is a specific attester contract\\n// Each attester has groups of accounts in its available data\\n// eg: for a specific attester:\\n//     group 1 <=> accounts that sent txs on mainnet\\n//     group 2 <=> accounts that sent txs on polygon\\n// eg: for another attester:\\n//     group 1 <=> accounts that sent eth txs in 2022\\n//     group 2 <=> accounts sent eth txs in 2021\\nstruct Request {\\n  // implicit address attester;\\n  // implicit uint256 chainId;\\n  Claim[] claims;\\n  address destination; // destination that will receive the end attestation\\n}\\n\\nstruct Claim {\\n  uint256 groupId; // user claims to have an account in this group\\n  uint256 claimedValue; // user claims this value for its account in the group\\n  bytes extraData; // arbitrary data, may be required by the attester to verify claims or generate a specific attestation\\n}\\n\\n/**\\n * @dev Attestation Struct. This is the struct receive as argument by the Attestation Registry.\\n * @param collectionId Attestation collection\\n * @param owner Attestation collection\\n * @param issuer Attestation collection\\n * @param value Attestation collection\\n * @param timestamp Attestation collection\\n * @param extraData Attestation collection\\n */\\nstruct Attestation {\\n  // implicit uint256 chainId;\\n  uint256 collectionId; // Id of the attestation collection (in the registry)\\n  address owner; // Owner of the attestation\\n  address issuer; // Contract that created or last updated the record.\\n  uint256 value; // Value of the attestation\\n  uint32 timestamp; // Timestamp chosen by the attester, should correspond to the effective date of the attestation\\n  // it is different from the recording timestamp (date when the attestation was recorded)\\n  // e.g a proof of NFT ownership may have be recorded today which is 2 month old data.\\n  bytes extraData; // arbitrary data that can be added by the attester\\n}\\n\\n// Attestation Data, stored in the registry\\n// The context is a specific owner of a specific collection\\nstruct AttestationData {\\n  // implicit uint256 chainId\\n  // implicit uint256 collectionId - from context\\n  // implicit owner\\n  address issuer; // Address of the contract that recorded the attestation\\n  uint256 value; // Value of the attestation\\n  uint32 timestamp; // Effective date of issuance of the attestation. (can be different from the recording timestamp)\\n  bytes extraData; // arbitrary data that can be added by the attester\\n}\\n\",\"keccak256\":\"0x893d9a10429878dd4077388ff4da954c20b86a3c172a7bbdd10a01eb5d39b6a0\",\"license\":\"MIT\"},\"contracts/core/libs/attestations-registry/AttestationsRegistryConfigLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Forked from, removed storage, OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.14;\\n\\nimport './OwnableLogic.sol';\\nimport './PausableLogic.sol';\\nimport './InitializableLogic.sol';\\nimport './AttestationsRegistryState.sol';\\nimport {IAttestationsRegistryConfigLogic} from './../../interfaces/IAttestationsRegistryConfigLogic.sol';\\nimport {Range, RangeUtils} from '../utils/RangeLib.sol';\\n\\n/**\\n * @title Attestations Registry Config Logic contract\\n * @author Sismo\\n * @notice Holds the logic of how to authorize/ unauthorize issuers of attestations in the registry\\n **/\\ncontract AttestationsRegistryConfigLogic is\\n  AttestationsRegistryState,\\n  IAttestationsRegistryConfigLogic,\\n  OwnableLogic,\\n  PausableLogic,\\n  InitializableLogic\\n{\\n  using RangeUtils for Range[];\\n\\n  /**\\n   * @dev Authorize an issuer for a specific range\\n   * @param issuer Issuer that will be authorized\\n   * @param firstCollectionId First collection Id of the range for which the issuer will be authorized\\n   * @param lastCollectionId Last collection Id of the range for which the issuer will be authorized\\n   */\\n  function authorizeRange(\\n    address issuer,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) external override onlyOwner {\\n    _authorizeRange(issuer, firstCollectionId, lastCollectionId);\\n  }\\n\\n  /**\\n   * @dev Unauthorize an issuer for a specific range\\n   * @param issuer Issuer that will be unauthorized\\n   * @param rangeIndex Index of the range to be unauthorized\\n   * @param firstCollectionId First collection Id of the range for which the issuer will be unauthorized\\n   * @param lastCollectionId Last collection Id of the range for which the issuer will be unauthorized\\n   */\\n  function unauthorizeRange(\\n    address issuer,\\n    uint256 rangeIndex,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) external override onlyOwner {\\n    _unauthorizeRange(issuer, rangeIndex, firstCollectionId, lastCollectionId);\\n  }\\n\\n  /**\\n   * @dev Authorize an issuer for specific ranges\\n   * @param issuer Issuer that will be authorized\\n   * @param ranges Ranges for which the issuer will be authorized\\n   */\\n  function authorizeRanges(address issuer, Range[] memory ranges) external override onlyOwner {\\n    for (uint256 i = 0; i < ranges.length; i++) {\\n      _authorizeRange(issuer, ranges[i].min, ranges[i].max);\\n    }\\n  }\\n\\n  /**\\n   * @dev Unauthorize an issuer for specific ranges\\n   * @param issuer Issuer that will be unauthorized\\n   * @param ranges Ranges for which the issuer will be unauthorized\\n   */\\n  function unauthorizeRanges(\\n    address issuer,\\n    Range[] memory ranges,\\n    uint256[] memory rangeIndexes\\n  ) external override onlyOwner {\\n    for (uint256 i = 0; i < rangeIndexes.length; i++) {\\n      _unauthorizeRange(issuer, rangeIndexes[i] - i, ranges[i].min, ranges[i].max);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether a specific issuer is authorized or not to record in a specific attestations collection\\n   * @param issuer Issuer to be checked\\n   * @param collectionId Collection Id for which the issuer will be checked\\n   */\\n  function isAuthorized(address issuer, uint256 collectionId) external view returns (bool) {\\n    return _isAuthorized(issuer, collectionId);\\n  }\\n\\n  /**\\n   * @dev Pauses the registry. Issuers can no longer record or delete attestations\\n   */\\n  function pause() external override onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the registry\\n   */\\n  function unpause() external override onlyOwner {\\n    _unpause();\\n  }\\n\\n  function _isAuthorized(address issuer, uint256 collectionId) internal view returns (bool) {\\n    return _authorizedRanges[issuer]._includes(collectionId);\\n  }\\n\\n  function _authorizeRange(\\n    address issuer,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) internal {\\n    Range memory newRange = Range(firstCollectionId, lastCollectionId);\\n    _authorizedRanges[issuer].push(newRange);\\n    emit IssuerAuthorized(issuer, firstCollectionId, lastCollectionId);\\n  }\\n\\n  function _unauthorizeRange(\\n    address issuer,\\n    uint256 rangeIndex,\\n    uint256 firstCollectionId,\\n    uint256 lastCollectionId\\n  ) internal onlyOwner {\\n    if (rangeIndex >= _authorizedRanges[issuer].length)\\n      revert RangeIndexOutOfBounds(issuer, _authorizedRanges[issuer].length, rangeIndex);\\n\\n    uint256 expectedFirstId = _authorizedRanges[issuer][rangeIndex].min;\\n    uint256 expectedLastId = _authorizedRanges[issuer][rangeIndex].max;\\n    if (firstCollectionId != expectedFirstId || lastCollectionId != expectedLastId)\\n      revert IdsMismatch(\\n        issuer,\\n        rangeIndex,\\n        expectedFirstId,\\n        expectedLastId,\\n        firstCollectionId,\\n        lastCollectionId\\n      );\\n\\n    _authorizedRanges[issuer][rangeIndex] = _authorizedRanges[issuer][\\n      _authorizedRanges[issuer].length - 1\\n    ];\\n    _authorizedRanges[issuer].pop();\\n    emit IssuerUnauthorized(issuer, firstCollectionId, lastCollectionId);\\n  }\\n}\\n\",\"keccak256\":\"0xce7d42accffd665859f61c2f3499a8de85152449659a0298653c97eb6693f4a2\",\"license\":\"MIT\"},\"contracts/core/libs/attestations-registry/AttestationsRegistryState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Range} from '../utils/RangeLib.sol';\\nimport {Attestation, AttestationData} from '../Structs.sol';\\n\\ncontract AttestationsRegistryState {\\n  // main config\\n  bool internal _initialized;\\n  bool internal _initializing;\\n  bool internal _paused;\\n  address internal _owner;\\n  // keeping some space for future\\n  uint256[15] private _placeHolders;\\n\\n  // storing the authorized ranges for each attesters\\n  mapping(address => Range[]) internal _authorizedRanges;\\n  // keeping some space for future\\n  uint256[15] private _placeHolders2;\\n  // storing the data of attestations\\n  // =collectionId=> =owner=> attestationData\\n  mapping(uint256 => mapping(address => AttestationData)) internal _attestationsData;\\n}\\n\",\"keccak256\":\"0x40fd47db58c335b9741394402988f986cc1c9020d0b9846b29dffa446e364980\",\"license\":\"MIT\"},\"contracts/core/libs/attestations-registry/InitializableLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n// Forked from, removed storage, OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.14;\\n\\nimport '../utils/Address.sol';\\nimport './AttestationsRegistryState.sol';\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract InitializableLogic is AttestationsRegistryState {\\n  // only diff with oz\\n  // /**\\n  //  * @dev Indicates that the contract has been initialized.\\n  //  */\\n  // bool private _initialized;\\n\\n  // /**\\n  //  * @dev Indicates that the contract is in the process of being initialized.\\n  //  */\\n  // bool private _initializing;\\n\\n  /**\\n   * @dev Modifier to protect an initializer function from being invoked twice.\\n   */\\n  modifier initializer() {\\n    // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n    // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n    // contract may have been reentered.\\n    require(\\n      _initializing ? _isConstructor() : !_initialized,\\n      'Initializable: contract is already initialized'\\n    );\\n\\n    bool isTopLevelCall = !_initializing;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n      _initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} modifier, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, 'Initializable: contract is not initializing');\\n    _;\\n  }\\n\\n  function _isConstructor() private view returns (bool) {\\n    return !Address.isContract(address(this));\\n  }\\n}\\n\",\"keccak256\":\"0x7798d1365297205f08f0a0e5fb8bf26005bdf82b040af45bab8d168018c43ac5\",\"license\":\"MIT\"},\"contracts/core/libs/attestations-registry/OwnableLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Forked from, removed storage, OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.14;\\n\\nimport '../utils/Context.sol';\\nimport './AttestationsRegistryState.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableLogic is Context, AttestationsRegistryState {\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  // This is the only diff with OZ contract\\n  // address private _owner;\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0x74ff8ebdd6ad706a45354f1045ef623840aa1dbde37874dde2b6bfa498e0bdb3\",\"license\":\"MIT\"},\"contracts/core/libs/attestations-registry/PausableLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Forked from, removed storage, OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.14;\\n\\nimport '../utils/Context.sol';\\nimport './AttestationsRegistryState.sol';\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableLogic is Context, AttestationsRegistryState {\\n  /**\\n   * @dev Emitted when the pause is triggered by `account`.\\n   */\\n  event Paused(address account);\\n\\n  /**\\n   * @dev Emitted when the pause is lifted by `account`.\\n   */\\n  event Unpaused(address account);\\n\\n  // this is the only diff with OZ contract\\n  // bool private _paused;\\n\\n  /**\\n   * @dev Initializes the contract in unpaused state.\\n   */\\n  constructor() {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @dev Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view virtual returns (bool) {\\n    return _paused;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), 'Pausable: paused');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), 'Pausable: not paused');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Triggers stopped state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _pause() internal virtual whenNotPaused {\\n    _paused = true;\\n    emit Paused(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns to normal state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  function _unpause() internal virtual whenPaused {\\n    _paused = false;\\n    emit Unpaused(_msgSender());\\n  }\\n}\\n\",\"keccak256\":\"0x234c48f5eb48bb15b6c2535428f1e28e172bc2c6fbf58c99ba7b3ca75e884c60\",\"license\":\"MIT\"},\"contracts/core/libs/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, 'Address: low-level call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\\n    require(isContract(target), 'Address: call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), 'Address: static call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: delegate call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5d46e52cb7914d16d80db123b88f0f54598a959a8ca94913a9d956bf14fd7730\",\"license\":\"MIT\"},\"contracts/core/libs/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.14;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xe2dba7215628ceb3bb6f28422c7ca48d79615dd7aa8ba54978d4d8cad996f57e\",\"license\":\"MIT\"},\"contracts/core/libs/utils/RangeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nstruct Range {\\n  uint256 min;\\n  uint256 max;\\n}\\n\\n// Range [0;3] includees 0 and 3\\nlibrary RangeUtils {\\n  function _includes(Range[] storage ranges, uint256 collectionId) internal view returns (bool) {\\n    for (uint256 i = 0; i < ranges.length; i++) {\\n      if (collectionId >= ranges[i].min && collectionId <= ranges[i].max) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0x8f04a81575ba69887b302887d4ffbd8eb6f3d9d1a7be920e5478c95b30890ce1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Sismo",
    "kind": "dev",
    "methods": {
      "authorizeRange(address,uint256,uint256)": {
        "details": "Authorize an issuer for a specific range",
        "params": {
          "firstCollectionId": "First collection Id of the range for which the issuer will be authorized",
          "issuer": "Issuer that will be authorized",
          "lastCollectionId": "Last collection Id of the range for which the issuer will be authorized"
        }
      },
      "authorizeRanges(address,(uint256,uint256)[])": {
        "details": "Authorize an issuer for specific ranges",
        "params": {
          "issuer": "Issuer that will be authorized",
          "ranges": "Ranges for which the issuer will be authorized"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "badgesAddress": "Stateless ERC1155 Badges contract",
          "owner": "Owner of the contract, has the right to authorize/unauthorize attestations issuers"
        }
      },
      "deleteAttestations(address[],uint256[])": {
        "details": "Delete function to be called by authorized issuers",
        "params": {
          "collectionIds": "The collection ids of the attestations to be deleted",
          "owners": "The owners of the attestations to be deleted"
        }
      },
      "getAttestationData(uint256,address)": {
        "details": "Getter of the data of a specific attestation",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "getAttestationDataBatch(uint256[],address[])": {
        "details": "Getter of the data of specific attestations",
        "params": {
          "collectionIds": "Collection identifiers of the targeted attestations",
          "owners": "Owners of the targeted attestations"
        }
      },
      "getAttestationDataTuple(uint256,address)": {
        "details": "Getter of the data of a specific attestation as tuple",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "getAttestationExtraData(uint256,address)": {
        "details": "Getter of the extraData of a specific attestation",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "getAttestationIssuer(uint256,address)": {
        "details": "Getter of the issuer of a specific attestation",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "getAttestationTimestamp(uint256,address)": {
        "details": "Getter of the timestamp of a specific attestation",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "getAttestationValue(uint256,address)": {
        "details": "Getter of the value of a specific attestation",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "getAttestationValueBatch(uint256[],address[])": {
        "details": "Getter of the values of specific attestations",
        "params": {
          "collectionIds": "Collection identifiers of the targeted attestations",
          "owners": "Owners of the targeted attestations"
        }
      },
      "hasAttestation(uint256,address)": {
        "details": "Returns whether a user has an attestation from a collection",
        "params": {
          "collectionId": "Collection identifier of the targeted attestation",
          "owner": "Owner of the targeted attestation"
        }
      },
      "initialize(address)": {
        "details": "Initialize function, to be called by the proxy delegating calls to this implementation",
        "params": {
          "owner": "Owner of the contract, has the right to authorize/unauthorize attestations issuers"
        }
      },
      "isAuthorized(address,uint256)": {
        "details": "Returns whether a specific issuer is authorized or not to record in a specific attestations collection",
        "params": {
          "collectionId": "Collection Id for which the issuer will be checked",
          "issuer": "Issuer to be checked"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses the registry. Issuers can no longer record or delete attestations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recordAttestations((uint256,address,address,uint256,uint32,bytes)[])": {
        "details": "Main function to be called by authorized issuers",
        "params": {
          "attestations": "Attestations to be recorded (creates a new one or overrides an existing one)"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unauthorizeRange(address,uint256,uint256,uint256)": {
        "details": "Unauthorize an issuer for a specific range",
        "params": {
          "firstCollectionId": "First collection Id of the range for which the issuer will be unauthorized",
          "issuer": "Issuer that will be unauthorized",
          "lastCollectionId": "Last collection Id of the range for which the issuer will be unauthorized",
          "rangeIndex": "Index of the range to be unauthorized"
        }
      },
      "unauthorizeRanges(address,(uint256,uint256)[],uint256[])": {
        "details": "Unauthorize an issuer for specific ranges",
        "params": {
          "issuer": "Issuer that will be unauthorized",
          "ranges": "Ranges for which the issuer will be unauthorized"
        }
      },
      "unpause()": {
        "details": "Unpauses the registry"
      }
    },
    "title": "Attestations Registry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Main contract of Sismo, stores all recorded attestations in attestations collections Only authorized attestations issuers can record attestation in the registry Attesters that expect to record in the Attestations Registry must be authorized issuers For more information: https://attestations-registry.docs.sismo.io For each attestation recorded, a badge is received by the user The badge is the Non transferrable NFT representation of an attestation  Its ERC1155 contract is stateless, balances are read directly from the registry. Badge balances <=> Attestations values After the creation or update of an attestation, the registry triggers a TransferSingle event from the ERC1155 Badges contracts It enables off-chain apps such as opensea to catch the \"shadow mint\" of the badge*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13828,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13830,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13832,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_paused",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13834,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_owner",
        "offset": 3,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13838,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_placeHolders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)15_storage"
      },
      {
        "astId": 13844,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_authorizedRanges",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_struct(Range)14450_storage)dyn_storage)"
      },
      {
        "astId": 13848,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_placeHolders2",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_uint256)15_storage"
      },
      {
        "astId": 13855,
        "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
        "label": "_attestationsData",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(AttestationData)13482_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Range)14450_storage)dyn_storage": {
        "base": "t_struct(Range)14450_storage",
        "encoding": "dynamic_array",
        "label": "struct Range[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)15_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[15]",
        "numberOfBytes": "480"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Range)14450_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Range[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Range)14450_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(AttestationData)13482_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AttestationData)",
        "numberOfBytes": "32",
        "value": "t_struct(AttestationData)13482_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(AttestationData)13482_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct AttestationData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(AttestationData)13482_storage)"
      },
      "t_struct(AttestationData)13482_storage": {
        "encoding": "inplace",
        "label": "struct AttestationData",
        "members": [
          {
            "astId": 13475,
            "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
            "label": "issuer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13477,
            "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13479,
            "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 13481,
            "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
            "label": "extraData",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Range)14450_storage": {
        "encoding": "inplace",
        "label": "struct Range",
        "members": [
          {
            "astId": 14447,
            "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
            "label": "min",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14449,
            "contract": "contracts/core/AttestationsRegistry.sol:AttestationsRegistry",
            "label": "max",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}